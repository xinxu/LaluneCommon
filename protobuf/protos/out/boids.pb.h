// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: boids.proto

#ifndef PROTOBUF_boids_2eproto__INCLUDED
#define PROTOBUF_boids_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace boids {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_boids_2eproto();
void protobuf_AssignDesc_boids_2eproto();
void protobuf_ShutdownFile_boids_2eproto();

class BoidsMessageHeader;

enum BoidsMessageHeader_MessageType {
  BoidsMessageHeader_MessageType_PVP_SERVER_HEART_BEAT = 1,
  BoidsMessageHeader_MessageType_AUTO_MATCH_REQUEST = 2,
  BoidsMessageHeader_MessageType_AUTO_MATCH_RESPONSE = 3,
  BoidsMessageHeader_MessageType_PVP_SERVER_CREATE_GAME_REQUEST = 4,
  BoidsMessageHeader_MessageType_PVP_SERVER_CREATE_GAME_RESPONSE = 5,
  BoidsMessageHeader_MessageType_PVP_SERVER_REGISTER_REQUEST = 6,
  BoidsMessageHeader_MessageType_PVP_SERVER_REGISTER_RESPONSE = 7
};
bool BoidsMessageHeader_MessageType_IsValid(int value);
const BoidsMessageHeader_MessageType BoidsMessageHeader_MessageType_MessageType_MIN = BoidsMessageHeader_MessageType_PVP_SERVER_HEART_BEAT;
const BoidsMessageHeader_MessageType BoidsMessageHeader_MessageType_MessageType_MAX = BoidsMessageHeader_MessageType_PVP_SERVER_REGISTER_RESPONSE;
const int BoidsMessageHeader_MessageType_MessageType_ARRAYSIZE = BoidsMessageHeader_MessageType_MessageType_MAX + 1;

const ::google_lalune::protobuf::EnumDescriptor* BoidsMessageHeader_MessageType_descriptor();
inline const ::std::string& BoidsMessageHeader_MessageType_Name(BoidsMessageHeader_MessageType value) {
  return ::google_lalune::protobuf::internal::NameOfEnum(
    BoidsMessageHeader_MessageType_descriptor(), value);
}
inline bool BoidsMessageHeader_MessageType_Parse(
    const ::std::string& name, BoidsMessageHeader_MessageType* value) {
  return ::google_lalune::protobuf::internal::ParseNamedEnum<BoidsMessageHeader_MessageType>(
    BoidsMessageHeader_MessageType_descriptor(), name, value);
}
// ===================================================================

class BoidsMessageHeader : public ::google_lalune::protobuf::Message {
 public:
  BoidsMessageHeader();
  virtual ~BoidsMessageHeader();

  BoidsMessageHeader(const BoidsMessageHeader& from);

  inline BoidsMessageHeader& operator=(const BoidsMessageHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const BoidsMessageHeader& default_instance();

  void Swap(BoidsMessageHeader* other);

  // implements Message ----------------------------------------------

  BoidsMessageHeader* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const BoidsMessageHeader& from);
  void MergeFrom(const BoidsMessageHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BoidsMessageHeader_MessageType MessageType;
  static const MessageType PVP_SERVER_HEART_BEAT = BoidsMessageHeader_MessageType_PVP_SERVER_HEART_BEAT;
  static const MessageType AUTO_MATCH_REQUEST = BoidsMessageHeader_MessageType_AUTO_MATCH_REQUEST;
  static const MessageType AUTO_MATCH_RESPONSE = BoidsMessageHeader_MessageType_AUTO_MATCH_RESPONSE;
  static const MessageType PVP_SERVER_CREATE_GAME_REQUEST = BoidsMessageHeader_MessageType_PVP_SERVER_CREATE_GAME_REQUEST;
  static const MessageType PVP_SERVER_CREATE_GAME_RESPONSE = BoidsMessageHeader_MessageType_PVP_SERVER_CREATE_GAME_RESPONSE;
  static const MessageType PVP_SERVER_REGISTER_REQUEST = BoidsMessageHeader_MessageType_PVP_SERVER_REGISTER_REQUEST;
  static const MessageType PVP_SERVER_REGISTER_RESPONSE = BoidsMessageHeader_MessageType_PVP_SERVER_REGISTER_RESPONSE;
  static inline bool MessageType_IsValid(int value) {
    return BoidsMessageHeader_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    BoidsMessageHeader_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    BoidsMessageHeader_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    BoidsMessageHeader_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google_lalune::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return BoidsMessageHeader_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return BoidsMessageHeader_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return BoidsMessageHeader_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .boids.BoidsMessageHeader.MessageType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::boids::BoidsMessageHeader_MessageType type() const;
  inline void set_type(::boids::BoidsMessageHeader_MessageType value);

  // required int32 error = 2 [default = 0];
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline ::google_lalune::protobuf::int32 error() const;
  inline void set_error(::google_lalune::protobuf::int32 value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:boids.BoidsMessageHeader)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_data();
  inline void clear_has_data();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google_lalune::protobuf::int32 error_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_boids_2eproto();
  friend void protobuf_AssignDesc_boids_2eproto();
  friend void protobuf_ShutdownFile_boids_2eproto();

  void InitAsDefaultInstance();
  static BoidsMessageHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// BoidsMessageHeader

// required .boids.BoidsMessageHeader.MessageType type = 1;
inline bool BoidsMessageHeader::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoidsMessageHeader::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoidsMessageHeader::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoidsMessageHeader::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::boids::BoidsMessageHeader_MessageType BoidsMessageHeader::type() const {
  // @@protoc_insertion_point(field_get:boids.BoidsMessageHeader.type)
  return static_cast< ::boids::BoidsMessageHeader_MessageType >(type_);
}
inline void BoidsMessageHeader::set_type(::boids::BoidsMessageHeader_MessageType value) {
  assert(::boids::BoidsMessageHeader_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:boids.BoidsMessageHeader.type)
}

// required int32 error = 2 [default = 0];
inline bool BoidsMessageHeader::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoidsMessageHeader::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoidsMessageHeader::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoidsMessageHeader::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::google_lalune::protobuf::int32 BoidsMessageHeader::error() const {
  // @@protoc_insertion_point(field_get:boids.BoidsMessageHeader.error)
  return error_;
}
inline void BoidsMessageHeader::set_error(::google_lalune::protobuf::int32 value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:boids.BoidsMessageHeader.error)
}

// optional bytes data = 3;
inline bool BoidsMessageHeader::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BoidsMessageHeader::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BoidsMessageHeader::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BoidsMessageHeader::clear_data() {
  if (data_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& BoidsMessageHeader::data() const {
  // @@protoc_insertion_point(field_get:boids.BoidsMessageHeader.data)
  return *data_;
}
inline void BoidsMessageHeader::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:boids.BoidsMessageHeader.data)
}
inline void BoidsMessageHeader::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:boids.BoidsMessageHeader.data)
}
inline void BoidsMessageHeader::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:boids.BoidsMessageHeader.data)
}
inline ::std::string* BoidsMessageHeader::mutable_data() {
  set_has_data();
  if (data_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:boids.BoidsMessageHeader.data)
  return data_;
}
inline ::std::string* BoidsMessageHeader::release_data() {
  clear_has_data();
  if (data_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BoidsMessageHeader::set_allocated_data(::std::string* data) {
  if (data_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:boids.BoidsMessageHeader.data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace boids

#ifndef SWIG
namespace google_lalune {
namespace protobuf {

template <> struct is_proto_enum< ::boids::BoidsMessageHeader_MessageType> : ::google_lalune::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::boids::BoidsMessageHeader_MessageType>() {
  return ::boids::BoidsMessageHeader_MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_boids_2eproto__INCLUDED
