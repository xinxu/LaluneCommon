// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Battle.proto

#ifndef PROTOBUF_Battle_2eproto__INCLUDED
#define PROTOBUF_Battle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lalune {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Battle_2eproto();
void protobuf_AssignDesc_Battle_2eproto();
void protobuf_ShutdownFile_Battle_2eproto();

class MatchRequest;
class GamePlayer;
class MatchResponse;
class ConnectToGame;
class ConnectToGameResponse;
class GameStart;
class GameAction;
class GameActions;

// ===================================================================

class MatchRequest : public ::google_lalune::protobuf::Message {
 public:
  MatchRequest();
  virtual ~MatchRequest();

  MatchRequest(const MatchRequest& from);

  inline MatchRequest& operator=(const MatchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const MatchRequest& default_instance();

  void Swap(MatchRequest* other);

  // implements Message ----------------------------------------------

  MatchRequest* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const MatchRequest& from);
  void MergeFrom(const MatchRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 game_type = 1;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 1;
  inline ::google_lalune::protobuf::uint32 game_type() const;
  inline void set_game_type(::google_lalune::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:lalune.MatchRequest)
 private:
  inline void set_has_game_type();
  inline void clear_has_game_type();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_lalune::protobuf::uint32 game_type_;
  friend void  protobuf_AddDesc_Battle_2eproto();
  friend void protobuf_AssignDesc_Battle_2eproto();
  friend void protobuf_ShutdownFile_Battle_2eproto();

  void InitAsDefaultInstance();
  static MatchRequest* default_instance_;
};
// -------------------------------------------------------------------

class GamePlayer : public ::google_lalune::protobuf::Message {
 public:
  GamePlayer();
  virtual ~GamePlayer();

  GamePlayer(const GamePlayer& from);

  inline GamePlayer& operator=(const GamePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const GamePlayer& default_instance();

  void Swap(GamePlayer* other);

  // implements Message ----------------------------------------------

  GamePlayer* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const GamePlayer& from);
  void MergeFrom(const GamePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google_lalune::protobuf::uint32 player_id() const;
  inline void set_player_id(::google_lalune::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:lalune.GamePlayer)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google_lalune::protobuf::uint32 player_id_;
  friend void  protobuf_AddDesc_Battle_2eproto();
  friend void protobuf_AssignDesc_Battle_2eproto();
  friend void protobuf_ShutdownFile_Battle_2eproto();

  void InitAsDefaultInstance();
  static GamePlayer* default_instance_;
};
// -------------------------------------------------------------------

class MatchResponse : public ::google_lalune::protobuf::Message {
 public:
  MatchResponse();
  virtual ~MatchResponse();

  MatchResponse(const MatchResponse& from);

  inline MatchResponse& operator=(const MatchResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const MatchResponse& default_instance();

  void Swap(MatchResponse* other);

  // implements Message ----------------------------------------------

  MatchResponse* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const MatchResponse& from);
  void MergeFrom(const MatchResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes game_uuid = 1;
  inline bool has_game_uuid() const;
  inline void clear_game_uuid();
  static const int kGameUuidFieldNumber = 1;
  inline const ::std::string& game_uuid() const;
  inline void set_game_uuid(const ::std::string& value);
  inline void set_game_uuid(const char* value);
  inline void set_game_uuid(const void* value, size_t size);
  inline ::std::string* mutable_game_uuid();
  inline ::std::string* release_game_uuid();
  inline void set_allocated_game_uuid(::std::string* game_uuid);

  // repeated .lalune.GamePlayer players = 2;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline const ::lalune::GamePlayer& players(int index) const;
  inline ::lalune::GamePlayer* mutable_players(int index);
  inline ::lalune::GamePlayer* add_players();
  inline const ::google_lalune::protobuf::RepeatedPtrField< ::lalune::GamePlayer >&
      players() const;
  inline ::google_lalune::protobuf::RepeatedPtrField< ::lalune::GamePlayer >*
      mutable_players();

  // required string game_server_ip = 3;
  inline bool has_game_server_ip() const;
  inline void clear_game_server_ip();
  static const int kGameServerIpFieldNumber = 3;
  inline const ::std::string& game_server_ip() const;
  inline void set_game_server_ip(const ::std::string& value);
  inline void set_game_server_ip(const char* value);
  inline void set_game_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_game_server_ip();
  inline ::std::string* release_game_server_ip();
  inline void set_allocated_game_server_ip(::std::string* game_server_ip);

  // required uint32 game_server_port = 4;
  inline bool has_game_server_port() const;
  inline void clear_game_server_port();
  static const int kGameServerPortFieldNumber = 4;
  inline ::google_lalune::protobuf::uint32 game_server_port() const;
  inline void set_game_server_port(::google_lalune::protobuf::uint32 value);

  // required bytes access_token = 5;
  inline bool has_access_token() const;
  inline void clear_access_token();
  static const int kAccessTokenFieldNumber = 5;
  inline const ::std::string& access_token() const;
  inline void set_access_token(const ::std::string& value);
  inline void set_access_token(const char* value);
  inline void set_access_token(const void* value, size_t size);
  inline ::std::string* mutable_access_token();
  inline ::std::string* release_access_token();
  inline void set_allocated_access_token(::std::string* access_token);

  // @@protoc_insertion_point(class_scope:lalune.MatchResponse)
 private:
  inline void set_has_game_uuid();
  inline void clear_has_game_uuid();
  inline void set_has_game_server_ip();
  inline void clear_has_game_server_ip();
  inline void set_has_game_server_port();
  inline void clear_has_game_server_port();
  inline void set_has_access_token();
  inline void clear_has_access_token();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* game_uuid_;
  ::google_lalune::protobuf::RepeatedPtrField< ::lalune::GamePlayer > players_;
  ::std::string* game_server_ip_;
  ::std::string* access_token_;
  ::google_lalune::protobuf::uint32 game_server_port_;
  friend void  protobuf_AddDesc_Battle_2eproto();
  friend void protobuf_AssignDesc_Battle_2eproto();
  friend void protobuf_ShutdownFile_Battle_2eproto();

  void InitAsDefaultInstance();
  static MatchResponse* default_instance_;
};
// -------------------------------------------------------------------

class ConnectToGame : public ::google_lalune::protobuf::Message {
 public:
  ConnectToGame();
  virtual ~ConnectToGame();

  ConnectToGame(const ConnectToGame& from);

  inline ConnectToGame& operator=(const ConnectToGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const ConnectToGame& default_instance();

  void Swap(ConnectToGame* other);

  // implements Message ----------------------------------------------

  ConnectToGame* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const ConnectToGame& from);
  void MergeFrom(const ConnectToGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 player_uid = 1;
  inline bool has_player_uid() const;
  inline void clear_player_uid();
  static const int kPlayerUidFieldNumber = 1;
  inline ::google_lalune::protobuf::uint32 player_uid() const;
  inline void set_player_uid(::google_lalune::protobuf::uint32 value);

  // required bytes access_token = 2;
  inline bool has_access_token() const;
  inline void clear_access_token();
  static const int kAccessTokenFieldNumber = 2;
  inline const ::std::string& access_token() const;
  inline void set_access_token(const ::std::string& value);
  inline void set_access_token(const char* value);
  inline void set_access_token(const void* value, size_t size);
  inline ::std::string* mutable_access_token();
  inline ::std::string* release_access_token();
  inline void set_allocated_access_token(::std::string* access_token);

  // @@protoc_insertion_point(class_scope:lalune.ConnectToGame)
 private:
  inline void set_has_player_uid();
  inline void clear_has_player_uid();
  inline void set_has_access_token();
  inline void clear_has_access_token();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* access_token_;
  ::google_lalune::protobuf::uint32 player_uid_;
  friend void  protobuf_AddDesc_Battle_2eproto();
  friend void protobuf_AssignDesc_Battle_2eproto();
  friend void protobuf_ShutdownFile_Battle_2eproto();

  void InitAsDefaultInstance();
  static ConnectToGame* default_instance_;
};
// -------------------------------------------------------------------

class ConnectToGameResponse : public ::google_lalune::protobuf::Message {
 public:
  ConnectToGameResponse();
  virtual ~ConnectToGameResponse();

  ConnectToGameResponse(const ConnectToGameResponse& from);

  inline ConnectToGameResponse& operator=(const ConnectToGameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const ConnectToGameResponse& default_instance();

  void Swap(ConnectToGameResponse* other);

  // implements Message ----------------------------------------------

  ConnectToGameResponse* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const ConnectToGameResponse& from);
  void MergeFrom(const ConnectToGameResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 team = 1;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 1;
  inline ::google_lalune::protobuf::uint32 team() const;
  inline void set_team(::google_lalune::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:lalune.ConnectToGameResponse)
 private:
  inline void set_has_team();
  inline void clear_has_team();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_lalune::protobuf::uint32 team_;
  friend void  protobuf_AddDesc_Battle_2eproto();
  friend void protobuf_AssignDesc_Battle_2eproto();
  friend void protobuf_ShutdownFile_Battle_2eproto();

  void InitAsDefaultInstance();
  static ConnectToGameResponse* default_instance_;
};
// -------------------------------------------------------------------

class GameStart : public ::google_lalune::protobuf::Message {
 public:
  GameStart();
  virtual ~GameStart();

  GameStart(const GameStart& from);

  inline GameStart& operator=(const GameStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const GameStart& default_instance();

  void Swap(GameStart* other);

  // implements Message ----------------------------------------------

  GameStart* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const GameStart& from);
  void MergeFrom(const GameStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rand_seed = 1;
  inline bool has_rand_seed() const;
  inline void clear_rand_seed();
  static const int kRandSeedFieldNumber = 1;
  inline ::google_lalune::protobuf::uint32 rand_seed() const;
  inline void set_rand_seed(::google_lalune::protobuf::uint32 value);

  // required uint32 time_per_frame = 2;
  inline bool has_time_per_frame() const;
  inline void clear_time_per_frame();
  static const int kTimePerFrameFieldNumber = 2;
  inline ::google_lalune::protobuf::uint32 time_per_frame() const;
  inline void set_time_per_frame(::google_lalune::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:lalune.GameStart)
 private:
  inline void set_has_rand_seed();
  inline void clear_has_rand_seed();
  inline void set_has_time_per_frame();
  inline void clear_has_time_per_frame();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_lalune::protobuf::uint32 rand_seed_;
  ::google_lalune::protobuf::uint32 time_per_frame_;
  friend void  protobuf_AddDesc_Battle_2eproto();
  friend void protobuf_AssignDesc_Battle_2eproto();
  friend void protobuf_ShutdownFile_Battle_2eproto();

  void InitAsDefaultInstance();
  static GameStart* default_instance_;
};
// -------------------------------------------------------------------

class GameAction : public ::google_lalune::protobuf::Message {
 public:
  GameAction();
  virtual ~GameAction();

  GameAction(const GameAction& from);

  inline GameAction& operator=(const GameAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const GameAction& default_instance();

  void Swap(GameAction* other);

  // implements Message ----------------------------------------------

  GameAction* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const GameAction& from);
  void MergeFrom(const GameAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes action_data = 1;
  inline bool has_action_data() const;
  inline void clear_action_data();
  static const int kActionDataFieldNumber = 1;
  inline const ::std::string& action_data() const;
  inline void set_action_data(const ::std::string& value);
  inline void set_action_data(const char* value);
  inline void set_action_data(const void* value, size_t size);
  inline ::std::string* mutable_action_data();
  inline ::std::string* release_action_data();
  inline void set_allocated_action_data(::std::string* action_data);

  // optional uint64 time_from_game_start = 2;
  inline bool has_time_from_game_start() const;
  inline void clear_time_from_game_start();
  static const int kTimeFromGameStartFieldNumber = 2;
  inline ::google_lalune::protobuf::uint64 time_from_game_start() const;
  inline void set_time_from_game_start(::google_lalune::protobuf::uint64 value);

  // optional uint32 player_uid = 3;
  inline bool has_player_uid() const;
  inline void clear_player_uid();
  static const int kPlayerUidFieldNumber = 3;
  inline ::google_lalune::protobuf::uint32 player_uid() const;
  inline void set_player_uid(::google_lalune::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:lalune.GameAction)
 private:
  inline void set_has_action_data();
  inline void clear_has_action_data();
  inline void set_has_time_from_game_start();
  inline void clear_has_time_from_game_start();
  inline void set_has_player_uid();
  inline void clear_has_player_uid();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* action_data_;
  ::google_lalune::protobuf::uint64 time_from_game_start_;
  ::google_lalune::protobuf::uint32 player_uid_;
  friend void  protobuf_AddDesc_Battle_2eproto();
  friend void protobuf_AssignDesc_Battle_2eproto();
  friend void protobuf_ShutdownFile_Battle_2eproto();

  void InitAsDefaultInstance();
  static GameAction* default_instance_;
};
// -------------------------------------------------------------------

class GameActions : public ::google_lalune::protobuf::Message {
 public:
  GameActions();
  virtual ~GameActions();

  GameActions(const GameActions& from);

  inline GameActions& operator=(const GameActions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const GameActions& default_instance();

  void Swap(GameActions* other);

  // implements Message ----------------------------------------------

  GameActions* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const GameActions& from);
  void MergeFrom(const GameActions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lalune.GameAction actions = 1;
  inline int actions_size() const;
  inline void clear_actions();
  static const int kActionsFieldNumber = 1;
  inline const ::lalune::GameAction& actions(int index) const;
  inline ::lalune::GameAction* mutable_actions(int index);
  inline ::lalune::GameAction* add_actions();
  inline const ::google_lalune::protobuf::RepeatedPtrField< ::lalune::GameAction >&
      actions() const;
  inline ::google_lalune::protobuf::RepeatedPtrField< ::lalune::GameAction >*
      mutable_actions();

  // @@protoc_insertion_point(class_scope:lalune.GameActions)
 private:

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_lalune::protobuf::RepeatedPtrField< ::lalune::GameAction > actions_;
  friend void  protobuf_AddDesc_Battle_2eproto();
  friend void protobuf_AssignDesc_Battle_2eproto();
  friend void protobuf_ShutdownFile_Battle_2eproto();

  void InitAsDefaultInstance();
  static GameActions* default_instance_;
};
// ===================================================================


// ===================================================================

// MatchRequest

// required uint32 game_type = 1;
inline bool MatchRequest::has_game_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchRequest::set_has_game_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchRequest::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchRequest::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google_lalune::protobuf::uint32 MatchRequest::game_type() const {
  // @@protoc_insertion_point(field_get:lalune.MatchRequest.game_type)
  return game_type_;
}
inline void MatchRequest::set_game_type(::google_lalune::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
  // @@protoc_insertion_point(field_set:lalune.MatchRequest.game_type)
}

// -------------------------------------------------------------------

// GamePlayer

// required string name = 1;
inline bool GamePlayer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamePlayer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamePlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamePlayer::clear_name() {
  if (name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GamePlayer::name() const {
  // @@protoc_insertion_point(field_get:lalune.GamePlayer.name)
  return *name_;
}
inline void GamePlayer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.GamePlayer.name)
}
inline void GamePlayer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.GamePlayer.name)
}
inline void GamePlayer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.GamePlayer.name)
}
inline ::std::string* GamePlayer::mutable_name() {
  set_has_name();
  if (name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.GamePlayer.name)
  return name_;
}
inline ::std::string* GamePlayer::release_name() {
  clear_has_name();
  if (name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GamePlayer::set_allocated_name(::std::string* name) {
  if (name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.GamePlayer.name)
}

// required uint32 player_id = 2;
inline bool GamePlayer::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamePlayer::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamePlayer::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamePlayer::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google_lalune::protobuf::uint32 GamePlayer::player_id() const {
  // @@protoc_insertion_point(field_get:lalune.GamePlayer.player_id)
  return player_id_;
}
inline void GamePlayer::set_player_id(::google_lalune::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:lalune.GamePlayer.player_id)
}

// -------------------------------------------------------------------

// MatchResponse

// required bytes game_uuid = 1;
inline bool MatchResponse::has_game_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchResponse::set_has_game_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchResponse::clear_has_game_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchResponse::clear_game_uuid() {
  if (game_uuid_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_uuid_->clear();
  }
  clear_has_game_uuid();
}
inline const ::std::string& MatchResponse::game_uuid() const {
  // @@protoc_insertion_point(field_get:lalune.MatchResponse.game_uuid)
  return *game_uuid_;
}
inline void MatchResponse::set_game_uuid(const ::std::string& value) {
  set_has_game_uuid();
  if (game_uuid_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_uuid_ = new ::std::string;
  }
  game_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.MatchResponse.game_uuid)
}
inline void MatchResponse::set_game_uuid(const char* value) {
  set_has_game_uuid();
  if (game_uuid_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_uuid_ = new ::std::string;
  }
  game_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.MatchResponse.game_uuid)
}
inline void MatchResponse::set_game_uuid(const void* value, size_t size) {
  set_has_game_uuid();
  if (game_uuid_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_uuid_ = new ::std::string;
  }
  game_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.MatchResponse.game_uuid)
}
inline ::std::string* MatchResponse::mutable_game_uuid() {
  set_has_game_uuid();
  if (game_uuid_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.MatchResponse.game_uuid)
  return game_uuid_;
}
inline ::std::string* MatchResponse::release_game_uuid() {
  clear_has_game_uuid();
  if (game_uuid_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = game_uuid_;
    game_uuid_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MatchResponse::set_allocated_game_uuid(::std::string* game_uuid) {
  if (game_uuid_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_uuid_;
  }
  if (game_uuid) {
    set_has_game_uuid();
    game_uuid_ = game_uuid;
  } else {
    clear_has_game_uuid();
    game_uuid_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.MatchResponse.game_uuid)
}

// repeated .lalune.GamePlayer players = 2;
inline int MatchResponse::players_size() const {
  return players_.size();
}
inline void MatchResponse::clear_players() {
  players_.Clear();
}
inline const ::lalune::GamePlayer& MatchResponse::players(int index) const {
  // @@protoc_insertion_point(field_get:lalune.MatchResponse.players)
  return players_.Get(index);
}
inline ::lalune::GamePlayer* MatchResponse::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:lalune.MatchResponse.players)
  return players_.Mutable(index);
}
inline ::lalune::GamePlayer* MatchResponse::add_players() {
  // @@protoc_insertion_point(field_add:lalune.MatchResponse.players)
  return players_.Add();
}
inline const ::google_lalune::protobuf::RepeatedPtrField< ::lalune::GamePlayer >&
MatchResponse::players() const {
  // @@protoc_insertion_point(field_list:lalune.MatchResponse.players)
  return players_;
}
inline ::google_lalune::protobuf::RepeatedPtrField< ::lalune::GamePlayer >*
MatchResponse::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:lalune.MatchResponse.players)
  return &players_;
}

// required string game_server_ip = 3;
inline bool MatchResponse::has_game_server_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchResponse::set_has_game_server_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchResponse::clear_has_game_server_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchResponse::clear_game_server_ip() {
  if (game_server_ip_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_server_ip_->clear();
  }
  clear_has_game_server_ip();
}
inline const ::std::string& MatchResponse::game_server_ip() const {
  // @@protoc_insertion_point(field_get:lalune.MatchResponse.game_server_ip)
  return *game_server_ip_;
}
inline void MatchResponse::set_game_server_ip(const ::std::string& value) {
  set_has_game_server_ip();
  if (game_server_ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_server_ip_ = new ::std::string;
  }
  game_server_ip_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.MatchResponse.game_server_ip)
}
inline void MatchResponse::set_game_server_ip(const char* value) {
  set_has_game_server_ip();
  if (game_server_ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_server_ip_ = new ::std::string;
  }
  game_server_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.MatchResponse.game_server_ip)
}
inline void MatchResponse::set_game_server_ip(const char* value, size_t size) {
  set_has_game_server_ip();
  if (game_server_ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_server_ip_ = new ::std::string;
  }
  game_server_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.MatchResponse.game_server_ip)
}
inline ::std::string* MatchResponse::mutable_game_server_ip() {
  set_has_game_server_ip();
  if (game_server_ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_server_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.MatchResponse.game_server_ip)
  return game_server_ip_;
}
inline ::std::string* MatchResponse::release_game_server_ip() {
  clear_has_game_server_ip();
  if (game_server_ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = game_server_ip_;
    game_server_ip_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MatchResponse::set_allocated_game_server_ip(::std::string* game_server_ip) {
  if (game_server_ip_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_server_ip_;
  }
  if (game_server_ip) {
    set_has_game_server_ip();
    game_server_ip_ = game_server_ip;
  } else {
    clear_has_game_server_ip();
    game_server_ip_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.MatchResponse.game_server_ip)
}

// required uint32 game_server_port = 4;
inline bool MatchResponse::has_game_server_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchResponse::set_has_game_server_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchResponse::clear_has_game_server_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchResponse::clear_game_server_port() {
  game_server_port_ = 0u;
  clear_has_game_server_port();
}
inline ::google_lalune::protobuf::uint32 MatchResponse::game_server_port() const {
  // @@protoc_insertion_point(field_get:lalune.MatchResponse.game_server_port)
  return game_server_port_;
}
inline void MatchResponse::set_game_server_port(::google_lalune::protobuf::uint32 value) {
  set_has_game_server_port();
  game_server_port_ = value;
  // @@protoc_insertion_point(field_set:lalune.MatchResponse.game_server_port)
}

// required bytes access_token = 5;
inline bool MatchResponse::has_access_token() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchResponse::set_has_access_token() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchResponse::clear_has_access_token() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchResponse::clear_access_token() {
  if (access_token_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    access_token_->clear();
  }
  clear_has_access_token();
}
inline const ::std::string& MatchResponse::access_token() const {
  // @@protoc_insertion_point(field_get:lalune.MatchResponse.access_token)
  return *access_token_;
}
inline void MatchResponse::set_access_token(const ::std::string& value) {
  set_has_access_token();
  if (access_token_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    access_token_ = new ::std::string;
  }
  access_token_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.MatchResponse.access_token)
}
inline void MatchResponse::set_access_token(const char* value) {
  set_has_access_token();
  if (access_token_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    access_token_ = new ::std::string;
  }
  access_token_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.MatchResponse.access_token)
}
inline void MatchResponse::set_access_token(const void* value, size_t size) {
  set_has_access_token();
  if (access_token_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    access_token_ = new ::std::string;
  }
  access_token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.MatchResponse.access_token)
}
inline ::std::string* MatchResponse::mutable_access_token() {
  set_has_access_token();
  if (access_token_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    access_token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.MatchResponse.access_token)
  return access_token_;
}
inline ::std::string* MatchResponse::release_access_token() {
  clear_has_access_token();
  if (access_token_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = access_token_;
    access_token_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MatchResponse::set_allocated_access_token(::std::string* access_token) {
  if (access_token_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (access_token) {
    set_has_access_token();
    access_token_ = access_token;
  } else {
    clear_has_access_token();
    access_token_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.MatchResponse.access_token)
}

// -------------------------------------------------------------------

// ConnectToGame

// required uint32 player_uid = 1;
inline bool ConnectToGame::has_player_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectToGame::set_has_player_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectToGame::clear_has_player_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectToGame::clear_player_uid() {
  player_uid_ = 0u;
  clear_has_player_uid();
}
inline ::google_lalune::protobuf::uint32 ConnectToGame::player_uid() const {
  // @@protoc_insertion_point(field_get:lalune.ConnectToGame.player_uid)
  return player_uid_;
}
inline void ConnectToGame::set_player_uid(::google_lalune::protobuf::uint32 value) {
  set_has_player_uid();
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:lalune.ConnectToGame.player_uid)
}

// required bytes access_token = 2;
inline bool ConnectToGame::has_access_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectToGame::set_has_access_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectToGame::clear_has_access_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectToGame::clear_access_token() {
  if (access_token_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    access_token_->clear();
  }
  clear_has_access_token();
}
inline const ::std::string& ConnectToGame::access_token() const {
  // @@protoc_insertion_point(field_get:lalune.ConnectToGame.access_token)
  return *access_token_;
}
inline void ConnectToGame::set_access_token(const ::std::string& value) {
  set_has_access_token();
  if (access_token_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    access_token_ = new ::std::string;
  }
  access_token_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.ConnectToGame.access_token)
}
inline void ConnectToGame::set_access_token(const char* value) {
  set_has_access_token();
  if (access_token_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    access_token_ = new ::std::string;
  }
  access_token_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.ConnectToGame.access_token)
}
inline void ConnectToGame::set_access_token(const void* value, size_t size) {
  set_has_access_token();
  if (access_token_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    access_token_ = new ::std::string;
  }
  access_token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.ConnectToGame.access_token)
}
inline ::std::string* ConnectToGame::mutable_access_token() {
  set_has_access_token();
  if (access_token_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    access_token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.ConnectToGame.access_token)
  return access_token_;
}
inline ::std::string* ConnectToGame::release_access_token() {
  clear_has_access_token();
  if (access_token_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = access_token_;
    access_token_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectToGame::set_allocated_access_token(::std::string* access_token) {
  if (access_token_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (access_token) {
    set_has_access_token();
    access_token_ = access_token;
  } else {
    clear_has_access_token();
    access_token_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.ConnectToGame.access_token)
}

// -------------------------------------------------------------------

// ConnectToGameResponse

// required uint32 team = 1;
inline bool ConnectToGameResponse::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectToGameResponse::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectToGameResponse::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectToGameResponse::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google_lalune::protobuf::uint32 ConnectToGameResponse::team() const {
  // @@protoc_insertion_point(field_get:lalune.ConnectToGameResponse.team)
  return team_;
}
inline void ConnectToGameResponse::set_team(::google_lalune::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:lalune.ConnectToGameResponse.team)
}

// -------------------------------------------------------------------

// GameStart

// required uint32 rand_seed = 1;
inline bool GameStart::has_rand_seed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameStart::set_has_rand_seed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameStart::clear_has_rand_seed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameStart::clear_rand_seed() {
  rand_seed_ = 0u;
  clear_has_rand_seed();
}
inline ::google_lalune::protobuf::uint32 GameStart::rand_seed() const {
  // @@protoc_insertion_point(field_get:lalune.GameStart.rand_seed)
  return rand_seed_;
}
inline void GameStart::set_rand_seed(::google_lalune::protobuf::uint32 value) {
  set_has_rand_seed();
  rand_seed_ = value;
  // @@protoc_insertion_point(field_set:lalune.GameStart.rand_seed)
}

// required uint32 time_per_frame = 2;
inline bool GameStart::has_time_per_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameStart::set_has_time_per_frame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameStart::clear_has_time_per_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameStart::clear_time_per_frame() {
  time_per_frame_ = 0u;
  clear_has_time_per_frame();
}
inline ::google_lalune::protobuf::uint32 GameStart::time_per_frame() const {
  // @@protoc_insertion_point(field_get:lalune.GameStart.time_per_frame)
  return time_per_frame_;
}
inline void GameStart::set_time_per_frame(::google_lalune::protobuf::uint32 value) {
  set_has_time_per_frame();
  time_per_frame_ = value;
  // @@protoc_insertion_point(field_set:lalune.GameStart.time_per_frame)
}

// -------------------------------------------------------------------

// GameAction

// optional bytes action_data = 1;
inline bool GameAction::has_action_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameAction::set_has_action_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameAction::clear_has_action_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameAction::clear_action_data() {
  if (action_data_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_data_->clear();
  }
  clear_has_action_data();
}
inline const ::std::string& GameAction::action_data() const {
  // @@protoc_insertion_point(field_get:lalune.GameAction.action_data)
  return *action_data_;
}
inline void GameAction::set_action_data(const ::std::string& value) {
  set_has_action_data();
  if (action_data_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_data_ = new ::std::string;
  }
  action_data_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.GameAction.action_data)
}
inline void GameAction::set_action_data(const char* value) {
  set_has_action_data();
  if (action_data_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_data_ = new ::std::string;
  }
  action_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.GameAction.action_data)
}
inline void GameAction::set_action_data(const void* value, size_t size) {
  set_has_action_data();
  if (action_data_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_data_ = new ::std::string;
  }
  action_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.GameAction.action_data)
}
inline ::std::string* GameAction::mutable_action_data() {
  set_has_action_data();
  if (action_data_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.GameAction.action_data)
  return action_data_;
}
inline ::std::string* GameAction::release_action_data() {
  clear_has_action_data();
  if (action_data_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = action_data_;
    action_data_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GameAction::set_allocated_action_data(::std::string* action_data) {
  if (action_data_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete action_data_;
  }
  if (action_data) {
    set_has_action_data();
    action_data_ = action_data;
  } else {
    clear_has_action_data();
    action_data_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.GameAction.action_data)
}

// optional uint64 time_from_game_start = 2;
inline bool GameAction::has_time_from_game_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameAction::set_has_time_from_game_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameAction::clear_has_time_from_game_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameAction::clear_time_from_game_start() {
  time_from_game_start_ = GOOGLE_ULONGLONG(0);
  clear_has_time_from_game_start();
}
inline ::google_lalune::protobuf::uint64 GameAction::time_from_game_start() const {
  // @@protoc_insertion_point(field_get:lalune.GameAction.time_from_game_start)
  return time_from_game_start_;
}
inline void GameAction::set_time_from_game_start(::google_lalune::protobuf::uint64 value) {
  set_has_time_from_game_start();
  time_from_game_start_ = value;
  // @@protoc_insertion_point(field_set:lalune.GameAction.time_from_game_start)
}

// optional uint32 player_uid = 3;
inline bool GameAction::has_player_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameAction::set_has_player_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameAction::clear_has_player_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameAction::clear_player_uid() {
  player_uid_ = 0u;
  clear_has_player_uid();
}
inline ::google_lalune::protobuf::uint32 GameAction::player_uid() const {
  // @@protoc_insertion_point(field_get:lalune.GameAction.player_uid)
  return player_uid_;
}
inline void GameAction::set_player_uid(::google_lalune::protobuf::uint32 value) {
  set_has_player_uid();
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:lalune.GameAction.player_uid)
}

// -------------------------------------------------------------------

// GameActions

// repeated .lalune.GameAction actions = 1;
inline int GameActions::actions_size() const {
  return actions_.size();
}
inline void GameActions::clear_actions() {
  actions_.Clear();
}
inline const ::lalune::GameAction& GameActions::actions(int index) const {
  // @@protoc_insertion_point(field_get:lalune.GameActions.actions)
  return actions_.Get(index);
}
inline ::lalune::GameAction* GameActions::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:lalune.GameActions.actions)
  return actions_.Mutable(index);
}
inline ::lalune::GameAction* GameActions::add_actions() {
  // @@protoc_insertion_point(field_add:lalune.GameActions.actions)
  return actions_.Add();
}
inline const ::google_lalune::protobuf::RepeatedPtrField< ::lalune::GameAction >&
GameActions::actions() const {
  // @@protoc_insertion_point(field_list:lalune.GameActions.actions)
  return actions_;
}
inline ::google_lalune::protobuf::RepeatedPtrField< ::lalune::GameAction >*
GameActions::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:lalune.GameActions.actions)
  return &actions_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lalune

#ifndef SWIG
namespace google_lalune {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Battle_2eproto__INCLUDED
