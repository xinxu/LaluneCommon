// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle.proto

#ifndef PROTOBUF_battle_2eproto__INCLUDED
#define PROTOBUF_battle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "pvp.pb.h"
// @@protoc_insertion_point(includes)

namespace boids {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_battle_2eproto();
void protobuf_AssignDesc_battle_2eproto();
void protobuf_ShutdownFile_battle_2eproto();

class MatchRequest;
class MatchResponse;
class CreateGame;
class CreateGameResponse;
class PvPServerRegister;
class PvPServerRegisterResponse;
class PvPServerHeartBeat;

// ===================================================================

class MatchRequest : public ::google_lalune::protobuf::Message {
 public:
  MatchRequest();
  virtual ~MatchRequest();

  MatchRequest(const MatchRequest& from);

  inline MatchRequest& operator=(const MatchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const MatchRequest& default_instance();

  void Swap(MatchRequest* other);

  // implements Message ----------------------------------------------

  MatchRequest* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const MatchRequest& from);
  void MergeFrom(const MatchRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google_lalune::protobuf::uint32 player_id() const;
  inline void set_player_id(::google_lalune::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:boids.MatchRequest)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_lalune::protobuf::uint32 player_id_;
  friend void  protobuf_AddDesc_battle_2eproto();
  friend void protobuf_AssignDesc_battle_2eproto();
  friend void protobuf_ShutdownFile_battle_2eproto();

  void InitAsDefaultInstance();
  static MatchRequest* default_instance_;
};
// -------------------------------------------------------------------

class MatchResponse : public ::google_lalune::protobuf::Message {
 public:
  MatchResponse();
  virtual ~MatchResponse();

  MatchResponse(const MatchResponse& from);

  inline MatchResponse& operator=(const MatchResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const MatchResponse& default_instance();

  void Swap(MatchResponse* other);

  // implements Message ----------------------------------------------

  MatchResponse* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const MatchResponse& from);
  void MergeFrom(const MatchResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes game_uuid = 1;
  inline bool has_game_uuid() const;
  inline void clear_game_uuid();
  static const int kGameUuidFieldNumber = 1;
  inline const ::std::string& game_uuid() const;
  inline void set_game_uuid(const ::std::string& value);
  inline void set_game_uuid(const char* value);
  inline void set_game_uuid(const void* value, size_t size);
  inline ::std::string* mutable_game_uuid();
  inline ::std::string* release_game_uuid();
  inline void set_allocated_game_uuid(::std::string* game_uuid);

  // required string game_server_ip = 3;
  inline bool has_game_server_ip() const;
  inline void clear_game_server_ip();
  static const int kGameServerIpFieldNumber = 3;
  inline const ::std::string& game_server_ip() const;
  inline void set_game_server_ip(const ::std::string& value);
  inline void set_game_server_ip(const char* value);
  inline void set_game_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_game_server_ip();
  inline ::std::string* release_game_server_ip();
  inline void set_allocated_game_server_ip(::std::string* game_server_ip);

  // required uint32 game_server_port = 4;
  inline bool has_game_server_port() const;
  inline void clear_game_server_port();
  static const int kGameServerPortFieldNumber = 4;
  inline ::google_lalune::protobuf::uint32 game_server_port() const;
  inline void set_game_server_port(::google_lalune::protobuf::uint32 value);

  // required int32 ret_value = 5;
  inline bool has_ret_value() const;
  inline void clear_ret_value();
  static const int kRetValueFieldNumber = 5;
  inline ::google_lalune::protobuf::int32 ret_value() const;
  inline void set_ret_value(::google_lalune::protobuf::int32 value);

  // optional string ret_info = 6;
  inline bool has_ret_info() const;
  inline void clear_ret_info();
  static const int kRetInfoFieldNumber = 6;
  inline const ::std::string& ret_info() const;
  inline void set_ret_info(const ::std::string& value);
  inline void set_ret_info(const char* value);
  inline void set_ret_info(const char* value, size_t size);
  inline ::std::string* mutable_ret_info();
  inline ::std::string* release_ret_info();
  inline void set_allocated_ret_info(::std::string* ret_info);

  // @@protoc_insertion_point(class_scope:boids.MatchResponse)
 private:
  inline void set_has_game_uuid();
  inline void clear_has_game_uuid();
  inline void set_has_game_server_ip();
  inline void clear_has_game_server_ip();
  inline void set_has_game_server_port();
  inline void clear_has_game_server_port();
  inline void set_has_ret_value();
  inline void clear_has_ret_value();
  inline void set_has_ret_info();
  inline void clear_has_ret_info();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* game_uuid_;
  ::std::string* game_server_ip_;
  ::google_lalune::protobuf::uint32 game_server_port_;
  ::google_lalune::protobuf::int32 ret_value_;
  ::std::string* ret_info_;
  friend void  protobuf_AddDesc_battle_2eproto();
  friend void protobuf_AssignDesc_battle_2eproto();
  friend void protobuf_ShutdownFile_battle_2eproto();

  void InitAsDefaultInstance();
  static MatchResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreateGame : public ::google_lalune::protobuf::Message {
 public:
  CreateGame();
  virtual ~CreateGame();

  CreateGame(const CreateGame& from);

  inline CreateGame& operator=(const CreateGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const CreateGame& default_instance();

  void Swap(CreateGame* other);

  // implements Message ----------------------------------------------

  CreateGame* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const CreateGame& from);
  void MergeFrom(const CreateGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes game_id = 1;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 1;
  inline const ::std::string& game_id() const;
  inline void set_game_id(const ::std::string& value);
  inline void set_game_id(const char* value);
  inline void set_game_id(const void* value, size_t size);
  inline ::std::string* mutable_game_id();
  inline ::std::string* release_game_id();
  inline void set_allocated_game_id(::std::string* game_id);

  // required .boids.GameInitData game_init_data = 2;
  inline bool has_game_init_data() const;
  inline void clear_game_init_data();
  static const int kGameInitDataFieldNumber = 2;
  inline const ::boids::GameInitData& game_init_data() const;
  inline ::boids::GameInitData* mutable_game_init_data();
  inline ::boids::GameInitData* release_game_init_data();
  inline void set_allocated_game_init_data(::boids::GameInitData* game_init_data);

  // @@protoc_insertion_point(class_scope:boids.CreateGame)
 private:
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_game_init_data();
  inline void clear_has_game_init_data();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* game_id_;
  ::boids::GameInitData* game_init_data_;
  friend void  protobuf_AddDesc_battle_2eproto();
  friend void protobuf_AssignDesc_battle_2eproto();
  friend void protobuf_ShutdownFile_battle_2eproto();

  void InitAsDefaultInstance();
  static CreateGame* default_instance_;
};
// -------------------------------------------------------------------

class CreateGameResponse : public ::google_lalune::protobuf::Message {
 public:
  CreateGameResponse();
  virtual ~CreateGameResponse();

  CreateGameResponse(const CreateGameResponse& from);

  inline CreateGameResponse& operator=(const CreateGameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const CreateGameResponse& default_instance();

  void Swap(CreateGameResponse* other);

  // implements Message ----------------------------------------------

  CreateGameResponse* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const CreateGameResponse& from);
  void MergeFrom(const CreateGameResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes game_id = 1;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 1;
  inline const ::std::string& game_id() const;
  inline void set_game_id(const ::std::string& value);
  inline void set_game_id(const char* value);
  inline void set_game_id(const void* value, size_t size);
  inline ::std::string* mutable_game_id();
  inline ::std::string* release_game_id();
  inline void set_allocated_game_id(::std::string* game_id);

  // required int32 ret_value = 2;
  inline bool has_ret_value() const;
  inline void clear_ret_value();
  static const int kRetValueFieldNumber = 2;
  inline ::google_lalune::protobuf::int32 ret_value() const;
  inline void set_ret_value(::google_lalune::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:boids.CreateGameResponse)
 private:
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_ret_value();
  inline void clear_has_ret_value();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* game_id_;
  ::google_lalune::protobuf::int32 ret_value_;
  friend void  protobuf_AddDesc_battle_2eproto();
  friend void protobuf_AssignDesc_battle_2eproto();
  friend void protobuf_ShutdownFile_battle_2eproto();

  void InitAsDefaultInstance();
  static CreateGameResponse* default_instance_;
};
// -------------------------------------------------------------------

class PvPServerRegister : public ::google_lalune::protobuf::Message {
 public:
  PvPServerRegister();
  virtual ~PvPServerRegister();

  PvPServerRegister(const PvPServerRegister& from);

  inline PvPServerRegister& operator=(const PvPServerRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const PvPServerRegister& default_instance();

  void Swap(PvPServerRegister* other);

  // implements Message ----------------------------------------------

  PvPServerRegister* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const PvPServerRegister& from);
  void MergeFrom(const PvPServerRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google_lalune::protobuf::uint32 port() const;
  inline void set_port(::google_lalune::protobuf::uint32 value);

  // optional int32 region = 3;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 3;
  inline ::google_lalune::protobuf::int32 region() const;
  inline void set_region(::google_lalune::protobuf::int32 value);

  // optional int32 priority = 4;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 4;
  inline ::google_lalune::protobuf::int32 priority() const;
  inline void set_priority(::google_lalune::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:boids.PvPServerRegister)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_priority();
  inline void clear_has_priority();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google_lalune::protobuf::uint32 port_;
  ::google_lalune::protobuf::int32 region_;
  ::google_lalune::protobuf::int32 priority_;
  friend void  protobuf_AddDesc_battle_2eproto();
  friend void protobuf_AssignDesc_battle_2eproto();
  friend void protobuf_ShutdownFile_battle_2eproto();

  void InitAsDefaultInstance();
  static PvPServerRegister* default_instance_;
};
// -------------------------------------------------------------------

class PvPServerRegisterResponse : public ::google_lalune::protobuf::Message {
 public:
  PvPServerRegisterResponse();
  virtual ~PvPServerRegisterResponse();

  PvPServerRegisterResponse(const PvPServerRegisterResponse& from);

  inline PvPServerRegisterResponse& operator=(const PvPServerRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const PvPServerRegisterResponse& default_instance();

  void Swap(PvPServerRegisterResponse* other);

  // implements Message ----------------------------------------------

  PvPServerRegisterResponse* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const PvPServerRegisterResponse& from);
  void MergeFrom(const PvPServerRegisterResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret_value = 1 [default = 0];
  inline bool has_ret_value() const;
  inline void clear_ret_value();
  static const int kRetValueFieldNumber = 1;
  inline ::google_lalune::protobuf::int32 ret_value() const;
  inline void set_ret_value(::google_lalune::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:boids.PvPServerRegisterResponse)
 private:
  inline void set_has_ret_value();
  inline void clear_has_ret_value();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_lalune::protobuf::int32 ret_value_;
  friend void  protobuf_AddDesc_battle_2eproto();
  friend void protobuf_AssignDesc_battle_2eproto();
  friend void protobuf_ShutdownFile_battle_2eproto();

  void InitAsDefaultInstance();
  static PvPServerRegisterResponse* default_instance_;
};
// -------------------------------------------------------------------

class PvPServerHeartBeat : public ::google_lalune::protobuf::Message {
 public:
  PvPServerHeartBeat();
  virtual ~PvPServerHeartBeat();

  PvPServerHeartBeat(const PvPServerHeartBeat& from);

  inline PvPServerHeartBeat& operator=(const PvPServerHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const PvPServerHeartBeat& default_instance();

  void Swap(PvPServerHeartBeat* other);

  // implements Message ----------------------------------------------

  PvPServerHeartBeat* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const PvPServerHeartBeat& from);
  void MergeFrom(const PvPServerHeartBeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google_lalune::protobuf::uint32 port() const;
  inline void set_port(::google_lalune::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:boids.PvPServerHeartBeat)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google_lalune::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_battle_2eproto();
  friend void protobuf_AssignDesc_battle_2eproto();
  friend void protobuf_ShutdownFile_battle_2eproto();

  void InitAsDefaultInstance();
  static PvPServerHeartBeat* default_instance_;
};
// ===================================================================


// ===================================================================

// MatchRequest

// required uint32 player_id = 1;
inline bool MatchRequest::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchRequest::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchRequest::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchRequest::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google_lalune::protobuf::uint32 MatchRequest::player_id() const {
  // @@protoc_insertion_point(field_get:boids.MatchRequest.player_id)
  return player_id_;
}
inline void MatchRequest::set_player_id(::google_lalune::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:boids.MatchRequest.player_id)
}

// -------------------------------------------------------------------

// MatchResponse

// required bytes game_uuid = 1;
inline bool MatchResponse::has_game_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchResponse::set_has_game_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchResponse::clear_has_game_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchResponse::clear_game_uuid() {
  if (game_uuid_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_uuid_->clear();
  }
  clear_has_game_uuid();
}
inline const ::std::string& MatchResponse::game_uuid() const {
  // @@protoc_insertion_point(field_get:boids.MatchResponse.game_uuid)
  return *game_uuid_;
}
inline void MatchResponse::set_game_uuid(const ::std::string& value) {
  set_has_game_uuid();
  if (game_uuid_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_uuid_ = new ::std::string;
  }
  game_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:boids.MatchResponse.game_uuid)
}
inline void MatchResponse::set_game_uuid(const char* value) {
  set_has_game_uuid();
  if (game_uuid_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_uuid_ = new ::std::string;
  }
  game_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:boids.MatchResponse.game_uuid)
}
inline void MatchResponse::set_game_uuid(const void* value, size_t size) {
  set_has_game_uuid();
  if (game_uuid_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_uuid_ = new ::std::string;
  }
  game_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:boids.MatchResponse.game_uuid)
}
inline ::std::string* MatchResponse::mutable_game_uuid() {
  set_has_game_uuid();
  if (game_uuid_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:boids.MatchResponse.game_uuid)
  return game_uuid_;
}
inline ::std::string* MatchResponse::release_game_uuid() {
  clear_has_game_uuid();
  if (game_uuid_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = game_uuid_;
    game_uuid_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MatchResponse::set_allocated_game_uuid(::std::string* game_uuid) {
  if (game_uuid_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_uuid_;
  }
  if (game_uuid) {
    set_has_game_uuid();
    game_uuid_ = game_uuid;
  } else {
    clear_has_game_uuid();
    game_uuid_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:boids.MatchResponse.game_uuid)
}

// required string game_server_ip = 3;
inline bool MatchResponse::has_game_server_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchResponse::set_has_game_server_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchResponse::clear_has_game_server_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchResponse::clear_game_server_ip() {
  if (game_server_ip_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_server_ip_->clear();
  }
  clear_has_game_server_ip();
}
inline const ::std::string& MatchResponse::game_server_ip() const {
  // @@protoc_insertion_point(field_get:boids.MatchResponse.game_server_ip)
  return *game_server_ip_;
}
inline void MatchResponse::set_game_server_ip(const ::std::string& value) {
  set_has_game_server_ip();
  if (game_server_ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_server_ip_ = new ::std::string;
  }
  game_server_ip_->assign(value);
  // @@protoc_insertion_point(field_set:boids.MatchResponse.game_server_ip)
}
inline void MatchResponse::set_game_server_ip(const char* value) {
  set_has_game_server_ip();
  if (game_server_ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_server_ip_ = new ::std::string;
  }
  game_server_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:boids.MatchResponse.game_server_ip)
}
inline void MatchResponse::set_game_server_ip(const char* value, size_t size) {
  set_has_game_server_ip();
  if (game_server_ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_server_ip_ = new ::std::string;
  }
  game_server_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:boids.MatchResponse.game_server_ip)
}
inline ::std::string* MatchResponse::mutable_game_server_ip() {
  set_has_game_server_ip();
  if (game_server_ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_server_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:boids.MatchResponse.game_server_ip)
  return game_server_ip_;
}
inline ::std::string* MatchResponse::release_game_server_ip() {
  clear_has_game_server_ip();
  if (game_server_ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = game_server_ip_;
    game_server_ip_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MatchResponse::set_allocated_game_server_ip(::std::string* game_server_ip) {
  if (game_server_ip_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_server_ip_;
  }
  if (game_server_ip) {
    set_has_game_server_ip();
    game_server_ip_ = game_server_ip;
  } else {
    clear_has_game_server_ip();
    game_server_ip_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:boids.MatchResponse.game_server_ip)
}

// required uint32 game_server_port = 4;
inline bool MatchResponse::has_game_server_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchResponse::set_has_game_server_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchResponse::clear_has_game_server_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchResponse::clear_game_server_port() {
  game_server_port_ = 0u;
  clear_has_game_server_port();
}
inline ::google_lalune::protobuf::uint32 MatchResponse::game_server_port() const {
  // @@protoc_insertion_point(field_get:boids.MatchResponse.game_server_port)
  return game_server_port_;
}
inline void MatchResponse::set_game_server_port(::google_lalune::protobuf::uint32 value) {
  set_has_game_server_port();
  game_server_port_ = value;
  // @@protoc_insertion_point(field_set:boids.MatchResponse.game_server_port)
}

// required int32 ret_value = 5;
inline bool MatchResponse::has_ret_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchResponse::set_has_ret_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchResponse::clear_has_ret_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchResponse::clear_ret_value() {
  ret_value_ = 0;
  clear_has_ret_value();
}
inline ::google_lalune::protobuf::int32 MatchResponse::ret_value() const {
  // @@protoc_insertion_point(field_get:boids.MatchResponse.ret_value)
  return ret_value_;
}
inline void MatchResponse::set_ret_value(::google_lalune::protobuf::int32 value) {
  set_has_ret_value();
  ret_value_ = value;
  // @@protoc_insertion_point(field_set:boids.MatchResponse.ret_value)
}

// optional string ret_info = 6;
inline bool MatchResponse::has_ret_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchResponse::set_has_ret_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchResponse::clear_has_ret_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchResponse::clear_ret_info() {
  if (ret_info_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_info_->clear();
  }
  clear_has_ret_info();
}
inline const ::std::string& MatchResponse::ret_info() const {
  // @@protoc_insertion_point(field_get:boids.MatchResponse.ret_info)
  return *ret_info_;
}
inline void MatchResponse::set_ret_info(const ::std::string& value) {
  set_has_ret_info();
  if (ret_info_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_info_ = new ::std::string;
  }
  ret_info_->assign(value);
  // @@protoc_insertion_point(field_set:boids.MatchResponse.ret_info)
}
inline void MatchResponse::set_ret_info(const char* value) {
  set_has_ret_info();
  if (ret_info_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_info_ = new ::std::string;
  }
  ret_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:boids.MatchResponse.ret_info)
}
inline void MatchResponse::set_ret_info(const char* value, size_t size) {
  set_has_ret_info();
  if (ret_info_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_info_ = new ::std::string;
  }
  ret_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:boids.MatchResponse.ret_info)
}
inline ::std::string* MatchResponse::mutable_ret_info() {
  set_has_ret_info();
  if (ret_info_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:boids.MatchResponse.ret_info)
  return ret_info_;
}
inline ::std::string* MatchResponse::release_ret_info() {
  clear_has_ret_info();
  if (ret_info_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ret_info_;
    ret_info_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MatchResponse::set_allocated_ret_info(::std::string* ret_info) {
  if (ret_info_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ret_info_;
  }
  if (ret_info) {
    set_has_ret_info();
    ret_info_ = ret_info;
  } else {
    clear_has_ret_info();
    ret_info_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:boids.MatchResponse.ret_info)
}

// -------------------------------------------------------------------

// CreateGame

// required bytes game_id = 1;
inline bool CreateGame::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateGame::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateGame::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateGame::clear_game_id() {
  if (game_id_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_id_->clear();
  }
  clear_has_game_id();
}
inline const ::std::string& CreateGame::game_id() const {
  // @@protoc_insertion_point(field_get:boids.CreateGame.game_id)
  return *game_id_;
}
inline void CreateGame::set_game_id(const ::std::string& value) {
  set_has_game_id();
  if (game_id_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_id_ = new ::std::string;
  }
  game_id_->assign(value);
  // @@protoc_insertion_point(field_set:boids.CreateGame.game_id)
}
inline void CreateGame::set_game_id(const char* value) {
  set_has_game_id();
  if (game_id_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_id_ = new ::std::string;
  }
  game_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:boids.CreateGame.game_id)
}
inline void CreateGame::set_game_id(const void* value, size_t size) {
  set_has_game_id();
  if (game_id_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_id_ = new ::std::string;
  }
  game_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:boids.CreateGame.game_id)
}
inline ::std::string* CreateGame::mutable_game_id() {
  set_has_game_id();
  if (game_id_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:boids.CreateGame.game_id)
  return game_id_;
}
inline ::std::string* CreateGame::release_game_id() {
  clear_has_game_id();
  if (game_id_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = game_id_;
    game_id_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateGame::set_allocated_game_id(::std::string* game_id) {
  if (game_id_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_id_;
  }
  if (game_id) {
    set_has_game_id();
    game_id_ = game_id;
  } else {
    clear_has_game_id();
    game_id_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:boids.CreateGame.game_id)
}

// required .boids.GameInitData game_init_data = 2;
inline bool CreateGame::has_game_init_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateGame::set_has_game_init_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateGame::clear_has_game_init_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateGame::clear_game_init_data() {
  if (game_init_data_ != NULL) game_init_data_->::boids::GameInitData::Clear();
  clear_has_game_init_data();
}
inline const ::boids::GameInitData& CreateGame::game_init_data() const {
  // @@protoc_insertion_point(field_get:boids.CreateGame.game_init_data)
  return game_init_data_ != NULL ? *game_init_data_ : *default_instance_->game_init_data_;
}
inline ::boids::GameInitData* CreateGame::mutable_game_init_data() {
  set_has_game_init_data();
  if (game_init_data_ == NULL) game_init_data_ = new ::boids::GameInitData;
  // @@protoc_insertion_point(field_mutable:boids.CreateGame.game_init_data)
  return game_init_data_;
}
inline ::boids::GameInitData* CreateGame::release_game_init_data() {
  clear_has_game_init_data();
  ::boids::GameInitData* temp = game_init_data_;
  game_init_data_ = NULL;
  return temp;
}
inline void CreateGame::set_allocated_game_init_data(::boids::GameInitData* game_init_data) {
  delete game_init_data_;
  game_init_data_ = game_init_data;
  if (game_init_data) {
    set_has_game_init_data();
  } else {
    clear_has_game_init_data();
  }
  // @@protoc_insertion_point(field_set_allocated:boids.CreateGame.game_init_data)
}

// -------------------------------------------------------------------

// CreateGameResponse

// required bytes game_id = 1;
inline bool CreateGameResponse::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateGameResponse::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateGameResponse::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateGameResponse::clear_game_id() {
  if (game_id_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_id_->clear();
  }
  clear_has_game_id();
}
inline const ::std::string& CreateGameResponse::game_id() const {
  // @@protoc_insertion_point(field_get:boids.CreateGameResponse.game_id)
  return *game_id_;
}
inline void CreateGameResponse::set_game_id(const ::std::string& value) {
  set_has_game_id();
  if (game_id_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_id_ = new ::std::string;
  }
  game_id_->assign(value);
  // @@protoc_insertion_point(field_set:boids.CreateGameResponse.game_id)
}
inline void CreateGameResponse::set_game_id(const char* value) {
  set_has_game_id();
  if (game_id_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_id_ = new ::std::string;
  }
  game_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:boids.CreateGameResponse.game_id)
}
inline void CreateGameResponse::set_game_id(const void* value, size_t size) {
  set_has_game_id();
  if (game_id_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_id_ = new ::std::string;
  }
  game_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:boids.CreateGameResponse.game_id)
}
inline ::std::string* CreateGameResponse::mutable_game_id() {
  set_has_game_id();
  if (game_id_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    game_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:boids.CreateGameResponse.game_id)
  return game_id_;
}
inline ::std::string* CreateGameResponse::release_game_id() {
  clear_has_game_id();
  if (game_id_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = game_id_;
    game_id_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateGameResponse::set_allocated_game_id(::std::string* game_id) {
  if (game_id_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_id_;
  }
  if (game_id) {
    set_has_game_id();
    game_id_ = game_id;
  } else {
    clear_has_game_id();
    game_id_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:boids.CreateGameResponse.game_id)
}

// required int32 ret_value = 2;
inline bool CreateGameResponse::has_ret_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateGameResponse::set_has_ret_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateGameResponse::clear_has_ret_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateGameResponse::clear_ret_value() {
  ret_value_ = 0;
  clear_has_ret_value();
}
inline ::google_lalune::protobuf::int32 CreateGameResponse::ret_value() const {
  // @@protoc_insertion_point(field_get:boids.CreateGameResponse.ret_value)
  return ret_value_;
}
inline void CreateGameResponse::set_ret_value(::google_lalune::protobuf::int32 value) {
  set_has_ret_value();
  ret_value_ = value;
  // @@protoc_insertion_point(field_set:boids.CreateGameResponse.ret_value)
}

// -------------------------------------------------------------------

// PvPServerRegister

// required string ip = 1;
inline bool PvPServerRegister::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPServerRegister::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPServerRegister::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPServerRegister::clear_ip() {
  if (ip_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PvPServerRegister::ip() const {
  // @@protoc_insertion_point(field_get:boids.PvPServerRegister.ip)
  return *ip_;
}
inline void PvPServerRegister::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:boids.PvPServerRegister.ip)
}
inline void PvPServerRegister::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:boids.PvPServerRegister.ip)
}
inline void PvPServerRegister::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:boids.PvPServerRegister.ip)
}
inline ::std::string* PvPServerRegister::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:boids.PvPServerRegister.ip)
  return ip_;
}
inline ::std::string* PvPServerRegister::release_ip() {
  clear_has_ip();
  if (ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PvPServerRegister::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:boids.PvPServerRegister.ip)
}

// required uint32 port = 2;
inline bool PvPServerRegister::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPServerRegister::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPServerRegister::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPServerRegister::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google_lalune::protobuf::uint32 PvPServerRegister::port() const {
  // @@protoc_insertion_point(field_get:boids.PvPServerRegister.port)
  return port_;
}
inline void PvPServerRegister::set_port(::google_lalune::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:boids.PvPServerRegister.port)
}

// optional int32 region = 3;
inline bool PvPServerRegister::has_region() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvPServerRegister::set_has_region() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvPServerRegister::clear_has_region() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvPServerRegister::clear_region() {
  region_ = 0;
  clear_has_region();
}
inline ::google_lalune::protobuf::int32 PvPServerRegister::region() const {
  // @@protoc_insertion_point(field_get:boids.PvPServerRegister.region)
  return region_;
}
inline void PvPServerRegister::set_region(::google_lalune::protobuf::int32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:boids.PvPServerRegister.region)
}

// optional int32 priority = 4;
inline bool PvPServerRegister::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvPServerRegister::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvPServerRegister::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvPServerRegister::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google_lalune::protobuf::int32 PvPServerRegister::priority() const {
  // @@protoc_insertion_point(field_get:boids.PvPServerRegister.priority)
  return priority_;
}
inline void PvPServerRegister::set_priority(::google_lalune::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:boids.PvPServerRegister.priority)
}

// -------------------------------------------------------------------

// PvPServerRegisterResponse

// required int32 ret_value = 1 [default = 0];
inline bool PvPServerRegisterResponse::has_ret_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPServerRegisterResponse::set_has_ret_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPServerRegisterResponse::clear_has_ret_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPServerRegisterResponse::clear_ret_value() {
  ret_value_ = 0;
  clear_has_ret_value();
}
inline ::google_lalune::protobuf::int32 PvPServerRegisterResponse::ret_value() const {
  // @@protoc_insertion_point(field_get:boids.PvPServerRegisterResponse.ret_value)
  return ret_value_;
}
inline void PvPServerRegisterResponse::set_ret_value(::google_lalune::protobuf::int32 value) {
  set_has_ret_value();
  ret_value_ = value;
  // @@protoc_insertion_point(field_set:boids.PvPServerRegisterResponse.ret_value)
}

// -------------------------------------------------------------------

// PvPServerHeartBeat

// required string ip = 1;
inline bool PvPServerHeartBeat::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPServerHeartBeat::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPServerHeartBeat::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPServerHeartBeat::clear_ip() {
  if (ip_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PvPServerHeartBeat::ip() const {
  // @@protoc_insertion_point(field_get:boids.PvPServerHeartBeat.ip)
  return *ip_;
}
inline void PvPServerHeartBeat::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:boids.PvPServerHeartBeat.ip)
}
inline void PvPServerHeartBeat::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:boids.PvPServerHeartBeat.ip)
}
inline void PvPServerHeartBeat::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:boids.PvPServerHeartBeat.ip)
}
inline ::std::string* PvPServerHeartBeat::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:boids.PvPServerHeartBeat.ip)
  return ip_;
}
inline ::std::string* PvPServerHeartBeat::release_ip() {
  clear_has_ip();
  if (ip_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PvPServerHeartBeat::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:boids.PvPServerHeartBeat.ip)
}

// required uint32 port = 2;
inline bool PvPServerHeartBeat::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPServerHeartBeat::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPServerHeartBeat::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPServerHeartBeat::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google_lalune::protobuf::uint32 PvPServerHeartBeat::port() const {
  // @@protoc_insertion_point(field_get:boids.PvPServerHeartBeat.port)
  return port_;
}
inline void PvPServerHeartBeat::set_port(::google_lalune::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:boids.PvPServerHeartBeat.port)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace boids

#ifndef SWIG
namespace google_lalune {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_battle_2eproto__INCLUDED
