// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Account.proto

#ifndef PROTOBUF_Account_2eproto__INCLUDED
#define PROTOBUF_Account_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lalune {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Account_2eproto();
void protobuf_AssignDesc_Account_2eproto();
void protobuf_ShutdownFile_Account_2eproto();

class AutoRegisterRequest;
class AutoRegisterResponce;

// ===================================================================

class AutoRegisterRequest : public ::google_lalune::protobuf::Message {
 public:
  AutoRegisterRequest();
  virtual ~AutoRegisterRequest();

  AutoRegisterRequest(const AutoRegisterRequest& from);

  inline AutoRegisterRequest& operator=(const AutoRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const AutoRegisterRequest& default_instance();

  void Swap(AutoRegisterRequest* other);

  // implements Message ----------------------------------------------

  AutoRegisterRequest* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const AutoRegisterRequest& from);
  void MergeFrom(const AutoRegisterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string nick = 1;
  inline bool has_nick() const;
  inline void clear_nick();
  static const int kNickFieldNumber = 1;
  inline const ::std::string& nick() const;
  inline void set_nick(const ::std::string& value);
  inline void set_nick(const char* value);
  inline void set_nick(const char* value, size_t size);
  inline ::std::string* mutable_nick();
  inline ::std::string* release_nick();
  inline void set_allocated_nick(::std::string* nick);

  // @@protoc_insertion_point(class_scope:lalune.AutoRegisterRequest)
 private:
  inline void set_has_nick();
  inline void clear_has_nick();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nick_;
  friend void  protobuf_AddDesc_Account_2eproto();
  friend void protobuf_AssignDesc_Account_2eproto();
  friend void protobuf_ShutdownFile_Account_2eproto();

  void InitAsDefaultInstance();
  static AutoRegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class AutoRegisterResponce : public ::google_lalune::protobuf::Message {
 public:
  AutoRegisterResponce();
  virtual ~AutoRegisterResponce();

  AutoRegisterResponce(const AutoRegisterResponce& from);

  inline AutoRegisterResponce& operator=(const AutoRegisterResponce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const AutoRegisterResponce& default_instance();

  void Swap(AutoRegisterResponce* other);

  // implements Message ----------------------------------------------

  AutoRegisterResponce* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const AutoRegisterResponce& from);
  void MergeFrom(const AutoRegisterResponce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:lalune.AutoRegisterResponce)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uid_;
  friend void  protobuf_AddDesc_Account_2eproto();
  friend void protobuf_AssignDesc_Account_2eproto();
  friend void protobuf_ShutdownFile_Account_2eproto();

  void InitAsDefaultInstance();
  static AutoRegisterResponce* default_instance_;
};
// ===================================================================


// ===================================================================

// AutoRegisterRequest

// required string nick = 1;
inline bool AutoRegisterRequest::has_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoRegisterRequest::set_has_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoRegisterRequest::clear_has_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoRegisterRequest::clear_nick() {
  if (nick_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_->clear();
  }
  clear_has_nick();
}
inline const ::std::string& AutoRegisterRequest::nick() const {
  // @@protoc_insertion_point(field_get:lalune.AutoRegisterRequest.nick)
  return *nick_;
}
inline void AutoRegisterRequest::set_nick(const ::std::string& value) {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.AutoRegisterRequest.nick)
}
inline void AutoRegisterRequest::set_nick(const char* value) {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.AutoRegisterRequest.nick)
}
inline void AutoRegisterRequest::set_nick(const char* value, size_t size) {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.AutoRegisterRequest.nick)
}
inline ::std::string* AutoRegisterRequest::mutable_nick() {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.AutoRegisterRequest.nick)
  return nick_;
}
inline ::std::string* AutoRegisterRequest::release_nick() {
  clear_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_;
    nick_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AutoRegisterRequest::set_allocated_nick(::std::string* nick) {
  if (nick_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_;
  }
  if (nick) {
    set_has_nick();
    nick_ = nick;
  } else {
    clear_has_nick();
    nick_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.AutoRegisterRequest.nick)
}

// -------------------------------------------------------------------

// AutoRegisterResponce

// required string uid = 1;
inline bool AutoRegisterResponce::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoRegisterResponce::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoRegisterResponce::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoRegisterResponce::clear_uid() {
  if (uid_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& AutoRegisterResponce::uid() const {
  // @@protoc_insertion_point(field_get:lalune.AutoRegisterResponce.uid)
  return *uid_;
}
inline void AutoRegisterResponce::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.AutoRegisterResponce.uid)
}
inline void AutoRegisterResponce::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.AutoRegisterResponce.uid)
}
inline void AutoRegisterResponce::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.AutoRegisterResponce.uid)
}
inline ::std::string* AutoRegisterResponce::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.AutoRegisterResponce.uid)
  return uid_;
}
inline ::std::string* AutoRegisterResponce::release_uid() {
  clear_has_uid();
  if (uid_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AutoRegisterResponce::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.AutoRegisterResponce.uid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lalune

#ifndef SWIG
namespace google_lalune {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Account_2eproto__INCLUDED
