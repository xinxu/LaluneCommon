// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Account.proto

#ifndef PROTOBUF_Account_2eproto__INCLUDED
#define PROTOBUF_Account_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lalune {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Account_2eproto();
void protobuf_AssignDesc_Account_2eproto();
void protobuf_ShutdownFile_Account_2eproto();

class RandomNickRequest;
class RandomNickResponce;
class AutoRegisterRequest;
class AutoRegisterResponce;
class LoginRequest;
class LoginResponce;

// ===================================================================

class RandomNickRequest : public ::google_lalune::protobuf::Message {
 public:
  RandomNickRequest();
  virtual ~RandomNickRequest();

  RandomNickRequest(const RandomNickRequest& from);

  inline RandomNickRequest& operator=(const RandomNickRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const RandomNickRequest& default_instance();

  void Swap(RandomNickRequest* other);

  // implements Message ----------------------------------------------

  RandomNickRequest* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const RandomNickRequest& from);
  void MergeFrom(const RandomNickRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gender = 1;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 1;
  inline ::google_lalune::protobuf::uint32 gender() const;
  inline void set_gender(::google_lalune::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:lalune.RandomNickRequest)
 private:
  inline void set_has_gender();
  inline void clear_has_gender();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_lalune::protobuf::uint32 gender_;
  friend void  protobuf_AddDesc_Account_2eproto();
  friend void protobuf_AssignDesc_Account_2eproto();
  friend void protobuf_ShutdownFile_Account_2eproto();

  void InitAsDefaultInstance();
  static RandomNickRequest* default_instance_;
};
// -------------------------------------------------------------------

class RandomNickResponce : public ::google_lalune::protobuf::Message {
 public:
  RandomNickResponce();
  virtual ~RandomNickResponce();

  RandomNickResponce(const RandomNickResponce& from);

  inline RandomNickResponce& operator=(const RandomNickResponce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const RandomNickResponce& default_instance();

  void Swap(RandomNickResponce* other);

  // implements Message ----------------------------------------------

  RandomNickResponce* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const RandomNickResponce& from);
  void MergeFrom(const RandomNickResponce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string nick = 1;
  inline bool has_nick() const;
  inline void clear_nick();
  static const int kNickFieldNumber = 1;
  inline const ::std::string& nick() const;
  inline void set_nick(const ::std::string& value);
  inline void set_nick(const char* value);
  inline void set_nick(const char* value, size_t size);
  inline ::std::string* mutable_nick();
  inline ::std::string* release_nick();
  inline void set_allocated_nick(::std::string* nick);

  // @@protoc_insertion_point(class_scope:lalune.RandomNickResponce)
 private:
  inline void set_has_nick();
  inline void clear_has_nick();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nick_;
  friend void  protobuf_AddDesc_Account_2eproto();
  friend void protobuf_AssignDesc_Account_2eproto();
  friend void protobuf_ShutdownFile_Account_2eproto();

  void InitAsDefaultInstance();
  static RandomNickResponce* default_instance_;
};
// -------------------------------------------------------------------

class AutoRegisterRequest : public ::google_lalune::protobuf::Message {
 public:
  AutoRegisterRequest();
  virtual ~AutoRegisterRequest();

  AutoRegisterRequest(const AutoRegisterRequest& from);

  inline AutoRegisterRequest& operator=(const AutoRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const AutoRegisterRequest& default_instance();

  void Swap(AutoRegisterRequest* other);

  // implements Message ----------------------------------------------

  AutoRegisterRequest* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const AutoRegisterRequest& from);
  void MergeFrom(const AutoRegisterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string nick = 1;
  inline bool has_nick() const;
  inline void clear_nick();
  static const int kNickFieldNumber = 1;
  inline const ::std::string& nick() const;
  inline void set_nick(const ::std::string& value);
  inline void set_nick(const char* value);
  inline void set_nick(const char* value, size_t size);
  inline ::std::string* mutable_nick();
  inline ::std::string* release_nick();
  inline void set_allocated_nick(::std::string* nick);

  // @@protoc_insertion_point(class_scope:lalune.AutoRegisterRequest)
 private:
  inline void set_has_nick();
  inline void clear_has_nick();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nick_;
  friend void  protobuf_AddDesc_Account_2eproto();
  friend void protobuf_AssignDesc_Account_2eproto();
  friend void protobuf_ShutdownFile_Account_2eproto();

  void InitAsDefaultInstance();
  static AutoRegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class AutoRegisterResponce : public ::google_lalune::protobuf::Message {
 public:
  AutoRegisterResponce();
  virtual ~AutoRegisterResponce();

  AutoRegisterResponce(const AutoRegisterResponce& from);

  inline AutoRegisterResponce& operator=(const AutoRegisterResponce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const AutoRegisterResponce& default_instance();

  void Swap(AutoRegisterResponce* other);

  // implements Message ----------------------------------------------

  AutoRegisterResponce* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const AutoRegisterResponce& from);
  void MergeFrom(const AutoRegisterResponce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google_lalune::protobuf::uint32 code() const;
  inline void set_code(::google_lalune::protobuf::uint32 value);

  // optional uint32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google_lalune::protobuf::uint32 uid() const;
  inline void set_uid(::google_lalune::protobuf::uint32 value);

  // optional string pwd = 3;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 3;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // optional string errStr = 4;
  inline bool has_errstr() const;
  inline void clear_errstr();
  static const int kErrStrFieldNumber = 4;
  inline const ::std::string& errstr() const;
  inline void set_errstr(const ::std::string& value);
  inline void set_errstr(const char* value);
  inline void set_errstr(const char* value, size_t size);
  inline ::std::string* mutable_errstr();
  inline ::std::string* release_errstr();
  inline void set_allocated_errstr(::std::string* errstr);

  // @@protoc_insertion_point(class_scope:lalune.AutoRegisterResponce)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_pwd();
  inline void clear_has_pwd();
  inline void set_has_errstr();
  inline void clear_has_errstr();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_lalune::protobuf::uint32 code_;
  ::google_lalune::protobuf::uint32 uid_;
  ::std::string* pwd_;
  ::std::string* errstr_;
  friend void  protobuf_AddDesc_Account_2eproto();
  friend void protobuf_AssignDesc_Account_2eproto();
  friend void protobuf_ShutdownFile_Account_2eproto();

  void InitAsDefaultInstance();
  static AutoRegisterResponce* default_instance_;
};
// -------------------------------------------------------------------

class LoginRequest : public ::google_lalune::protobuf::Message {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google_lalune::protobuf::uint32 uid() const;
  inline void set_uid(::google_lalune::protobuf::uint32 value);

  // required string pwd = 2;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 2;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:lalune.LoginRequest)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_pwd();
  inline void clear_has_pwd();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pwd_;
  ::google_lalune::protobuf::uint32 uid_;
  friend void  protobuf_AddDesc_Account_2eproto();
  friend void protobuf_AssignDesc_Account_2eproto();
  friend void protobuf_ShutdownFile_Account_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponce : public ::google_lalune::protobuf::Message {
 public:
  LoginResponce();
  virtual ~LoginResponce();

  LoginResponce(const LoginResponce& from);

  inline LoginResponce& operator=(const LoginResponce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const LoginResponce& default_instance();

  void Swap(LoginResponce* other);

  // implements Message ----------------------------------------------

  LoginResponce* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const LoginResponce& from);
  void MergeFrom(const LoginResponce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google_lalune::protobuf::uint32 code() const;
  inline void set_code(::google_lalune::protobuf::uint32 value);

  // optional string errStr = 2;
  inline bool has_errstr() const;
  inline void clear_errstr();
  static const int kErrStrFieldNumber = 2;
  inline const ::std::string& errstr() const;
  inline void set_errstr(const ::std::string& value);
  inline void set_errstr(const char* value);
  inline void set_errstr(const char* value, size_t size);
  inline ::std::string* mutable_errstr();
  inline ::std::string* release_errstr();
  inline void set_allocated_errstr(::std::string* errstr);

  // @@protoc_insertion_point(class_scope:lalune.LoginResponce)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_errstr();
  inline void clear_has_errstr();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* errstr_;
  ::google_lalune::protobuf::uint32 code_;
  friend void  protobuf_AddDesc_Account_2eproto();
  friend void protobuf_AssignDesc_Account_2eproto();
  friend void protobuf_ShutdownFile_Account_2eproto();

  void InitAsDefaultInstance();
  static LoginResponce* default_instance_;
};
// ===================================================================


// ===================================================================

// RandomNickRequest

// required uint32 gender = 1;
inline bool RandomNickRequest::has_gender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandomNickRequest::set_has_gender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandomNickRequest::clear_has_gender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandomNickRequest::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google_lalune::protobuf::uint32 RandomNickRequest::gender() const {
  // @@protoc_insertion_point(field_get:lalune.RandomNickRequest.gender)
  return gender_;
}
inline void RandomNickRequest::set_gender(::google_lalune::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:lalune.RandomNickRequest.gender)
}

// -------------------------------------------------------------------

// RandomNickResponce

// required string nick = 1;
inline bool RandomNickResponce::has_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandomNickResponce::set_has_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandomNickResponce::clear_has_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandomNickResponce::clear_nick() {
  if (nick_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_->clear();
  }
  clear_has_nick();
}
inline const ::std::string& RandomNickResponce::nick() const {
  // @@protoc_insertion_point(field_get:lalune.RandomNickResponce.nick)
  return *nick_;
}
inline void RandomNickResponce::set_nick(const ::std::string& value) {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.RandomNickResponce.nick)
}
inline void RandomNickResponce::set_nick(const char* value) {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.RandomNickResponce.nick)
}
inline void RandomNickResponce::set_nick(const char* value, size_t size) {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.RandomNickResponce.nick)
}
inline ::std::string* RandomNickResponce::mutable_nick() {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.RandomNickResponce.nick)
  return nick_;
}
inline ::std::string* RandomNickResponce::release_nick() {
  clear_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_;
    nick_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RandomNickResponce::set_allocated_nick(::std::string* nick) {
  if (nick_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_;
  }
  if (nick) {
    set_has_nick();
    nick_ = nick;
  } else {
    clear_has_nick();
    nick_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.RandomNickResponce.nick)
}

// -------------------------------------------------------------------

// AutoRegisterRequest

// required string nick = 1;
inline bool AutoRegisterRequest::has_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoRegisterRequest::set_has_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoRegisterRequest::clear_has_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoRegisterRequest::clear_nick() {
  if (nick_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_->clear();
  }
  clear_has_nick();
}
inline const ::std::string& AutoRegisterRequest::nick() const {
  // @@protoc_insertion_point(field_get:lalune.AutoRegisterRequest.nick)
  return *nick_;
}
inline void AutoRegisterRequest::set_nick(const ::std::string& value) {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.AutoRegisterRequest.nick)
}
inline void AutoRegisterRequest::set_nick(const char* value) {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.AutoRegisterRequest.nick)
}
inline void AutoRegisterRequest::set_nick(const char* value, size_t size) {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.AutoRegisterRequest.nick)
}
inline ::std::string* AutoRegisterRequest::mutable_nick() {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.AutoRegisterRequest.nick)
  return nick_;
}
inline ::std::string* AutoRegisterRequest::release_nick() {
  clear_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_;
    nick_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AutoRegisterRequest::set_allocated_nick(::std::string* nick) {
  if (nick_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_;
  }
  if (nick) {
    set_has_nick();
    nick_ = nick;
  } else {
    clear_has_nick();
    nick_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.AutoRegisterRequest.nick)
}

// -------------------------------------------------------------------

// AutoRegisterResponce

// required uint32 code = 1;
inline bool AutoRegisterResponce::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoRegisterResponce::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoRegisterResponce::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoRegisterResponce::clear_code() {
  code_ = 0u;
  clear_has_code();
}
inline ::google_lalune::protobuf::uint32 AutoRegisterResponce::code() const {
  // @@protoc_insertion_point(field_get:lalune.AutoRegisterResponce.code)
  return code_;
}
inline void AutoRegisterResponce::set_code(::google_lalune::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:lalune.AutoRegisterResponce.code)
}

// optional uint32 uid = 2;
inline bool AutoRegisterResponce::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutoRegisterResponce::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutoRegisterResponce::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutoRegisterResponce::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google_lalune::protobuf::uint32 AutoRegisterResponce::uid() const {
  // @@protoc_insertion_point(field_get:lalune.AutoRegisterResponce.uid)
  return uid_;
}
inline void AutoRegisterResponce::set_uid(::google_lalune::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:lalune.AutoRegisterResponce.uid)
}

// optional string pwd = 3;
inline bool AutoRegisterResponce::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AutoRegisterResponce::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AutoRegisterResponce::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AutoRegisterResponce::clear_pwd() {
  if (pwd_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& AutoRegisterResponce::pwd() const {
  // @@protoc_insertion_point(field_get:lalune.AutoRegisterResponce.pwd)
  return *pwd_;
}
inline void AutoRegisterResponce::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.AutoRegisterResponce.pwd)
}
inline void AutoRegisterResponce::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.AutoRegisterResponce.pwd)
}
inline void AutoRegisterResponce::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.AutoRegisterResponce.pwd)
}
inline ::std::string* AutoRegisterResponce::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.AutoRegisterResponce.pwd)
  return pwd_;
}
inline ::std::string* AutoRegisterResponce::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AutoRegisterResponce::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.AutoRegisterResponce.pwd)
}

// optional string errStr = 4;
inline bool AutoRegisterResponce::has_errstr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AutoRegisterResponce::set_has_errstr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AutoRegisterResponce::clear_has_errstr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AutoRegisterResponce::clear_errstr() {
  if (errstr_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errstr_->clear();
  }
  clear_has_errstr();
}
inline const ::std::string& AutoRegisterResponce::errstr() const {
  // @@protoc_insertion_point(field_get:lalune.AutoRegisterResponce.errStr)
  return *errstr_;
}
inline void AutoRegisterResponce::set_errstr(const ::std::string& value) {
  set_has_errstr();
  if (errstr_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errstr_ = new ::std::string;
  }
  errstr_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.AutoRegisterResponce.errStr)
}
inline void AutoRegisterResponce::set_errstr(const char* value) {
  set_has_errstr();
  if (errstr_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errstr_ = new ::std::string;
  }
  errstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.AutoRegisterResponce.errStr)
}
inline void AutoRegisterResponce::set_errstr(const char* value, size_t size) {
  set_has_errstr();
  if (errstr_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errstr_ = new ::std::string;
  }
  errstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.AutoRegisterResponce.errStr)
}
inline ::std::string* AutoRegisterResponce::mutable_errstr() {
  set_has_errstr();
  if (errstr_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.AutoRegisterResponce.errStr)
  return errstr_;
}
inline ::std::string* AutoRegisterResponce::release_errstr() {
  clear_has_errstr();
  if (errstr_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errstr_;
    errstr_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AutoRegisterResponce::set_allocated_errstr(::std::string* errstr) {
  if (errstr_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errstr_;
  }
  if (errstr) {
    set_has_errstr();
    errstr_ = errstr;
  } else {
    clear_has_errstr();
    errstr_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.AutoRegisterResponce.errStr)
}

// -------------------------------------------------------------------

// LoginRequest

// required uint32 uid = 1;
inline bool LoginRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google_lalune::protobuf::uint32 LoginRequest::uid() const {
  // @@protoc_insertion_point(field_get:lalune.LoginRequest.uid)
  return uid_;
}
inline void LoginRequest::set_uid(::google_lalune::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:lalune.LoginRequest.uid)
}

// required string pwd = 2;
inline bool LoginRequest::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRequest::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRequest::clear_pwd() {
  if (pwd_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& LoginRequest::pwd() const {
  // @@protoc_insertion_point(field_get:lalune.LoginRequest.pwd)
  return *pwd_;
}
inline void LoginRequest::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.LoginRequest.pwd)
}
inline void LoginRequest::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.LoginRequest.pwd)
}
inline void LoginRequest::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.LoginRequest.pwd)
}
inline ::std::string* LoginRequest::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.LoginRequest.pwd)
  return pwd_;
}
inline ::std::string* LoginRequest::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginRequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.LoginRequest.pwd)
}

// -------------------------------------------------------------------

// LoginResponce

// required uint32 code = 1;
inline bool LoginResponce::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResponce::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResponce::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResponce::clear_code() {
  code_ = 0u;
  clear_has_code();
}
inline ::google_lalune::protobuf::uint32 LoginResponce::code() const {
  // @@protoc_insertion_point(field_get:lalune.LoginResponce.code)
  return code_;
}
inline void LoginResponce::set_code(::google_lalune::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:lalune.LoginResponce.code)
}

// optional string errStr = 2;
inline bool LoginResponce::has_errstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResponce::set_has_errstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResponce::clear_has_errstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResponce::clear_errstr() {
  if (errstr_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errstr_->clear();
  }
  clear_has_errstr();
}
inline const ::std::string& LoginResponce::errstr() const {
  // @@protoc_insertion_point(field_get:lalune.LoginResponce.errStr)
  return *errstr_;
}
inline void LoginResponce::set_errstr(const ::std::string& value) {
  set_has_errstr();
  if (errstr_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errstr_ = new ::std::string;
  }
  errstr_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.LoginResponce.errStr)
}
inline void LoginResponce::set_errstr(const char* value) {
  set_has_errstr();
  if (errstr_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errstr_ = new ::std::string;
  }
  errstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.LoginResponce.errStr)
}
inline void LoginResponce::set_errstr(const char* value, size_t size) {
  set_has_errstr();
  if (errstr_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errstr_ = new ::std::string;
  }
  errstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.LoginResponce.errStr)
}
inline ::std::string* LoginResponce::mutable_errstr() {
  set_has_errstr();
  if (errstr_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.LoginResponce.errStr)
  return errstr_;
}
inline ::std::string* LoginResponce::release_errstr() {
  clear_has_errstr();
  if (errstr_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errstr_;
    errstr_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginResponce::set_allocated_errstr(::std::string* errstr) {
  if (errstr_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errstr_;
  }
  if (errstr) {
    set_has_errstr();
    errstr_ = errstr;
  } else {
    clear_has_errstr();
    errstr_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.LoginResponce.errStr)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lalune

#ifndef SWIG
namespace google_lalune {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Account_2eproto__INCLUDED
