// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Version.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Version.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lalune {

namespace {

const ::google_lalune::protobuf::Descriptor* CheckVersion_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  CheckVersion_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* VersionFile_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  VersionFile_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* CheckVersionResult_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  CheckVersionResult_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* AddVersion_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  AddVersion_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Version_2eproto() {
  protobuf_AddDesc_Version_2eproto();
  const ::google_lalune::protobuf::FileDescriptor* file =
    ::google_lalune::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Version.proto");
  GOOGLE_CHECK(file != NULL);
  CheckVersion_descriptor_ = file->message_type(0);
  static const int CheckVersion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersion, version_name_),
  };
  CheckVersion_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      CheckVersion_descriptor_,
      CheckVersion::default_instance_,
      CheckVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersion, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckVersion));
  VersionFile_descriptor_ = file->message_type(1);
  static const int VersionFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionFile, url_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionFile, file_path_),
  };
  VersionFile_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      VersionFile_descriptor_,
      VersionFile::default_instance_,
      VersionFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionFile, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(VersionFile));
  CheckVersionResult_descriptor_ = file->message_type(2);
  static const int CheckVersionResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionResult, now_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionResult, url_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionResult, file_),
  };
  CheckVersionResult_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      CheckVersionResult_descriptor_,
      CheckVersionResult::default_instance_,
      CheckVersionResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionResult, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckVersionResult));
  AddVersion_descriptor_ = file->message_type(3);
  static const int AddVersion_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddVersion, version_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddVersion, version_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddVersion, flag_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddVersion, url_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddVersion, file_),
  };
  AddVersion_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      AddVersion_descriptor_,
      AddVersion::default_instance_,
      AddVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddVersion, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(AddVersion));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_lalune::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Version_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckVersion_descriptor_, &CheckVersion::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VersionFile_descriptor_, &VersionFile::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckVersionResult_descriptor_, &CheckVersionResult::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddVersion_descriptor_, &AddVersion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Version_2eproto() {
  delete CheckVersion::default_instance_;
  delete CheckVersion_reflection_;
  delete VersionFile::default_instance_;
  delete VersionFile_reflection_;
  delete CheckVersionResult::default_instance_;
  delete CheckVersionResult_reflection_;
  delete AddVersion::default_instance_;
  delete AddVersion_reflection_;
}

void protobuf_AddDesc_Version_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_lalune::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rVersion.proto\022\006lalune\"$\n\014CheckVersion\022"
    "\024\n\014version_name\030\001 \002(\t\"4\n\013VersionFile\022\022\n\n"
    "url_prefix\030\002 \001(\t\022\021\n\tfile_path\030\001 \002(\t\"`\n\022C"
    "heckVersionResult\022\023\n\013now_version\030\003 \001(\t\022\022"
    "\n\nurl_prefix\030\002 \001(\t\022!\n\004file\030\001 \003(\0132\023.lalun"
    "e.VersionFile\"\200\001\n\nAddVersion\022\024\n\014version_"
    "from\030\002 \002(\t\022\022\n\nversion_to\030\003 \002(\t\022\021\n\tflag_m"
    "ask\030\005 \001(\r\022\022\n\nurl_prefix\030\004 \001(\t\022!\n\004file\030\001 "
    "\003(\0132\023.lalune.VersionFile", 344);
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Version.proto", &protobuf_RegisterTypes);
  CheckVersion::default_instance_ = new CheckVersion();
  VersionFile::default_instance_ = new VersionFile();
  CheckVersionResult::default_instance_ = new CheckVersionResult();
  AddVersion::default_instance_ = new AddVersion();
  CheckVersion::default_instance_->InitAsDefaultInstance();
  VersionFile::default_instance_->InitAsDefaultInstance();
  CheckVersionResult::default_instance_->InitAsDefaultInstance();
  AddVersion::default_instance_->InitAsDefaultInstance();
  ::google_lalune::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Version_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Version_2eproto {
  StaticDescriptorInitializer_Version_2eproto() {
    protobuf_AddDesc_Version_2eproto();
  }
} static_descriptor_initializer_Version_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CheckVersion::kVersionNameFieldNumber;
#endif  // !_MSC_VER

CheckVersion::CheckVersion()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.CheckVersion)
}

void CheckVersion::InitAsDefaultInstance() {
}

CheckVersion::CheckVersion(const CheckVersion& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.CheckVersion)
}

void CheckVersion::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_name_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckVersion::~CheckVersion() {
  // @@protoc_insertion_point(destructor:lalune.CheckVersion)
  SharedDtor();
}

void CheckVersion::SharedDtor() {
  if (version_name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_name_;
  }
  if (this != default_instance_) {
  }
}

void CheckVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* CheckVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckVersion_descriptor_;
}

const CheckVersion& CheckVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Version_2eproto();
  return *default_instance_;
}

CheckVersion* CheckVersion::default_instance_ = NULL;

CheckVersion* CheckVersion::New() const {
  return new CheckVersion;
}

void CheckVersion::Clear() {
  if (has_version_name()) {
    if (version_name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
      version_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckVersion::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.CheckVersion)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_name()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version_name().data(), this->version_name().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "version_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.CheckVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.CheckVersion)
  return false;
#undef DO_
}

void CheckVersion::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.CheckVersion)
  // required string version_name = 1;
  if (has_version_name()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version_name().data(), this->version_name().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "version_name");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.CheckVersion)
}

::google_lalune::protobuf::uint8* CheckVersion::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.CheckVersion)
  // required string version_name = 1;
  if (has_version_name()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version_name().data(), this->version_name().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "version_name");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.CheckVersion)
  return target;
}

int CheckVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version_name = 1;
    if (has_version_name()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->version_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckVersion::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckVersion* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const CheckVersion*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckVersion::MergeFrom(const CheckVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version_name()) {
      set_version_name(from.version_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckVersion::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckVersion::CopyFrom(const CheckVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CheckVersion::Swap(CheckVersion* other) {
  if (other != this) {
    std::swap(version_name_, other->version_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata CheckVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = CheckVersion_descriptor_;
  metadata.reflection = CheckVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VersionFile::kUrlPrefixFieldNumber;
const int VersionFile::kFilePathFieldNumber;
#endif  // !_MSC_VER

VersionFile::VersionFile()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.VersionFile)
}

void VersionFile::InitAsDefaultInstance() {
}

VersionFile::VersionFile(const VersionFile& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.VersionFile)
}

void VersionFile::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_prefix_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  file_path_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VersionFile::~VersionFile() {
  // @@protoc_insertion_point(destructor:lalune.VersionFile)
  SharedDtor();
}

void VersionFile::SharedDtor() {
  if (url_prefix_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_prefix_;
  }
  if (file_path_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_path_;
  }
  if (this != default_instance_) {
  }
}

void VersionFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* VersionFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VersionFile_descriptor_;
}

const VersionFile& VersionFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Version_2eproto();
  return *default_instance_;
}

VersionFile* VersionFile::default_instance_ = NULL;

VersionFile* VersionFile::New() const {
  return new VersionFile;
}

void VersionFile::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_url_prefix()) {
      if (url_prefix_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_prefix_->clear();
      }
    }
    if (has_file_path()) {
      if (file_path_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VersionFile::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.VersionFile)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_path().data(), this->file_path().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url_prefix;
        break;
      }

      // optional string url_prefix = 2;
      case 2: {
        if (tag == 18) {
         parse_url_prefix:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_prefix()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_prefix().data(), this->url_prefix().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "url_prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.VersionFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.VersionFile)
  return false;
#undef DO_
}

void VersionFile::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.VersionFile)
  // required string file_path = 1;
  if (has_file_path()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_path().data(), this->file_path().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "file_path");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // optional string url_prefix = 2;
  if (has_url_prefix()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_prefix().data(), this->url_prefix().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "url_prefix");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url_prefix(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.VersionFile)
}

::google_lalune::protobuf::uint8* VersionFile::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.VersionFile)
  // required string file_path = 1;
  if (has_file_path()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_path().data(), this->file_path().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "file_path");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // optional string url_prefix = 2;
  if (has_url_prefix()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_prefix().data(), this->url_prefix().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "url_prefix");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url_prefix(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.VersionFile)
  return target;
}

int VersionFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string url_prefix = 2;
    if (has_url_prefix()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->url_prefix());
    }

    // required string file_path = 1;
    if (has_file_path()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->file_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionFile::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VersionFile* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const VersionFile*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VersionFile::MergeFrom(const VersionFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url_prefix()) {
      set_url_prefix(from.url_prefix());
    }
    if (from.has_file_path()) {
      set_file_path(from.file_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VersionFile::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionFile::CopyFrom(const VersionFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void VersionFile::Swap(VersionFile* other) {
  if (other != this) {
    std::swap(url_prefix_, other->url_prefix_);
    std::swap(file_path_, other->file_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata VersionFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = VersionFile_descriptor_;
  metadata.reflection = VersionFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckVersionResult::kNowVersionFieldNumber;
const int CheckVersionResult::kUrlPrefixFieldNumber;
const int CheckVersionResult::kFileFieldNumber;
#endif  // !_MSC_VER

CheckVersionResult::CheckVersionResult()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.CheckVersionResult)
}

void CheckVersionResult::InitAsDefaultInstance() {
}

CheckVersionResult::CheckVersionResult(const CheckVersionResult& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.CheckVersionResult)
}

void CheckVersionResult::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  now_version_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  url_prefix_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckVersionResult::~CheckVersionResult() {
  // @@protoc_insertion_point(destructor:lalune.CheckVersionResult)
  SharedDtor();
}

void CheckVersionResult::SharedDtor() {
  if (now_version_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete now_version_;
  }
  if (url_prefix_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_prefix_;
  }
  if (this != default_instance_) {
  }
}

void CheckVersionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* CheckVersionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckVersionResult_descriptor_;
}

const CheckVersionResult& CheckVersionResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Version_2eproto();
  return *default_instance_;
}

CheckVersionResult* CheckVersionResult::default_instance_ = NULL;

CheckVersionResult* CheckVersionResult::New() const {
  return new CheckVersionResult;
}

void CheckVersionResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_now_version()) {
      if (now_version_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        now_version_->clear();
      }
    }
    if (has_url_prefix()) {
      if (url_prefix_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_prefix_->clear();
      }
    }
  }
  file_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckVersionResult::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.CheckVersionResult)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lalune.VersionFile file = 1;
      case 1: {
        if (tag == 10) {
         parse_file:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_file;
        if (input->ExpectTag(18)) goto parse_url_prefix;
        break;
      }

      // optional string url_prefix = 2;
      case 2: {
        if (tag == 18) {
         parse_url_prefix:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_prefix()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_prefix().data(), this->url_prefix().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "url_prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_now_version;
        break;
      }

      // optional string now_version = 3;
      case 3: {
        if (tag == 26) {
         parse_now_version:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_now_version()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->now_version().data(), this->now_version().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "now_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.CheckVersionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.CheckVersionResult)
  return false;
#undef DO_
}

void CheckVersionResult::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.CheckVersionResult)
  // repeated .lalune.VersionFile file = 1;
  for (int i = 0; i < this->file_size(); i++) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file(i), output);
  }

  // optional string url_prefix = 2;
  if (has_url_prefix()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_prefix().data(), this->url_prefix().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "url_prefix");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url_prefix(), output);
  }

  // optional string now_version = 3;
  if (has_now_version()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->now_version().data(), this->now_version().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "now_version");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->now_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.CheckVersionResult)
}

::google_lalune::protobuf::uint8* CheckVersionResult::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.CheckVersionResult)
  // repeated .lalune.VersionFile file = 1;
  for (int i = 0; i < this->file_size(); i++) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file(i), target);
  }

  // optional string url_prefix = 2;
  if (has_url_prefix()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_prefix().data(), this->url_prefix().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "url_prefix");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url_prefix(), target);
  }

  // optional string now_version = 3;
  if (has_now_version()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->now_version().data(), this->now_version().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "now_version");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->now_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.CheckVersionResult)
  return target;
}

int CheckVersionResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string now_version = 3;
    if (has_now_version()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->now_version());
    }

    // optional string url_prefix = 2;
    if (has_url_prefix()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->url_prefix());
    }

  }
  // repeated .lalune.VersionFile file = 1;
  total_size += 1 * this->file_size();
  for (int i = 0; i < this->file_size(); i++) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckVersionResult::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckVersionResult* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const CheckVersionResult*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckVersionResult::MergeFrom(const CheckVersionResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_.MergeFrom(from.file_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_now_version()) {
      set_now_version(from.now_version());
    }
    if (from.has_url_prefix()) {
      set_url_prefix(from.url_prefix());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckVersionResult::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckVersionResult::CopyFrom(const CheckVersionResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckVersionResult::IsInitialized() const {

  if (!::google_lalune::protobuf::internal::AllAreInitialized(this->file())) return false;
  return true;
}

void CheckVersionResult::Swap(CheckVersionResult* other) {
  if (other != this) {
    std::swap(now_version_, other->now_version_);
    std::swap(url_prefix_, other->url_prefix_);
    file_.Swap(&other->file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata CheckVersionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = CheckVersionResult_descriptor_;
  metadata.reflection = CheckVersionResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddVersion::kVersionFromFieldNumber;
const int AddVersion::kVersionToFieldNumber;
const int AddVersion::kFlagMaskFieldNumber;
const int AddVersion::kUrlPrefixFieldNumber;
const int AddVersion::kFileFieldNumber;
#endif  // !_MSC_VER

AddVersion::AddVersion()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.AddVersion)
}

void AddVersion::InitAsDefaultInstance() {
}

AddVersion::AddVersion(const AddVersion& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.AddVersion)
}

void AddVersion::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_from_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  version_to_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_mask_ = 0u;
  url_prefix_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddVersion::~AddVersion() {
  // @@protoc_insertion_point(destructor:lalune.AddVersion)
  SharedDtor();
}

void AddVersion::SharedDtor() {
  if (version_from_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_from_;
  }
  if (version_to_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_to_;
  }
  if (url_prefix_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_prefix_;
  }
  if (this != default_instance_) {
  }
}

void AddVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* AddVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddVersion_descriptor_;
}

const AddVersion& AddVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Version_2eproto();
  return *default_instance_;
}

AddVersion* AddVersion::default_instance_ = NULL;

AddVersion* AddVersion::New() const {
  return new AddVersion;
}

void AddVersion::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_version_from()) {
      if (version_from_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_from_->clear();
      }
    }
    if (has_version_to()) {
      if (version_to_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_to_->clear();
      }
    }
    flag_mask_ = 0u;
    if (has_url_prefix()) {
      if (url_prefix_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_prefix_->clear();
      }
    }
  }
  file_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddVersion::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.AddVersion)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lalune.VersionFile file = 1;
      case 1: {
        if (tag == 10) {
         parse_file:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_file;
        if (input->ExpectTag(18)) goto parse_version_from;
        break;
      }

      // required string version_from = 2;
      case 2: {
        if (tag == 18) {
         parse_version_from:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_from()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version_from().data(), this->version_from().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "version_from");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_version_to;
        break;
      }

      // required string version_to = 3;
      case 3: {
        if (tag == 26) {
         parse_version_to:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_to()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version_to().data(), this->version_to().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "version_to");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_url_prefix;
        break;
      }

      // optional string url_prefix = 4;
      case 4: {
        if (tag == 34) {
         parse_url_prefix:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_prefix()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_prefix().data(), this->url_prefix().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "url_prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flag_mask;
        break;
      }

      // optional uint32 flag_mask = 5;
      case 5: {
        if (tag == 40) {
         parse_flag_mask:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_mask_)));
          set_has_flag_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.AddVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.AddVersion)
  return false;
#undef DO_
}

void AddVersion::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.AddVersion)
  // repeated .lalune.VersionFile file = 1;
  for (int i = 0; i < this->file_size(); i++) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file(i), output);
  }

  // required string version_from = 2;
  if (has_version_from()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version_from().data(), this->version_from().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "version_from");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version_from(), output);
  }

  // required string version_to = 3;
  if (has_version_to()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version_to().data(), this->version_to().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "version_to");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version_to(), output);
  }

  // optional string url_prefix = 4;
  if (has_url_prefix()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_prefix().data(), this->url_prefix().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "url_prefix");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url_prefix(), output);
  }

  // optional uint32 flag_mask = 5;
  if (has_flag_mask()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flag_mask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.AddVersion)
}

::google_lalune::protobuf::uint8* AddVersion::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.AddVersion)
  // repeated .lalune.VersionFile file = 1;
  for (int i = 0; i < this->file_size(); i++) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file(i), target);
  }

  // required string version_from = 2;
  if (has_version_from()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version_from().data(), this->version_from().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "version_from");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version_from(), target);
  }

  // required string version_to = 3;
  if (has_version_to()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version_to().data(), this->version_to().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "version_to");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version_to(), target);
  }

  // optional string url_prefix = 4;
  if (has_url_prefix()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_prefix().data(), this->url_prefix().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "url_prefix");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url_prefix(), target);
  }

  // optional uint32 flag_mask = 5;
  if (has_flag_mask()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flag_mask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.AddVersion)
  return target;
}

int AddVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version_from = 2;
    if (has_version_from()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->version_from());
    }

    // required string version_to = 3;
    if (has_version_to()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->version_to());
    }

    // optional uint32 flag_mask = 5;
    if (has_flag_mask()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag_mask());
    }

    // optional string url_prefix = 4;
    if (has_url_prefix()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->url_prefix());
    }

  }
  // repeated .lalune.VersionFile file = 1;
  total_size += 1 * this->file_size();
  for (int i = 0; i < this->file_size(); i++) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddVersion::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddVersion* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const AddVersion*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddVersion::MergeFrom(const AddVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_.MergeFrom(from.file_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version_from()) {
      set_version_from(from.version_from());
    }
    if (from.has_version_to()) {
      set_version_to(from.version_to());
    }
    if (from.has_flag_mask()) {
      set_flag_mask(from.flag_mask());
    }
    if (from.has_url_prefix()) {
      set_url_prefix(from.url_prefix());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddVersion::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddVersion::CopyFrom(const AddVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google_lalune::protobuf::internal::AllAreInitialized(this->file())) return false;
  return true;
}

void AddVersion::Swap(AddVersion* other) {
  if (other != this) {
    std::swap(version_from_, other->version_from_);
    std::swap(version_to_, other->version_to_);
    std::swap(flag_mask_, other->flag_mask_);
    std::swap(url_prefix_, other->url_prefix_);
    file_.Swap(&other->file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata AddVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = AddVersion_descriptor_;
  metadata.reflection = AddVersion_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lalune

// @@protoc_insertion_point(global_scope)
