// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "battle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace boids {

namespace {

const ::google_lalune::protobuf::Descriptor* MatchRequest_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  MatchRequest_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* GamePlayer_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  GamePlayer_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* MatchResponse_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  MatchResponse_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* CreateGame_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  CreateGame_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* CreateGameResponse_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  CreateGameResponse_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* PvPServerRegister_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  PvPServerRegister_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* PvPServerHeartBeat_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  PvPServerHeartBeat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_battle_2eproto() {
  protobuf_AddDesc_battle_2eproto();
  const ::google_lalune::protobuf::FileDescriptor* file =
    ::google_lalune::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "battle.proto");
  GOOGLE_CHECK(file != NULL);
  MatchRequest_descriptor_ = file->message_type(0);
  static const int MatchRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRequest, player_id_),
  };
  MatchRequest_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      MatchRequest_descriptor_,
      MatchRequest::default_instance_,
      MatchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRequest, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRequest));
  GamePlayer_descriptor_ = file->message_type(1);
  static const int GamePlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, player_id_),
  };
  GamePlayer_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      GamePlayer_descriptor_,
      GamePlayer::default_instance_,
      GamePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePlayer));
  MatchResponse_descriptor_ = file->message_type(2);
  static const int MatchResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchResponse, game_uuid_),
  };
  MatchResponse_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      MatchResponse_descriptor_,
      MatchResponse::default_instance_,
      MatchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchResponse, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchResponse));
  CreateGame_descriptor_ = file->message_type(3);
  static const int CreateGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGame, game_id_),
  };
  CreateGame_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      CreateGame_descriptor_,
      CreateGame::default_instance_,
      CreateGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGame, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGame));
  CreateGameResponse_descriptor_ = file->message_type(4);
  static const int CreateGameResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGameResponse, ret_value_),
  };
  CreateGameResponse_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      CreateGameResponse_descriptor_,
      CreateGameResponse::default_instance_,
      CreateGameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGameResponse, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGameResponse));
  PvPServerRegister_descriptor_ = file->message_type(5);
  static const int PvPServerRegister_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPServerRegister, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPServerRegister, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPServerRegister, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPServerRegister, priority_),
  };
  PvPServerRegister_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      PvPServerRegister_descriptor_,
      PvPServerRegister::default_instance_,
      PvPServerRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPServerRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPServerRegister, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPServerRegister));
  PvPServerHeartBeat_descriptor_ = file->message_type(6);
  static const int PvPServerHeartBeat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPServerHeartBeat, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPServerHeartBeat, port_),
  };
  PvPServerHeartBeat_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      PvPServerHeartBeat_descriptor_,
      PvPServerHeartBeat::default_instance_,
      PvPServerHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPServerHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPServerHeartBeat, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPServerHeartBeat));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_lalune::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_battle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRequest_descriptor_, &MatchRequest::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePlayer_descriptor_, &GamePlayer::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchResponse_descriptor_, &MatchResponse::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGame_descriptor_, &CreateGame::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGameResponse_descriptor_, &CreateGameResponse::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPServerRegister_descriptor_, &PvPServerRegister::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPServerHeartBeat_descriptor_, &PvPServerHeartBeat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_battle_2eproto() {
  delete MatchRequest::default_instance_;
  delete MatchRequest_reflection_;
  delete GamePlayer::default_instance_;
  delete GamePlayer_reflection_;
  delete MatchResponse::default_instance_;
  delete MatchResponse_reflection_;
  delete CreateGame::default_instance_;
  delete CreateGame_reflection_;
  delete CreateGameResponse::default_instance_;
  delete CreateGameResponse_reflection_;
  delete PvPServerRegister::default_instance_;
  delete PvPServerRegister_reflection_;
  delete PvPServerHeartBeat::default_instance_;
  delete PvPServerHeartBeat_reflection_;
}

void protobuf_AddDesc_battle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_lalune::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014battle.proto\022\005boids\"!\n\014MatchRequest\022\021\n"
    "\tplayer_id\030\001 \002(\r\"-\n\nGamePlayer\022\014\n\004name\030\001"
    " \002(\t\022\021\n\tplayer_id\030\002 \002(\r\"\"\n\rMatchResponse"
    "\022\021\n\tgame_uuid\030\001 \002(\014\"\035\n\nCreateGame\022\017\n\007gam"
    "e_id\030\001 \002(\014\"\'\n\022CreateGameResponse\022\021\n\tret_"
    "value\030\001 \002(\005\"O\n\021PvPServerRegister\022\n\n\002ip\030\001"
    " \002(\t\022\014\n\004port\030\002 \002(\r\022\016\n\006region\030\003 \001(\005\022\020\n\010pr"
    "iority\030\004 \001(\005\".\n\022PvPServerHeartBeat\022\n\n\002ip"
    "\030\001 \002(\t\022\014\n\004port\030\002 \002(\r", 340);
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "battle.proto", &protobuf_RegisterTypes);
  MatchRequest::default_instance_ = new MatchRequest();
  GamePlayer::default_instance_ = new GamePlayer();
  MatchResponse::default_instance_ = new MatchResponse();
  CreateGame::default_instance_ = new CreateGame();
  CreateGameResponse::default_instance_ = new CreateGameResponse();
  PvPServerRegister::default_instance_ = new PvPServerRegister();
  PvPServerHeartBeat::default_instance_ = new PvPServerHeartBeat();
  MatchRequest::default_instance_->InitAsDefaultInstance();
  GamePlayer::default_instance_->InitAsDefaultInstance();
  MatchResponse::default_instance_->InitAsDefaultInstance();
  CreateGame::default_instance_->InitAsDefaultInstance();
  CreateGameResponse::default_instance_->InitAsDefaultInstance();
  PvPServerRegister::default_instance_->InitAsDefaultInstance();
  PvPServerHeartBeat::default_instance_->InitAsDefaultInstance();
  ::google_lalune::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_battle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_battle_2eproto {
  StaticDescriptorInitializer_battle_2eproto() {
    protobuf_AddDesc_battle_2eproto();
  }
} static_descriptor_initializer_battle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MatchRequest::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

MatchRequest::MatchRequest()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boids.MatchRequest)
}

void MatchRequest::InitAsDefaultInstance() {
}

MatchRequest::MatchRequest(const MatchRequest& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boids.MatchRequest)
}

void MatchRequest::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRequest::~MatchRequest() {
  // @@protoc_insertion_point(destructor:boids.MatchRequest)
  SharedDtor();
}

void MatchRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* MatchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRequest_descriptor_;
}

const MatchRequest& MatchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

MatchRequest* MatchRequest::default_instance_ = NULL;

MatchRequest* MatchRequest::New() const {
  return new MatchRequest;
}

void MatchRequest::Clear() {
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRequest::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boids.MatchRequest)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boids.MatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boids.MatchRequest)
  return false;
#undef DO_
}

void MatchRequest::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boids.MatchRequest)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boids.MatchRequest)
}

::google_lalune::protobuf::uint8* MatchRequest::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boids.MatchRequest)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boids.MatchRequest)
  return target;
}

int MatchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRequest::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRequest* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const MatchRequest*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRequest::MergeFrom(const MatchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRequest::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRequest::CopyFrom(const MatchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MatchRequest::Swap(MatchRequest* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata MatchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = MatchRequest_descriptor_;
  metadata.reflection = MatchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamePlayer::kNameFieldNumber;
const int GamePlayer::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

GamePlayer::GamePlayer()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boids.GamePlayer)
}

void GamePlayer::InitAsDefaultInstance() {
}

GamePlayer::GamePlayer(const GamePlayer& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boids.GamePlayer)
}

void GamePlayer::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayer::~GamePlayer() {
  // @@protoc_insertion_point(destructor:boids.GamePlayer)
  SharedDtor();
}

void GamePlayer::SharedDtor() {
  if (name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GamePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* GamePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayer_descriptor_;
}

const GamePlayer& GamePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

GamePlayer* GamePlayer::default_instance_ = NULL;

GamePlayer* GamePlayer::New() const {
  return new GamePlayer;
}

void GamePlayer::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    player_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePlayer::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boids.GamePlayer)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required uint32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boids.GamePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boids.GamePlayer)
  return false;
#undef DO_
}

void GamePlayer::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boids.GamePlayer)
  // required string name = 1;
  if (has_name()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 player_id = 2;
  if (has_player_id()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boids.GamePlayer)
}

::google_lalune::protobuf::uint8* GamePlayer::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boids.GamePlayer)
  // required string name = 1;
  if (has_name()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 player_id = 2;
  if (has_player_id()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boids.GamePlayer)
  return target;
}

int GamePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayer::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePlayer* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const GamePlayer*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePlayer::MergeFrom(const GamePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePlayer::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayer::CopyFrom(const GamePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GamePlayer::Swap(GamePlayer* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata GamePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayer_descriptor_;
  metadata.reflection = GamePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchResponse::kGameUuidFieldNumber;
#endif  // !_MSC_VER

MatchResponse::MatchResponse()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boids.MatchResponse)
}

void MatchResponse::InitAsDefaultInstance() {
}

MatchResponse::MatchResponse(const MatchResponse& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boids.MatchResponse)
}

void MatchResponse::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_uuid_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchResponse::~MatchResponse() {
  // @@protoc_insertion_point(destructor:boids.MatchResponse)
  SharedDtor();
}

void MatchResponse::SharedDtor() {
  if (game_uuid_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_uuid_;
  }
  if (this != default_instance_) {
  }
}

void MatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* MatchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchResponse_descriptor_;
}

const MatchResponse& MatchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

MatchResponse* MatchResponse::default_instance_ = NULL;

MatchResponse* MatchResponse::New() const {
  return new MatchResponse;
}

void MatchResponse::Clear() {
  if (has_game_uuid()) {
    if (game_uuid_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
      game_uuid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchResponse::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boids.MatchResponse)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes game_uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boids.MatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boids.MatchResponse)
  return false;
#undef DO_
}

void MatchResponse::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boids.MatchResponse)
  // required bytes game_uuid = 1;
  if (has_game_uuid()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->game_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boids.MatchResponse)
}

::google_lalune::protobuf::uint8* MatchResponse::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boids.MatchResponse)
  // required bytes game_uuid = 1;
  if (has_game_uuid()) {
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->game_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boids.MatchResponse)
  return target;
}

int MatchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes game_uuid = 1;
    if (has_game_uuid()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::BytesSize(
          this->game_uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchResponse::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchResponse* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const MatchResponse*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchResponse::MergeFrom(const MatchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_uuid()) {
      set_game_uuid(from.game_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchResponse::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchResponse::CopyFrom(const MatchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MatchResponse::Swap(MatchResponse* other) {
  if (other != this) {
    std::swap(game_uuid_, other->game_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata MatchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = MatchResponse_descriptor_;
  metadata.reflection = MatchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGame::kGameIdFieldNumber;
#endif  // !_MSC_VER

CreateGame::CreateGame()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boids.CreateGame)
}

void CreateGame::InitAsDefaultInstance() {
}

CreateGame::CreateGame(const CreateGame& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boids.CreateGame)
}

void CreateGame::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_id_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGame::~CreateGame() {
  // @@protoc_insertion_point(destructor:boids.CreateGame)
  SharedDtor();
}

void CreateGame::SharedDtor() {
  if (game_id_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_id_;
  }
  if (this != default_instance_) {
  }
}

void CreateGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* CreateGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGame_descriptor_;
}

const CreateGame& CreateGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

CreateGame* CreateGame::default_instance_ = NULL;

CreateGame* CreateGame::New() const {
  return new CreateGame;
}

void CreateGame::Clear() {
  if (has_game_id()) {
    if (game_id_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
      game_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateGame::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boids.CreateGame)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes game_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boids.CreateGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boids.CreateGame)
  return false;
#undef DO_
}

void CreateGame::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boids.CreateGame)
  // required bytes game_id = 1;
  if (has_game_id()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boids.CreateGame)
}

::google_lalune::protobuf::uint8* CreateGame::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boids.CreateGame)
  // required bytes game_id = 1;
  if (has_game_id()) {
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boids.CreateGame)
  return target;
}

int CreateGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::BytesSize(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGame::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGame* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const CreateGame*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateGame::MergeFrom(const CreateGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateGame::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGame::CopyFrom(const CreateGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateGame::Swap(CreateGame* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata CreateGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = CreateGame_descriptor_;
  metadata.reflection = CreateGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGameResponse::kRetValueFieldNumber;
#endif  // !_MSC_VER

CreateGameResponse::CreateGameResponse()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boids.CreateGameResponse)
}

void CreateGameResponse::InitAsDefaultInstance() {
}

CreateGameResponse::CreateGameResponse(const CreateGameResponse& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boids.CreateGameResponse)
}

void CreateGameResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGameResponse::~CreateGameResponse() {
  // @@protoc_insertion_point(destructor:boids.CreateGameResponse)
  SharedDtor();
}

void CreateGameResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateGameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* CreateGameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGameResponse_descriptor_;
}

const CreateGameResponse& CreateGameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

CreateGameResponse* CreateGameResponse::default_instance_ = NULL;

CreateGameResponse* CreateGameResponse::New() const {
  return new CreateGameResponse;
}

void CreateGameResponse::Clear() {
  ret_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateGameResponse::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boids.CreateGameResponse)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret_value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_value_)));
          set_has_ret_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boids.CreateGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boids.CreateGameResponse)
  return false;
#undef DO_
}

void CreateGameResponse::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boids.CreateGameResponse)
  // required int32 ret_value = 1;
  if (has_ret_value()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boids.CreateGameResponse)
}

::google_lalune::protobuf::uint8* CreateGameResponse::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boids.CreateGameResponse)
  // required int32 ret_value = 1;
  if (has_ret_value()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boids.CreateGameResponse)
  return target;
}

int CreateGameResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret_value = 1;
    if (has_ret_value()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGameResponse::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGameResponse* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const CreateGameResponse*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateGameResponse::MergeFrom(const CreateGameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_value()) {
      set_ret_value(from.ret_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateGameResponse::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGameResponse::CopyFrom(const CreateGameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGameResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateGameResponse::Swap(CreateGameResponse* other) {
  if (other != this) {
    std::swap(ret_value_, other->ret_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata CreateGameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = CreateGameResponse_descriptor_;
  metadata.reflection = CreateGameResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPServerRegister::kIpFieldNumber;
const int PvPServerRegister::kPortFieldNumber;
const int PvPServerRegister::kRegionFieldNumber;
const int PvPServerRegister::kPriorityFieldNumber;
#endif  // !_MSC_VER

PvPServerRegister::PvPServerRegister()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boids.PvPServerRegister)
}

void PvPServerRegister::InitAsDefaultInstance() {
}

PvPServerRegister::PvPServerRegister(const PvPServerRegister& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boids.PvPServerRegister)
}

void PvPServerRegister::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  region_ = 0;
  priority_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPServerRegister::~PvPServerRegister() {
  // @@protoc_insertion_point(destructor:boids.PvPServerRegister)
  SharedDtor();
}

void PvPServerRegister::SharedDtor() {
  if (ip_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void PvPServerRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* PvPServerRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPServerRegister_descriptor_;
}

const PvPServerRegister& PvPServerRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

PvPServerRegister* PvPServerRegister::default_instance_ = NULL;

PvPServerRegister* PvPServerRegister::New() const {
  return new PvPServerRegister;
}

void PvPServerRegister::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PvPServerRegister*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(port_, priority_);
    if (has_ip()) {
      if (ip_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPServerRegister::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boids.PvPServerRegister)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_region;
        break;
      }

      // optional int32 region = 3;
      case 3: {
        if (tag == 24) {
         parse_region:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_priority;
        break;
      }

      // optional int32 priority = 4;
      case 4: {
        if (tag == 32) {
         parse_priority:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boids.PvPServerRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boids.PvPServerRegister)
  return false;
#undef DO_
}

void PvPServerRegister::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boids.PvPServerRegister)
  // required string ip = 1;
  if (has_ip()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional int32 region = 3;
  if (has_region()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32(3, this->region(), output);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boids.PvPServerRegister)
}

::google_lalune::protobuf::uint8* PvPServerRegister::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boids.PvPServerRegister)
  // required string ip = 1;
  if (has_ip()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional int32 region = 3;
  if (has_region()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->region(), target);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boids.PvPServerRegister)
  return target;
}

int PvPServerRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional int32 region = 3;
    if (has_region()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }

    // optional int32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPServerRegister::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPServerRegister* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const PvPServerRegister*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPServerRegister::MergeFrom(const PvPServerRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPServerRegister::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPServerRegister::CopyFrom(const PvPServerRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPServerRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PvPServerRegister::Swap(PvPServerRegister* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(region_, other->region_);
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata PvPServerRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = PvPServerRegister_descriptor_;
  metadata.reflection = PvPServerRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPServerHeartBeat::kIpFieldNumber;
const int PvPServerHeartBeat::kPortFieldNumber;
#endif  // !_MSC_VER

PvPServerHeartBeat::PvPServerHeartBeat()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boids.PvPServerHeartBeat)
}

void PvPServerHeartBeat::InitAsDefaultInstance() {
}

PvPServerHeartBeat::PvPServerHeartBeat(const PvPServerHeartBeat& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boids.PvPServerHeartBeat)
}

void PvPServerHeartBeat::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPServerHeartBeat::~PvPServerHeartBeat() {
  // @@protoc_insertion_point(destructor:boids.PvPServerHeartBeat)
  SharedDtor();
}

void PvPServerHeartBeat::SharedDtor() {
  if (ip_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void PvPServerHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* PvPServerHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPServerHeartBeat_descriptor_;
}

const PvPServerHeartBeat& PvPServerHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

PvPServerHeartBeat* PvPServerHeartBeat::default_instance_ = NULL;

PvPServerHeartBeat* PvPServerHeartBeat::New() const {
  return new PvPServerHeartBeat;
}

void PvPServerHeartBeat::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ip()) {
      if (ip_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPServerHeartBeat::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boids.PvPServerHeartBeat)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boids.PvPServerHeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boids.PvPServerHeartBeat)
  return false;
#undef DO_
}

void PvPServerHeartBeat::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boids.PvPServerHeartBeat)
  // required string ip = 1;
  if (has_ip()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boids.PvPServerHeartBeat)
}

::google_lalune::protobuf::uint8* PvPServerHeartBeat::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boids.PvPServerHeartBeat)
  // required string ip = 1;
  if (has_ip()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boids.PvPServerHeartBeat)
  return target;
}

int PvPServerHeartBeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPServerHeartBeat::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPServerHeartBeat* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const PvPServerHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPServerHeartBeat::MergeFrom(const PvPServerHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPServerHeartBeat::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPServerHeartBeat::CopyFrom(const PvPServerHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPServerHeartBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PvPServerHeartBeat::Swap(PvPServerHeartBeat* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata PvPServerHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = PvPServerHeartBeat_descriptor_;
  metadata.reflection = PvPServerHeartBeat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace boids

// @@protoc_insertion_point(global_scope)
