// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Battle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Battle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lalune {

namespace {

const ::google_lalune::protobuf::Descriptor* MatchRequest_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  MatchRequest_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* GamePlayer_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  GamePlayer_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* MatchResponse_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  MatchResponse_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* ConnectToGame_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  ConnectToGame_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* ConnectToGameResponse_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  ConnectToGameResponse_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* GameStart_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  GameStart_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* GameAction_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  GameAction_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* GameActions_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  GameActions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Battle_2eproto() {
  protobuf_AddDesc_Battle_2eproto();
  const ::google_lalune::protobuf::FileDescriptor* file =
    ::google_lalune::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Battle.proto");
  GOOGLE_CHECK(file != NULL);
  MatchRequest_descriptor_ = file->message_type(0);
  static const int MatchRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRequest, game_type_),
  };
  MatchRequest_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      MatchRequest_descriptor_,
      MatchRequest::default_instance_,
      MatchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRequest, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRequest));
  GamePlayer_descriptor_ = file->message_type(1);
  static const int GamePlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, player_id_),
  };
  GamePlayer_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      GamePlayer_descriptor_,
      GamePlayer::default_instance_,
      GamePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayer, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePlayer));
  MatchResponse_descriptor_ = file->message_type(2);
  static const int MatchResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchResponse, game_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchResponse, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchResponse, game_server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchResponse, game_server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchResponse, access_token_),
  };
  MatchResponse_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      MatchResponse_descriptor_,
      MatchResponse::default_instance_,
      MatchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchResponse, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchResponse));
  ConnectToGame_descriptor_ = file->message_type(3);
  static const int ConnectToGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectToGame, player_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectToGame, access_token_),
  };
  ConnectToGame_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      ConnectToGame_descriptor_,
      ConnectToGame::default_instance_,
      ConnectToGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectToGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectToGame, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectToGame));
  ConnectToGameResponse_descriptor_ = file->message_type(4);
  static const int ConnectToGameResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectToGameResponse, team_),
  };
  ConnectToGameResponse_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      ConnectToGameResponse_descriptor_,
      ConnectToGameResponse::default_instance_,
      ConnectToGameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectToGameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectToGameResponse, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectToGameResponse));
  GameStart_descriptor_ = file->message_type(5);
  static const int GameStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStart, rand_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStart, time_per_frame_),
  };
  GameStart_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      GameStart_descriptor_,
      GameStart::default_instance_,
      GameStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStart, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStart));
  GameAction_descriptor_ = file->message_type(6);
  static const int GameAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAction, action_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAction, time_from_game_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAction, player_uid_),
  };
  GameAction_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      GameAction_descriptor_,
      GameAction::default_instance_,
      GameAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAction, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAction));
  GameActions_descriptor_ = file->message_type(7);
  static const int GameActions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameActions, actions_),
  };
  GameActions_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      GameActions_descriptor_,
      GameActions::default_instance_,
      GameActions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameActions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameActions, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(GameActions));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_lalune::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Battle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRequest_descriptor_, &MatchRequest::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePlayer_descriptor_, &GamePlayer::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchResponse_descriptor_, &MatchResponse::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectToGame_descriptor_, &ConnectToGame::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectToGameResponse_descriptor_, &ConnectToGameResponse::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStart_descriptor_, &GameStart::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAction_descriptor_, &GameAction::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameActions_descriptor_, &GameActions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Battle_2eproto() {
  delete MatchRequest::default_instance_;
  delete MatchRequest_reflection_;
  delete GamePlayer::default_instance_;
  delete GamePlayer_reflection_;
  delete MatchResponse::default_instance_;
  delete MatchResponse_reflection_;
  delete ConnectToGame::default_instance_;
  delete ConnectToGame_reflection_;
  delete ConnectToGameResponse::default_instance_;
  delete ConnectToGameResponse_reflection_;
  delete GameStart::default_instance_;
  delete GameStart_reflection_;
  delete GameAction::default_instance_;
  delete GameAction_reflection_;
  delete GameActions::default_instance_;
  delete GameActions_reflection_;
}

void protobuf_AddDesc_Battle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_lalune::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Battle.proto\022\006lalune\"!\n\014MatchRequest\022\021"
    "\n\tgame_type\030\001 \002(\r\"-\n\nGamePlayer\022\014\n\004name\030"
    "\001 \002(\t\022\021\n\tplayer_id\030\002 \002(\r\"\217\001\n\rMatchRespon"
    "se\022\021\n\tgame_uuid\030\001 \002(\014\022#\n\007players\030\002 \003(\0132\022"
    ".lalune.GamePlayer\022\026\n\016game_server_ip\030\003 \002"
    "(\t\022\030\n\020game_server_port\030\004 \002(\r\022\024\n\014access_t"
    "oken\030\005 \002(\014\"9\n\rConnectToGame\022\022\n\nplayer_ui"
    "d\030\001 \002(\r\022\024\n\014access_token\030\002 \002(\014\"%\n\025Connect"
    "ToGameResponse\022\014\n\004team\030\001 \002(\r\"6\n\tGameStar"
    "t\022\021\n\trand_seed\030\001 \002(\r\022\026\n\016time_per_frame\030\002"
    " \002(\r\"S\n\nGameAction\022\023\n\013action_data\030\001 \001(\014\022"
    "\034\n\024time_from_game_start\030\002 \001(\004\022\022\n\nplayer_"
    "uid\030\003 \001(\r\"2\n\013GameActions\022#\n\007actions\030\001 \003("
    "\0132\022.lalune.GameAction", 541);
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Battle.proto", &protobuf_RegisterTypes);
  MatchRequest::default_instance_ = new MatchRequest();
  GamePlayer::default_instance_ = new GamePlayer();
  MatchResponse::default_instance_ = new MatchResponse();
  ConnectToGame::default_instance_ = new ConnectToGame();
  ConnectToGameResponse::default_instance_ = new ConnectToGameResponse();
  GameStart::default_instance_ = new GameStart();
  GameAction::default_instance_ = new GameAction();
  GameActions::default_instance_ = new GameActions();
  MatchRequest::default_instance_->InitAsDefaultInstance();
  GamePlayer::default_instance_->InitAsDefaultInstance();
  MatchResponse::default_instance_->InitAsDefaultInstance();
  ConnectToGame::default_instance_->InitAsDefaultInstance();
  ConnectToGameResponse::default_instance_->InitAsDefaultInstance();
  GameStart::default_instance_->InitAsDefaultInstance();
  GameAction::default_instance_->InitAsDefaultInstance();
  GameActions::default_instance_->InitAsDefaultInstance();
  ::google_lalune::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Battle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Battle_2eproto {
  StaticDescriptorInitializer_Battle_2eproto() {
    protobuf_AddDesc_Battle_2eproto();
  }
} static_descriptor_initializer_Battle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MatchRequest::kGameTypeFieldNumber;
#endif  // !_MSC_VER

MatchRequest::MatchRequest()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.MatchRequest)
}

void MatchRequest::InitAsDefaultInstance() {
}

MatchRequest::MatchRequest(const MatchRequest& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.MatchRequest)
}

void MatchRequest::SharedCtor() {
  _cached_size_ = 0;
  game_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRequest::~MatchRequest() {
  // @@protoc_insertion_point(destructor:lalune.MatchRequest)
  SharedDtor();
}

void MatchRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* MatchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRequest_descriptor_;
}

const MatchRequest& MatchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

MatchRequest* MatchRequest::default_instance_ = NULL;

MatchRequest* MatchRequest::New() const {
  return new MatchRequest;
}

void MatchRequest::Clear() {
  game_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRequest::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.MatchRequest)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 game_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.MatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.MatchRequest)
  return false;
#undef DO_
}

void MatchRequest::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.MatchRequest)
  // required uint32 game_type = 1;
  if (has_game_type()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.MatchRequest)
}

::google_lalune::protobuf::uint8* MatchRequest::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.MatchRequest)
  // required uint32 game_type = 1;
  if (has_game_type()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.MatchRequest)
  return target;
}

int MatchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 game_type = 1;
    if (has_game_type()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRequest::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRequest* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const MatchRequest*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRequest::MergeFrom(const MatchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRequest::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRequest::CopyFrom(const MatchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MatchRequest::Swap(MatchRequest* other) {
  if (other != this) {
    std::swap(game_type_, other->game_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata MatchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = MatchRequest_descriptor_;
  metadata.reflection = MatchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamePlayer::kNameFieldNumber;
const int GamePlayer::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

GamePlayer::GamePlayer()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.GamePlayer)
}

void GamePlayer::InitAsDefaultInstance() {
}

GamePlayer::GamePlayer(const GamePlayer& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.GamePlayer)
}

void GamePlayer::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayer::~GamePlayer() {
  // @@protoc_insertion_point(destructor:lalune.GamePlayer)
  SharedDtor();
}

void GamePlayer::SharedDtor() {
  if (name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GamePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* GamePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayer_descriptor_;
}

const GamePlayer& GamePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

GamePlayer* GamePlayer::default_instance_ = NULL;

GamePlayer* GamePlayer::New() const {
  return new GamePlayer;
}

void GamePlayer::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    player_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePlayer::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.GamePlayer)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required uint32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.GamePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.GamePlayer)
  return false;
#undef DO_
}

void GamePlayer::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.GamePlayer)
  // required string name = 1;
  if (has_name()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 player_id = 2;
  if (has_player_id()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.GamePlayer)
}

::google_lalune::protobuf::uint8* GamePlayer::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.GamePlayer)
  // required string name = 1;
  if (has_name()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 player_id = 2;
  if (has_player_id()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.GamePlayer)
  return target;
}

int GamePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayer::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePlayer* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const GamePlayer*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePlayer::MergeFrom(const GamePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePlayer::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayer::CopyFrom(const GamePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GamePlayer::Swap(GamePlayer* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata GamePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayer_descriptor_;
  metadata.reflection = GamePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchResponse::kGameUuidFieldNumber;
const int MatchResponse::kPlayersFieldNumber;
const int MatchResponse::kGameServerIpFieldNumber;
const int MatchResponse::kGameServerPortFieldNumber;
const int MatchResponse::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

MatchResponse::MatchResponse()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.MatchResponse)
}

void MatchResponse::InitAsDefaultInstance() {
}

MatchResponse::MatchResponse(const MatchResponse& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.MatchResponse)
}

void MatchResponse::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_uuid_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  game_server_ip_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  game_server_port_ = 0u;
  access_token_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchResponse::~MatchResponse() {
  // @@protoc_insertion_point(destructor:lalune.MatchResponse)
  SharedDtor();
}

void MatchResponse::SharedDtor() {
  if (game_uuid_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_uuid_;
  }
  if (game_server_ip_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete game_server_ip_;
  }
  if (access_token_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void MatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* MatchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchResponse_descriptor_;
}

const MatchResponse& MatchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

MatchResponse* MatchResponse::default_instance_ = NULL;

MatchResponse* MatchResponse::New() const {
  return new MatchResponse;
}

void MatchResponse::Clear() {
  if (_has_bits_[0 / 32] & 29) {
    if (has_game_uuid()) {
      if (game_uuid_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_uuid_->clear();
      }
    }
    if (has_game_server_ip()) {
      if (game_server_ip_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        game_server_ip_->clear();
      }
    }
    game_server_port_ = 0u;
    if (has_access_token()) {
      if (access_token_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchResponse::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.MatchResponse)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes game_uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_players;
        break;
      }

      // repeated .lalune.GamePlayer players = 2;
      case 2: {
        if (tag == 18) {
         parse_players:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_players;
        if (input->ExpectTag(26)) goto parse_game_server_ip;
        break;
      }

      // required string game_server_ip = 3;
      case 3: {
        if (tag == 26) {
         parse_game_server_ip:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_server_ip()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_server_ip().data(), this->game_server_ip().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "game_server_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_game_server_port;
        break;
      }

      // required uint32 game_server_port = 4;
      case 4: {
        if (tag == 32) {
         parse_game_server_port:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_port_)));
          set_has_game_server_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_access_token;
        break;
      }

      // required bytes access_token = 5;
      case 5: {
        if (tag == 42) {
         parse_access_token:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_access_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.MatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.MatchResponse)
  return false;
#undef DO_
}

void MatchResponse::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.MatchResponse)
  // required bytes game_uuid = 1;
  if (has_game_uuid()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->game_uuid(), output);
  }

  // repeated .lalune.GamePlayer players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }

  // required string game_server_ip = 3;
  if (has_game_server_ip()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_server_ip().data(), this->game_server_ip().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "game_server_ip");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->game_server_ip(), output);
  }

  // required uint32 game_server_port = 4;
  if (has_game_server_port()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_server_port(), output);
  }

  // required bytes access_token = 5;
  if (has_access_token()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->access_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.MatchResponse)
}

::google_lalune::protobuf::uint8* MatchResponse::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.MatchResponse)
  // required bytes game_uuid = 1;
  if (has_game_uuid()) {
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->game_uuid(), target);
  }

  // repeated .lalune.GamePlayer players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->players(i), target);
  }

  // required string game_server_ip = 3;
  if (has_game_server_ip()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_server_ip().data(), this->game_server_ip().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "game_server_ip");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->game_server_ip(), target);
  }

  // required uint32 game_server_port = 4;
  if (has_game_server_port()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_server_port(), target);
  }

  // required bytes access_token = 5;
  if (has_access_token()) {
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->access_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.MatchResponse)
  return target;
}

int MatchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes game_uuid = 1;
    if (has_game_uuid()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::BytesSize(
          this->game_uuid());
    }

    // required string game_server_ip = 3;
    if (has_game_server_ip()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->game_server_ip());
    }

    // required uint32 game_server_port = 4;
    if (has_game_server_port()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_port());
    }

    // required bytes access_token = 5;
    if (has_access_token()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::BytesSize(
          this->access_token());
    }

  }
  // repeated .lalune.GamePlayer players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchResponse::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchResponse* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const MatchResponse*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchResponse::MergeFrom(const MatchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_uuid()) {
      set_game_uuid(from.game_uuid());
    }
    if (from.has_game_server_ip()) {
      set_game_server_ip(from.game_server_ip());
    }
    if (from.has_game_server_port()) {
      set_game_server_port(from.game_server_port());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchResponse::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchResponse::CopyFrom(const MatchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (!::google_lalune::protobuf::internal::AllAreInitialized(this->players())) return false;
  return true;
}

void MatchResponse::Swap(MatchResponse* other) {
  if (other != this) {
    std::swap(game_uuid_, other->game_uuid_);
    players_.Swap(&other->players_);
    std::swap(game_server_ip_, other->game_server_ip_);
    std::swap(game_server_port_, other->game_server_port_);
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata MatchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = MatchResponse_descriptor_;
  metadata.reflection = MatchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectToGame::kPlayerUidFieldNumber;
const int ConnectToGame::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

ConnectToGame::ConnectToGame()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.ConnectToGame)
}

void ConnectToGame::InitAsDefaultInstance() {
}

ConnectToGame::ConnectToGame(const ConnectToGame& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.ConnectToGame)
}

void ConnectToGame::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_uid_ = 0u;
  access_token_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectToGame::~ConnectToGame() {
  // @@protoc_insertion_point(destructor:lalune.ConnectToGame)
  SharedDtor();
}

void ConnectToGame::SharedDtor() {
  if (access_token_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void ConnectToGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* ConnectToGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectToGame_descriptor_;
}

const ConnectToGame& ConnectToGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

ConnectToGame* ConnectToGame::default_instance_ = NULL;

ConnectToGame* ConnectToGame::New() const {
  return new ConnectToGame;
}

void ConnectToGame::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    player_uid_ = 0u;
    if (has_access_token()) {
      if (access_token_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectToGame::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.ConnectToGame)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
          set_has_player_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_access_token;
        break;
      }

      // required bytes access_token = 2;
      case 2: {
        if (tag == 18) {
         parse_access_token:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_access_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.ConnectToGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.ConnectToGame)
  return false;
#undef DO_
}

void ConnectToGame::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.ConnectToGame)
  // required uint32 player_uid = 1;
  if (has_player_uid()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_uid(), output);
  }

  // required bytes access_token = 2;
  if (has_access_token()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->access_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.ConnectToGame)
}

::google_lalune::protobuf::uint8* ConnectToGame::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.ConnectToGame)
  // required uint32 player_uid = 1;
  if (has_player_uid()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_uid(), target);
  }

  // required bytes access_token = 2;
  if (has_access_token()) {
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->access_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.ConnectToGame)
  return target;
}

int ConnectToGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 player_uid = 1;
    if (has_player_uid()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_uid());
    }

    // required bytes access_token = 2;
    if (has_access_token()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::BytesSize(
          this->access_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectToGame::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectToGame* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const ConnectToGame*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectToGame::MergeFrom(const ConnectToGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_uid()) {
      set_player_uid(from.player_uid());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectToGame::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectToGame::CopyFrom(const ConnectToGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectToGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ConnectToGame::Swap(ConnectToGame* other) {
  if (other != this) {
    std::swap(player_uid_, other->player_uid_);
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata ConnectToGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = ConnectToGame_descriptor_;
  metadata.reflection = ConnectToGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectToGameResponse::kTeamFieldNumber;
#endif  // !_MSC_VER

ConnectToGameResponse::ConnectToGameResponse()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.ConnectToGameResponse)
}

void ConnectToGameResponse::InitAsDefaultInstance() {
}

ConnectToGameResponse::ConnectToGameResponse(const ConnectToGameResponse& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.ConnectToGameResponse)
}

void ConnectToGameResponse::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectToGameResponse::~ConnectToGameResponse() {
  // @@protoc_insertion_point(destructor:lalune.ConnectToGameResponse)
  SharedDtor();
}

void ConnectToGameResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectToGameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* ConnectToGameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectToGameResponse_descriptor_;
}

const ConnectToGameResponse& ConnectToGameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

ConnectToGameResponse* ConnectToGameResponse::default_instance_ = NULL;

ConnectToGameResponse* ConnectToGameResponse::New() const {
  return new ConnectToGameResponse;
}

void ConnectToGameResponse::Clear() {
  team_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectToGameResponse::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.ConnectToGameResponse)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 team = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.ConnectToGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.ConnectToGameResponse)
  return false;
#undef DO_
}

void ConnectToGameResponse::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.ConnectToGameResponse)
  // required uint32 team = 1;
  if (has_team()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.ConnectToGameResponse)
}

::google_lalune::protobuf::uint8* ConnectToGameResponse::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.ConnectToGameResponse)
  // required uint32 team = 1;
  if (has_team()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.ConnectToGameResponse)
  return target;
}

int ConnectToGameResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectToGameResponse::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectToGameResponse* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const ConnectToGameResponse*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectToGameResponse::MergeFrom(const ConnectToGameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectToGameResponse::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectToGameResponse::CopyFrom(const ConnectToGameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectToGameResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnectToGameResponse::Swap(ConnectToGameResponse* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata ConnectToGameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = ConnectToGameResponse_descriptor_;
  metadata.reflection = ConnectToGameResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameStart::kRandSeedFieldNumber;
const int GameStart::kTimePerFrameFieldNumber;
#endif  // !_MSC_VER

GameStart::GameStart()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.GameStart)
}

void GameStart::InitAsDefaultInstance() {
}

GameStart::GameStart(const GameStart& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.GameStart)
}

void GameStart::SharedCtor() {
  _cached_size_ = 0;
  rand_seed_ = 0u;
  time_per_frame_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStart::~GameStart() {
  // @@protoc_insertion_point(destructor:lalune.GameStart)
  SharedDtor();
}

void GameStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* GameStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStart_descriptor_;
}

const GameStart& GameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

GameStart* GameStart::default_instance_ = NULL;

GameStart* GameStart::New() const {
  return new GameStart;
}

void GameStart::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameStart*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rand_seed_, time_per_frame_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameStart::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.GameStart)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rand_seed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_seed_)));
          set_has_rand_seed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_per_frame;
        break;
      }

      // required uint32 time_per_frame = 2;
      case 2: {
        if (tag == 16) {
         parse_time_per_frame:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_per_frame_)));
          set_has_time_per_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.GameStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.GameStart)
  return false;
#undef DO_
}

void GameStart::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.GameStart)
  // required uint32 rand_seed = 1;
  if (has_rand_seed()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rand_seed(), output);
  }

  // required uint32 time_per_frame = 2;
  if (has_time_per_frame()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_per_frame(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.GameStart)
}

::google_lalune::protobuf::uint8* GameStart::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.GameStart)
  // required uint32 rand_seed = 1;
  if (has_rand_seed()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rand_seed(), target);
  }

  // required uint32 time_per_frame = 2;
  if (has_time_per_frame()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_per_frame(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.GameStart)
  return target;
}

int GameStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rand_seed = 1;
    if (has_rand_seed()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_seed());
    }

    // required uint32 time_per_frame = 2;
    if (has_time_per_frame()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_per_frame());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStart::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameStart* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const GameStart*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStart::MergeFrom(const GameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rand_seed()) {
      set_rand_seed(from.rand_seed());
    }
    if (from.has_time_per_frame()) {
      set_time_per_frame(from.time_per_frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameStart::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStart::CopyFrom(const GameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameStart::Swap(GameStart* other) {
  if (other != this) {
    std::swap(rand_seed_, other->rand_seed_);
    std::swap(time_per_frame_, other->time_per_frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata GameStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = GameStart_descriptor_;
  metadata.reflection = GameStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAction::kActionDataFieldNumber;
const int GameAction::kTimeFromGameStartFieldNumber;
const int GameAction::kPlayerUidFieldNumber;
#endif  // !_MSC_VER

GameAction::GameAction()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.GameAction)
}

void GameAction::InitAsDefaultInstance() {
}

GameAction::GameAction(const GameAction& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.GameAction)
}

void GameAction::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  action_data_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  time_from_game_start_ = GOOGLE_ULONGLONG(0);
  player_uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAction::~GameAction() {
  // @@protoc_insertion_point(destructor:lalune.GameAction)
  SharedDtor();
}

void GameAction::SharedDtor() {
  if (action_data_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete action_data_;
  }
  if (this != default_instance_) {
  }
}

void GameAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* GameAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAction_descriptor_;
}

const GameAction& GameAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

GameAction* GameAction::default_instance_ = NULL;

GameAction* GameAction::New() const {
  return new GameAction;
}

void GameAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(time_from_game_start_, player_uid_);
    if (has_action_data()) {
      if (action_data_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        action_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameAction::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.GameAction)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes action_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_action_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_from_game_start;
        break;
      }

      // optional uint64 time_from_game_start = 2;
      case 2: {
        if (tag == 16) {
         parse_time_from_game_start:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint64, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_from_game_start_)));
          set_has_time_from_game_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_uid;
        break;
      }

      // optional uint32 player_uid = 3;
      case 3: {
        if (tag == 24) {
         parse_player_uid:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
          set_has_player_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.GameAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.GameAction)
  return false;
#undef DO_
}

void GameAction::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.GameAction)
  // optional bytes action_data = 1;
  if (has_action_data()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->action_data(), output);
  }

  // optional uint64 time_from_game_start = 2;
  if (has_time_from_game_start()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time_from_game_start(), output);
  }

  // optional uint32 player_uid = 3;
  if (has_player_uid()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.GameAction)
}

::google_lalune::protobuf::uint8* GameAction::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.GameAction)
  // optional bytes action_data = 1;
  if (has_action_data()) {
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->action_data(), target);
  }

  // optional uint64 time_from_game_start = 2;
  if (has_time_from_game_start()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time_from_game_start(), target);
  }

  // optional uint32 player_uid = 3;
  if (has_player_uid()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.GameAction)
  return target;
}

int GameAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes action_data = 1;
    if (has_action_data()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::BytesSize(
          this->action_data());
    }

    // optional uint64 time_from_game_start = 2;
    if (has_time_from_game_start()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_from_game_start());
    }

    // optional uint32 player_uid = 3;
    if (has_player_uid()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameAction::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameAction* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const GameAction*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameAction::MergeFrom(const GameAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action_data()) {
      set_action_data(from.action_data());
    }
    if (from.has_time_from_game_start()) {
      set_time_from_game_start(from.time_from_game_start());
    }
    if (from.has_player_uid()) {
      set_player_uid(from.player_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameAction::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAction::CopyFrom(const GameAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAction::IsInitialized() const {

  return true;
}

void GameAction::Swap(GameAction* other) {
  if (other != this) {
    std::swap(action_data_, other->action_data_);
    std::swap(time_from_game_start_, other->time_from_game_start_);
    std::swap(player_uid_, other->player_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata GameAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = GameAction_descriptor_;
  metadata.reflection = GameAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameActions::kActionsFieldNumber;
#endif  // !_MSC_VER

GameActions::GameActions()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.GameActions)
}

void GameActions::InitAsDefaultInstance() {
}

GameActions::GameActions(const GameActions& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.GameActions)
}

void GameActions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameActions::~GameActions() {
  // @@protoc_insertion_point(destructor:lalune.GameActions)
  SharedDtor();
}

void GameActions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameActions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* GameActions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameActions_descriptor_;
}

const GameActions& GameActions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

GameActions* GameActions::default_instance_ = NULL;

GameActions* GameActions::New() const {
  return new GameActions;
}

void GameActions::Clear() {
  actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameActions::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.GameActions)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lalune.GameAction actions = 1;
      case 1: {
        if (tag == 10) {
         parse_actions:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_actions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.GameActions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.GameActions)
  return false;
#undef DO_
}

void GameActions::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.GameActions)
  // repeated .lalune.GameAction actions = 1;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.GameActions)
}

::google_lalune::protobuf::uint8* GameActions::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.GameActions)
  // repeated .lalune.GameAction actions = 1;
  for (int i = 0; i < this->actions_size(); i++) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.GameActions)
  return target;
}

int GameActions::ByteSize() const {
  int total_size = 0;

  // repeated .lalune.GameAction actions = 1;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameActions::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameActions* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const GameActions*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameActions::MergeFrom(const GameActions& from) {
  GOOGLE_CHECK_NE(&from, this);
  actions_.MergeFrom(from.actions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameActions::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameActions::CopyFrom(const GameActions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameActions::IsInitialized() const {

  return true;
}

void GameActions::Swap(GameActions* other) {
  if (other != this) {
    actions_.Swap(&other->actions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata GameActions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = GameActions_descriptor_;
  metadata.reflection = GameActions_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lalune

// @@protoc_insertion_point(global_scope)
