// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: req_resp.proto

#ifndef PROTOBUF_req_5fresp_2eproto__INCLUDED
#define PROTOBUF_req_5fresp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Version.pb.h"
// @@protoc_insertion_point(includes)

namespace lalune {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_req_5fresp_2eproto();
void protobuf_AssignDesc_req_5fresp_2eproto();
void protobuf_ShutdownFile_req_5fresp_2eproto();

class ResponseHeader;
class CheckVersionRequest;
class CheckVersionResponse;
class RandomNickRequest;
class RandomNickResponce;
class AutoRegisterRequest;
class AutoRegisterResponce;
class LoginRequest;
class LoginResponce;

// ===================================================================

class ResponseHeader : public ::google_lalune::protobuf::Message {
 public:
  ResponseHeader();
  virtual ~ResponseHeader();

  ResponseHeader(const ResponseHeader& from);

  inline ResponseHeader& operator=(const ResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const ResponseHeader& default_instance();

  void Swap(ResponseHeader* other);

  // implements Message ----------------------------------------------

  ResponseHeader* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const ResponseHeader& from);
  void MergeFrom(const ResponseHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1 [default = 0];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google_lalune::protobuf::int32 code() const;
  inline void set_code(::google_lalune::protobuf::int32 value);

  // optional string err_str = 2;
  inline bool has_err_str() const;
  inline void clear_err_str();
  static const int kErrStrFieldNumber = 2;
  inline const ::std::string& err_str() const;
  inline void set_err_str(const ::std::string& value);
  inline void set_err_str(const char* value);
  inline void set_err_str(const char* value, size_t size);
  inline ::std::string* mutable_err_str();
  inline ::std::string* release_err_str();
  inline void set_allocated_err_str(::std::string* err_str);

  // @@protoc_insertion_point(class_scope:lalune.ResponseHeader)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_err_str();
  inline void clear_has_err_str();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* err_str_;
  ::google_lalune::protobuf::int32 code_;
  friend void  protobuf_AddDesc_req_5fresp_2eproto();
  friend void protobuf_AssignDesc_req_5fresp_2eproto();
  friend void protobuf_ShutdownFile_req_5fresp_2eproto();

  void InitAsDefaultInstance();
  static ResponseHeader* default_instance_;
};
// -------------------------------------------------------------------

class CheckVersionRequest : public ::google_lalune::protobuf::Message {
 public:
  CheckVersionRequest();
  virtual ~CheckVersionRequest();

  CheckVersionRequest(const CheckVersionRequest& from);

  inline CheckVersionRequest& operator=(const CheckVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const CheckVersionRequest& default_instance();

  void Swap(CheckVersionRequest* other);

  // implements Message ----------------------------------------------

  CheckVersionRequest* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const CheckVersionRequest& from);
  void MergeFrom(const CheckVersionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string version_name = 1;
  inline bool has_version_name() const;
  inline void clear_version_name();
  static const int kVersionNameFieldNumber = 1;
  inline const ::std::string& version_name() const;
  inline void set_version_name(const ::std::string& value);
  inline void set_version_name(const char* value);
  inline void set_version_name(const char* value, size_t size);
  inline ::std::string* mutable_version_name();
  inline ::std::string* release_version_name();
  inline void set_allocated_version_name(::std::string* version_name);

  // @@protoc_insertion_point(class_scope:lalune.CheckVersionRequest)
 private:
  inline void set_has_version_name();
  inline void clear_has_version_name();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* version_name_;
  friend void  protobuf_AddDesc_req_5fresp_2eproto();
  friend void protobuf_AssignDesc_req_5fresp_2eproto();
  friend void protobuf_ShutdownFile_req_5fresp_2eproto();

  void InitAsDefaultInstance();
  static CheckVersionRequest* default_instance_;
};
// -------------------------------------------------------------------

class CheckVersionResponse : public ::google_lalune::protobuf::Message {
 public:
  CheckVersionResponse();
  virtual ~CheckVersionResponse();

  CheckVersionResponse(const CheckVersionResponse& from);

  inline CheckVersionResponse& operator=(const CheckVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const CheckVersionResponse& default_instance();

  void Swap(CheckVersionResponse* other);

  // implements Message ----------------------------------------------

  CheckVersionResponse* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const CheckVersionResponse& from);
  void MergeFrom(const CheckVersionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .lalune.ResponseHeader header = 4;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 4;
  inline const ::lalune::ResponseHeader& header() const;
  inline ::lalune::ResponseHeader* mutable_header();
  inline ::lalune::ResponseHeader* release_header();
  inline void set_allocated_header(::lalune::ResponseHeader* header);

  // optional string now_version = 3;
  inline bool has_now_version() const;
  inline void clear_now_version();
  static const int kNowVersionFieldNumber = 3;
  inline const ::std::string& now_version() const;
  inline void set_now_version(const ::std::string& value);
  inline void set_now_version(const char* value);
  inline void set_now_version(const char* value, size_t size);
  inline ::std::string* mutable_now_version();
  inline ::std::string* release_now_version();
  inline void set_allocated_now_version(::std::string* now_version);

  // optional string url_prefix = 2;
  inline bool has_url_prefix() const;
  inline void clear_url_prefix();
  static const int kUrlPrefixFieldNumber = 2;
  inline const ::std::string& url_prefix() const;
  inline void set_url_prefix(const ::std::string& value);
  inline void set_url_prefix(const char* value);
  inline void set_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_url_prefix();
  inline ::std::string* release_url_prefix();
  inline void set_allocated_url_prefix(::std::string* url_prefix);

  // repeated .lalune.VersionFile file = 1;
  inline int file_size() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::lalune::VersionFile& file(int index) const;
  inline ::lalune::VersionFile* mutable_file(int index);
  inline ::lalune::VersionFile* add_file();
  inline const ::google_lalune::protobuf::RepeatedPtrField< ::lalune::VersionFile >&
      file() const;
  inline ::google_lalune::protobuf::RepeatedPtrField< ::lalune::VersionFile >*
      mutable_file();

  // @@protoc_insertion_point(class_scope:lalune.CheckVersionResponse)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_now_version();
  inline void clear_has_now_version();
  inline void set_has_url_prefix();
  inline void clear_has_url_prefix();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::lalune::ResponseHeader* header_;
  ::std::string* now_version_;
  ::std::string* url_prefix_;
  ::google_lalune::protobuf::RepeatedPtrField< ::lalune::VersionFile > file_;
  friend void  protobuf_AddDesc_req_5fresp_2eproto();
  friend void protobuf_AssignDesc_req_5fresp_2eproto();
  friend void protobuf_ShutdownFile_req_5fresp_2eproto();

  void InitAsDefaultInstance();
  static CheckVersionResponse* default_instance_;
};
// -------------------------------------------------------------------

class RandomNickRequest : public ::google_lalune::protobuf::Message {
 public:
  RandomNickRequest();
  virtual ~RandomNickRequest();

  RandomNickRequest(const RandomNickRequest& from);

  inline RandomNickRequest& operator=(const RandomNickRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const RandomNickRequest& default_instance();

  void Swap(RandomNickRequest* other);

  // implements Message ----------------------------------------------

  RandomNickRequest* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const RandomNickRequest& from);
  void MergeFrom(const RandomNickRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gender = 1;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 1;
  inline ::google_lalune::protobuf::uint32 gender() const;
  inline void set_gender(::google_lalune::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:lalune.RandomNickRequest)
 private:
  inline void set_has_gender();
  inline void clear_has_gender();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_lalune::protobuf::uint32 gender_;
  friend void  protobuf_AddDesc_req_5fresp_2eproto();
  friend void protobuf_AssignDesc_req_5fresp_2eproto();
  friend void protobuf_ShutdownFile_req_5fresp_2eproto();

  void InitAsDefaultInstance();
  static RandomNickRequest* default_instance_;
};
// -------------------------------------------------------------------

class RandomNickResponce : public ::google_lalune::protobuf::Message {
 public:
  RandomNickResponce();
  virtual ~RandomNickResponce();

  RandomNickResponce(const RandomNickResponce& from);

  inline RandomNickResponce& operator=(const RandomNickResponce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const RandomNickResponce& default_instance();

  void Swap(RandomNickResponce* other);

  // implements Message ----------------------------------------------

  RandomNickResponce* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const RandomNickResponce& from);
  void MergeFrom(const RandomNickResponce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .lalune.ResponseHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::lalune::ResponseHeader& header() const;
  inline ::lalune::ResponseHeader* mutable_header();
  inline ::lalune::ResponseHeader* release_header();
  inline void set_allocated_header(::lalune::ResponseHeader* header);

  // required string nick = 2;
  inline bool has_nick() const;
  inline void clear_nick();
  static const int kNickFieldNumber = 2;
  inline const ::std::string& nick() const;
  inline void set_nick(const ::std::string& value);
  inline void set_nick(const char* value);
  inline void set_nick(const char* value, size_t size);
  inline ::std::string* mutable_nick();
  inline ::std::string* release_nick();
  inline void set_allocated_nick(::std::string* nick);

  // @@protoc_insertion_point(class_scope:lalune.RandomNickResponce)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_nick();
  inline void clear_has_nick();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::lalune::ResponseHeader* header_;
  ::std::string* nick_;
  friend void  protobuf_AddDesc_req_5fresp_2eproto();
  friend void protobuf_AssignDesc_req_5fresp_2eproto();
  friend void protobuf_ShutdownFile_req_5fresp_2eproto();

  void InitAsDefaultInstance();
  static RandomNickResponce* default_instance_;
};
// -------------------------------------------------------------------

class AutoRegisterRequest : public ::google_lalune::protobuf::Message {
 public:
  AutoRegisterRequest();
  virtual ~AutoRegisterRequest();

  AutoRegisterRequest(const AutoRegisterRequest& from);

  inline AutoRegisterRequest& operator=(const AutoRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const AutoRegisterRequest& default_instance();

  void Swap(AutoRegisterRequest* other);

  // implements Message ----------------------------------------------

  AutoRegisterRequest* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const AutoRegisterRequest& from);
  void MergeFrom(const AutoRegisterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string nick = 1;
  inline bool has_nick() const;
  inline void clear_nick();
  static const int kNickFieldNumber = 1;
  inline const ::std::string& nick() const;
  inline void set_nick(const ::std::string& value);
  inline void set_nick(const char* value);
  inline void set_nick(const char* value, size_t size);
  inline ::std::string* mutable_nick();
  inline ::std::string* release_nick();
  inline void set_allocated_nick(::std::string* nick);

  // @@protoc_insertion_point(class_scope:lalune.AutoRegisterRequest)
 private:
  inline void set_has_nick();
  inline void clear_has_nick();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nick_;
  friend void  protobuf_AddDesc_req_5fresp_2eproto();
  friend void protobuf_AssignDesc_req_5fresp_2eproto();
  friend void protobuf_ShutdownFile_req_5fresp_2eproto();

  void InitAsDefaultInstance();
  static AutoRegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class AutoRegisterResponce : public ::google_lalune::protobuf::Message {
 public:
  AutoRegisterResponce();
  virtual ~AutoRegisterResponce();

  AutoRegisterResponce(const AutoRegisterResponce& from);

  inline AutoRegisterResponce& operator=(const AutoRegisterResponce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const AutoRegisterResponce& default_instance();

  void Swap(AutoRegisterResponce* other);

  // implements Message ----------------------------------------------

  AutoRegisterResponce* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const AutoRegisterResponce& from);
  void MergeFrom(const AutoRegisterResponce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .lalune.ResponseHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::lalune::ResponseHeader& header() const;
  inline ::lalune::ResponseHeader* mutable_header();
  inline ::lalune::ResponseHeader* release_header();
  inline void set_allocated_header(::lalune::ResponseHeader* header);

  // optional uint64 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google_lalune::protobuf::uint64 uid() const;
  inline void set_uid(::google_lalune::protobuf::uint64 value);

  // optional string usr = 4;
  inline bool has_usr() const;
  inline void clear_usr();
  static const int kUsrFieldNumber = 4;
  inline const ::std::string& usr() const;
  inline void set_usr(const ::std::string& value);
  inline void set_usr(const char* value);
  inline void set_usr(const char* value, size_t size);
  inline ::std::string* mutable_usr();
  inline ::std::string* release_usr();
  inline void set_allocated_usr(::std::string* usr);

  // optional string pwd = 3;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 3;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:lalune.AutoRegisterResponce)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_usr();
  inline void clear_has_usr();
  inline void set_has_pwd();
  inline void clear_has_pwd();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::lalune::ResponseHeader* header_;
  ::google_lalune::protobuf::uint64 uid_;
  ::std::string* usr_;
  ::std::string* pwd_;
  friend void  protobuf_AddDesc_req_5fresp_2eproto();
  friend void protobuf_AssignDesc_req_5fresp_2eproto();
  friend void protobuf_ShutdownFile_req_5fresp_2eproto();

  void InitAsDefaultInstance();
  static AutoRegisterResponce* default_instance_;
};
// -------------------------------------------------------------------

class LoginRequest : public ::google_lalune::protobuf::Message {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google_lalune::protobuf::uint32 uid() const;
  inline void set_uid(::google_lalune::protobuf::uint32 value);

  // required string pwd = 2;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 2;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:lalune.LoginRequest)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_pwd();
  inline void clear_has_pwd();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pwd_;
  ::google_lalune::protobuf::uint32 uid_;
  friend void  protobuf_AddDesc_req_5fresp_2eproto();
  friend void protobuf_AssignDesc_req_5fresp_2eproto();
  friend void protobuf_ShutdownFile_req_5fresp_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponce : public ::google_lalune::protobuf::Message {
 public:
  LoginResponce();
  virtual ~LoginResponce();

  LoginResponce(const LoginResponce& from);

  inline LoginResponce& operator=(const LoginResponce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const LoginResponce& default_instance();

  void Swap(LoginResponce* other);

  // implements Message ----------------------------------------------

  LoginResponce* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const LoginResponce& from);
  void MergeFrom(const LoginResponce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .lalune.ResponseHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::lalune::ResponseHeader& header() const;
  inline ::lalune::ResponseHeader* mutable_header();
  inline ::lalune::ResponseHeader* release_header();
  inline void set_allocated_header(::lalune::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:lalune.LoginResponce)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::lalune::ResponseHeader* header_;
  friend void  protobuf_AddDesc_req_5fresp_2eproto();
  friend void protobuf_AssignDesc_req_5fresp_2eproto();
  friend void protobuf_ShutdownFile_req_5fresp_2eproto();

  void InitAsDefaultInstance();
  static LoginResponce* default_instance_;
};
// ===================================================================


// ===================================================================

// ResponseHeader

// required int32 code = 1 [default = 0];
inline bool ResponseHeader::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseHeader::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseHeader::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseHeader::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google_lalune::protobuf::int32 ResponseHeader::code() const {
  // @@protoc_insertion_point(field_get:lalune.ResponseHeader.code)
  return code_;
}
inline void ResponseHeader::set_code(::google_lalune::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:lalune.ResponseHeader.code)
}

// optional string err_str = 2;
inline bool ResponseHeader::has_err_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseHeader::set_has_err_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseHeader::clear_has_err_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseHeader::clear_err_str() {
  if (err_str_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_str_->clear();
  }
  clear_has_err_str();
}
inline const ::std::string& ResponseHeader::err_str() const {
  // @@protoc_insertion_point(field_get:lalune.ResponseHeader.err_str)
  return *err_str_;
}
inline void ResponseHeader::set_err_str(const ::std::string& value) {
  set_has_err_str();
  if (err_str_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_str_ = new ::std::string;
  }
  err_str_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.ResponseHeader.err_str)
}
inline void ResponseHeader::set_err_str(const char* value) {
  set_has_err_str();
  if (err_str_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_str_ = new ::std::string;
  }
  err_str_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.ResponseHeader.err_str)
}
inline void ResponseHeader::set_err_str(const char* value, size_t size) {
  set_has_err_str();
  if (err_str_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_str_ = new ::std::string;
  }
  err_str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.ResponseHeader.err_str)
}
inline ::std::string* ResponseHeader::mutable_err_str() {
  set_has_err_str();
  if (err_str_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.ResponseHeader.err_str)
  return err_str_;
}
inline ::std::string* ResponseHeader::release_err_str() {
  clear_has_err_str();
  if (err_str_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_str_;
    err_str_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResponseHeader::set_allocated_err_str(::std::string* err_str) {
  if (err_str_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_str_;
  }
  if (err_str) {
    set_has_err_str();
    err_str_ = err_str;
  } else {
    clear_has_err_str();
    err_str_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.ResponseHeader.err_str)
}

// -------------------------------------------------------------------

// CheckVersionRequest

// required string version_name = 1;
inline bool CheckVersionRequest::has_version_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckVersionRequest::set_has_version_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckVersionRequest::clear_has_version_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckVersionRequest::clear_version_name() {
  if (version_name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_name_->clear();
  }
  clear_has_version_name();
}
inline const ::std::string& CheckVersionRequest::version_name() const {
  // @@protoc_insertion_point(field_get:lalune.CheckVersionRequest.version_name)
  return *version_name_;
}
inline void CheckVersionRequest::set_version_name(const ::std::string& value) {
  set_has_version_name();
  if (version_name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_name_ = new ::std::string;
  }
  version_name_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.CheckVersionRequest.version_name)
}
inline void CheckVersionRequest::set_version_name(const char* value) {
  set_has_version_name();
  if (version_name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_name_ = new ::std::string;
  }
  version_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.CheckVersionRequest.version_name)
}
inline void CheckVersionRequest::set_version_name(const char* value, size_t size) {
  set_has_version_name();
  if (version_name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_name_ = new ::std::string;
  }
  version_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.CheckVersionRequest.version_name)
}
inline ::std::string* CheckVersionRequest::mutable_version_name() {
  set_has_version_name();
  if (version_name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.CheckVersionRequest.version_name)
  return version_name_;
}
inline ::std::string* CheckVersionRequest::release_version_name() {
  clear_has_version_name();
  if (version_name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_name_;
    version_name_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CheckVersionRequest::set_allocated_version_name(::std::string* version_name) {
  if (version_name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_name_;
  }
  if (version_name) {
    set_has_version_name();
    version_name_ = version_name;
  } else {
    clear_has_version_name();
    version_name_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.CheckVersionRequest.version_name)
}

// -------------------------------------------------------------------

// CheckVersionResponse

// required .lalune.ResponseHeader header = 4;
inline bool CheckVersionResponse::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckVersionResponse::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckVersionResponse::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckVersionResponse::clear_header() {
  if (header_ != NULL) header_->::lalune::ResponseHeader::Clear();
  clear_has_header();
}
inline const ::lalune::ResponseHeader& CheckVersionResponse::header() const {
  // @@protoc_insertion_point(field_get:lalune.CheckVersionResponse.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::lalune::ResponseHeader* CheckVersionResponse::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::lalune::ResponseHeader;
  // @@protoc_insertion_point(field_mutable:lalune.CheckVersionResponse.header)
  return header_;
}
inline ::lalune::ResponseHeader* CheckVersionResponse::release_header() {
  clear_has_header();
  ::lalune::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CheckVersionResponse::set_allocated_header(::lalune::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.CheckVersionResponse.header)
}

// optional string now_version = 3;
inline bool CheckVersionResponse::has_now_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckVersionResponse::set_has_now_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckVersionResponse::clear_has_now_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckVersionResponse::clear_now_version() {
  if (now_version_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    now_version_->clear();
  }
  clear_has_now_version();
}
inline const ::std::string& CheckVersionResponse::now_version() const {
  // @@protoc_insertion_point(field_get:lalune.CheckVersionResponse.now_version)
  return *now_version_;
}
inline void CheckVersionResponse::set_now_version(const ::std::string& value) {
  set_has_now_version();
  if (now_version_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    now_version_ = new ::std::string;
  }
  now_version_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.CheckVersionResponse.now_version)
}
inline void CheckVersionResponse::set_now_version(const char* value) {
  set_has_now_version();
  if (now_version_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    now_version_ = new ::std::string;
  }
  now_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.CheckVersionResponse.now_version)
}
inline void CheckVersionResponse::set_now_version(const char* value, size_t size) {
  set_has_now_version();
  if (now_version_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    now_version_ = new ::std::string;
  }
  now_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.CheckVersionResponse.now_version)
}
inline ::std::string* CheckVersionResponse::mutable_now_version() {
  set_has_now_version();
  if (now_version_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    now_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.CheckVersionResponse.now_version)
  return now_version_;
}
inline ::std::string* CheckVersionResponse::release_now_version() {
  clear_has_now_version();
  if (now_version_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = now_version_;
    now_version_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CheckVersionResponse::set_allocated_now_version(::std::string* now_version) {
  if (now_version_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete now_version_;
  }
  if (now_version) {
    set_has_now_version();
    now_version_ = now_version;
  } else {
    clear_has_now_version();
    now_version_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.CheckVersionResponse.now_version)
}

// optional string url_prefix = 2;
inline bool CheckVersionResponse::has_url_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckVersionResponse::set_has_url_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckVersionResponse::clear_has_url_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckVersionResponse::clear_url_prefix() {
  if (url_prefix_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_->clear();
  }
  clear_has_url_prefix();
}
inline const ::std::string& CheckVersionResponse::url_prefix() const {
  // @@protoc_insertion_point(field_get:lalune.CheckVersionResponse.url_prefix)
  return *url_prefix_;
}
inline void CheckVersionResponse::set_url_prefix(const ::std::string& value) {
  set_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.CheckVersionResponse.url_prefix)
}
inline void CheckVersionResponse::set_url_prefix(const char* value) {
  set_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.CheckVersionResponse.url_prefix)
}
inline void CheckVersionResponse::set_url_prefix(const char* value, size_t size) {
  set_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.CheckVersionResponse.url_prefix)
}
inline ::std::string* CheckVersionResponse::mutable_url_prefix() {
  set_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.CheckVersionResponse.url_prefix)
  return url_prefix_;
}
inline ::std::string* CheckVersionResponse::release_url_prefix() {
  clear_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_prefix_;
    url_prefix_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CheckVersionResponse::set_allocated_url_prefix(::std::string* url_prefix) {
  if (url_prefix_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_prefix_;
  }
  if (url_prefix) {
    set_has_url_prefix();
    url_prefix_ = url_prefix;
  } else {
    clear_has_url_prefix();
    url_prefix_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.CheckVersionResponse.url_prefix)
}

// repeated .lalune.VersionFile file = 1;
inline int CheckVersionResponse::file_size() const {
  return file_.size();
}
inline void CheckVersionResponse::clear_file() {
  file_.Clear();
}
inline const ::lalune::VersionFile& CheckVersionResponse::file(int index) const {
  // @@protoc_insertion_point(field_get:lalune.CheckVersionResponse.file)
  return file_.Get(index);
}
inline ::lalune::VersionFile* CheckVersionResponse::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:lalune.CheckVersionResponse.file)
  return file_.Mutable(index);
}
inline ::lalune::VersionFile* CheckVersionResponse::add_file() {
  // @@protoc_insertion_point(field_add:lalune.CheckVersionResponse.file)
  return file_.Add();
}
inline const ::google_lalune::protobuf::RepeatedPtrField< ::lalune::VersionFile >&
CheckVersionResponse::file() const {
  // @@protoc_insertion_point(field_list:lalune.CheckVersionResponse.file)
  return file_;
}
inline ::google_lalune::protobuf::RepeatedPtrField< ::lalune::VersionFile >*
CheckVersionResponse::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:lalune.CheckVersionResponse.file)
  return &file_;
}

// -------------------------------------------------------------------

// RandomNickRequest

// required uint32 gender = 1;
inline bool RandomNickRequest::has_gender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandomNickRequest::set_has_gender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandomNickRequest::clear_has_gender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandomNickRequest::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google_lalune::protobuf::uint32 RandomNickRequest::gender() const {
  // @@protoc_insertion_point(field_get:lalune.RandomNickRequest.gender)
  return gender_;
}
inline void RandomNickRequest::set_gender(::google_lalune::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:lalune.RandomNickRequest.gender)
}

// -------------------------------------------------------------------

// RandomNickResponce

// required .lalune.ResponseHeader header = 1;
inline bool RandomNickResponce::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandomNickResponce::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandomNickResponce::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandomNickResponce::clear_header() {
  if (header_ != NULL) header_->::lalune::ResponseHeader::Clear();
  clear_has_header();
}
inline const ::lalune::ResponseHeader& RandomNickResponce::header() const {
  // @@protoc_insertion_point(field_get:lalune.RandomNickResponce.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::lalune::ResponseHeader* RandomNickResponce::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::lalune::ResponseHeader;
  // @@protoc_insertion_point(field_mutable:lalune.RandomNickResponce.header)
  return header_;
}
inline ::lalune::ResponseHeader* RandomNickResponce::release_header() {
  clear_has_header();
  ::lalune::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void RandomNickResponce::set_allocated_header(::lalune::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.RandomNickResponce.header)
}

// required string nick = 2;
inline bool RandomNickResponce::has_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandomNickResponce::set_has_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandomNickResponce::clear_has_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandomNickResponce::clear_nick() {
  if (nick_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_->clear();
  }
  clear_has_nick();
}
inline const ::std::string& RandomNickResponce::nick() const {
  // @@protoc_insertion_point(field_get:lalune.RandomNickResponce.nick)
  return *nick_;
}
inline void RandomNickResponce::set_nick(const ::std::string& value) {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.RandomNickResponce.nick)
}
inline void RandomNickResponce::set_nick(const char* value) {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.RandomNickResponce.nick)
}
inline void RandomNickResponce::set_nick(const char* value, size_t size) {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.RandomNickResponce.nick)
}
inline ::std::string* RandomNickResponce::mutable_nick() {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.RandomNickResponce.nick)
  return nick_;
}
inline ::std::string* RandomNickResponce::release_nick() {
  clear_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_;
    nick_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RandomNickResponce::set_allocated_nick(::std::string* nick) {
  if (nick_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_;
  }
  if (nick) {
    set_has_nick();
    nick_ = nick;
  } else {
    clear_has_nick();
    nick_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.RandomNickResponce.nick)
}

// -------------------------------------------------------------------

// AutoRegisterRequest

// required string nick = 1;
inline bool AutoRegisterRequest::has_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoRegisterRequest::set_has_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoRegisterRequest::clear_has_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoRegisterRequest::clear_nick() {
  if (nick_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_->clear();
  }
  clear_has_nick();
}
inline const ::std::string& AutoRegisterRequest::nick() const {
  // @@protoc_insertion_point(field_get:lalune.AutoRegisterRequest.nick)
  return *nick_;
}
inline void AutoRegisterRequest::set_nick(const ::std::string& value) {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.AutoRegisterRequest.nick)
}
inline void AutoRegisterRequest::set_nick(const char* value) {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.AutoRegisterRequest.nick)
}
inline void AutoRegisterRequest::set_nick(const char* value, size_t size) {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  nick_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.AutoRegisterRequest.nick)
}
inline ::std::string* AutoRegisterRequest::mutable_nick() {
  set_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.AutoRegisterRequest.nick)
  return nick_;
}
inline ::std::string* AutoRegisterRequest::release_nick() {
  clear_has_nick();
  if (nick_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_;
    nick_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AutoRegisterRequest::set_allocated_nick(::std::string* nick) {
  if (nick_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_;
  }
  if (nick) {
    set_has_nick();
    nick_ = nick;
  } else {
    clear_has_nick();
    nick_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.AutoRegisterRequest.nick)
}

// -------------------------------------------------------------------

// AutoRegisterResponce

// required .lalune.ResponseHeader header = 1;
inline bool AutoRegisterResponce::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoRegisterResponce::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoRegisterResponce::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoRegisterResponce::clear_header() {
  if (header_ != NULL) header_->::lalune::ResponseHeader::Clear();
  clear_has_header();
}
inline const ::lalune::ResponseHeader& AutoRegisterResponce::header() const {
  // @@protoc_insertion_point(field_get:lalune.AutoRegisterResponce.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::lalune::ResponseHeader* AutoRegisterResponce::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::lalune::ResponseHeader;
  // @@protoc_insertion_point(field_mutable:lalune.AutoRegisterResponce.header)
  return header_;
}
inline ::lalune::ResponseHeader* AutoRegisterResponce::release_header() {
  clear_has_header();
  ::lalune::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void AutoRegisterResponce::set_allocated_header(::lalune::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.AutoRegisterResponce.header)
}

// optional uint64 uid = 2;
inline bool AutoRegisterResponce::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutoRegisterResponce::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutoRegisterResponce::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutoRegisterResponce::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google_lalune::protobuf::uint64 AutoRegisterResponce::uid() const {
  // @@protoc_insertion_point(field_get:lalune.AutoRegisterResponce.uid)
  return uid_;
}
inline void AutoRegisterResponce::set_uid(::google_lalune::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:lalune.AutoRegisterResponce.uid)
}

// optional string usr = 4;
inline bool AutoRegisterResponce::has_usr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AutoRegisterResponce::set_has_usr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AutoRegisterResponce::clear_has_usr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AutoRegisterResponce::clear_usr() {
  if (usr_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usr_->clear();
  }
  clear_has_usr();
}
inline const ::std::string& AutoRegisterResponce::usr() const {
  // @@protoc_insertion_point(field_get:lalune.AutoRegisterResponce.usr)
  return *usr_;
}
inline void AutoRegisterResponce::set_usr(const ::std::string& value) {
  set_has_usr();
  if (usr_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usr_ = new ::std::string;
  }
  usr_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.AutoRegisterResponce.usr)
}
inline void AutoRegisterResponce::set_usr(const char* value) {
  set_has_usr();
  if (usr_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usr_ = new ::std::string;
  }
  usr_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.AutoRegisterResponce.usr)
}
inline void AutoRegisterResponce::set_usr(const char* value, size_t size) {
  set_has_usr();
  if (usr_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usr_ = new ::std::string;
  }
  usr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.AutoRegisterResponce.usr)
}
inline ::std::string* AutoRegisterResponce::mutable_usr() {
  set_has_usr();
  if (usr_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.AutoRegisterResponce.usr)
  return usr_;
}
inline ::std::string* AutoRegisterResponce::release_usr() {
  clear_has_usr();
  if (usr_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usr_;
    usr_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AutoRegisterResponce::set_allocated_usr(::std::string* usr) {
  if (usr_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usr_;
  }
  if (usr) {
    set_has_usr();
    usr_ = usr;
  } else {
    clear_has_usr();
    usr_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.AutoRegisterResponce.usr)
}

// optional string pwd = 3;
inline bool AutoRegisterResponce::has_pwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AutoRegisterResponce::set_has_pwd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AutoRegisterResponce::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AutoRegisterResponce::clear_pwd() {
  if (pwd_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& AutoRegisterResponce::pwd() const {
  // @@protoc_insertion_point(field_get:lalune.AutoRegisterResponce.pwd)
  return *pwd_;
}
inline void AutoRegisterResponce::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.AutoRegisterResponce.pwd)
}
inline void AutoRegisterResponce::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.AutoRegisterResponce.pwd)
}
inline void AutoRegisterResponce::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.AutoRegisterResponce.pwd)
}
inline ::std::string* AutoRegisterResponce::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.AutoRegisterResponce.pwd)
  return pwd_;
}
inline ::std::string* AutoRegisterResponce::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AutoRegisterResponce::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.AutoRegisterResponce.pwd)
}

// -------------------------------------------------------------------

// LoginRequest

// required uint32 uid = 1;
inline bool LoginRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google_lalune::protobuf::uint32 LoginRequest::uid() const {
  // @@protoc_insertion_point(field_get:lalune.LoginRequest.uid)
  return uid_;
}
inline void LoginRequest::set_uid(::google_lalune::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:lalune.LoginRequest.uid)
}

// required string pwd = 2;
inline bool LoginRequest::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRequest::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRequest::clear_pwd() {
  if (pwd_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& LoginRequest::pwd() const {
  // @@protoc_insertion_point(field_get:lalune.LoginRequest.pwd)
  return *pwd_;
}
inline void LoginRequest::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.LoginRequest.pwd)
}
inline void LoginRequest::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.LoginRequest.pwd)
}
inline void LoginRequest::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.LoginRequest.pwd)
}
inline ::std::string* LoginRequest::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.LoginRequest.pwd)
  return pwd_;
}
inline ::std::string* LoginRequest::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginRequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.LoginRequest.pwd)
}

// -------------------------------------------------------------------

// LoginResponce

// required .lalune.ResponseHeader header = 1;
inline bool LoginResponce::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResponce::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResponce::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResponce::clear_header() {
  if (header_ != NULL) header_->::lalune::ResponseHeader::Clear();
  clear_has_header();
}
inline const ::lalune::ResponseHeader& LoginResponce::header() const {
  // @@protoc_insertion_point(field_get:lalune.LoginResponce.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::lalune::ResponseHeader* LoginResponce::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::lalune::ResponseHeader;
  // @@protoc_insertion_point(field_mutable:lalune.LoginResponce.header)
  return header_;
}
inline ::lalune::ResponseHeader* LoginResponce::release_header() {
  clear_has_header();
  ::lalune::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void LoginResponce::set_allocated_header(::lalune::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.LoginResponce.header)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lalune

#ifndef SWIG
namespace google_lalune {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_req_5fresp_2eproto__INCLUDED
