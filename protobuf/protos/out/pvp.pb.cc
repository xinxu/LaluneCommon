// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pvp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pvp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace boids {

namespace {

const ::google_lalune::protobuf::Descriptor* UnitData_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  UnitData_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* ForceData_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  ForceData_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* GameInitData_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  GameInitData_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* UserOperation_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  UserOperation_reflection_ = NULL;
const ::google_lalune::protobuf::EnumDescriptor* UserOperation_OperationType_descriptor_ = NULL;
const ::google_lalune::protobuf::Descriptor* UserOperationPackage_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  UserOperationPackage_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* GameMessage_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  GameMessage_reflection_ = NULL;
const ::google_lalune::protobuf::EnumDescriptor* GameMessage_MessageType_descriptor_ = NULL;
const ::google_lalune::protobuf::Descriptor* PvpMessage_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  PvpMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pvp_2eproto() {
  protobuf_AddDesc_pvp_2eproto();
  const ::google_lalune::protobuf::FileDescriptor* file =
    ::google_lalune::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pvp.proto");
  GOOGLE_CHECK(file != NULL);
  UnitData_descriptor_ = file->message_type(0);
  static const int UnitData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, unit_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, unit_level_),
  };
  UnitData_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      UnitData_descriptor_,
      UnitData::default_instance_,
      UnitData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitData, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitData));
  ForceData_descriptor_ = file->message_type(1);
  static const int ForceData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceData, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceData, force_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceData, units_),
  };
  ForceData_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      ForceData_descriptor_,
      ForceData::default_instance_,
      ForceData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceData, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(ForceData));
  GameInitData_descriptor_ = file->message_type(2);
  static const int GameInitData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitData, forces_),
  };
  GameInitData_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      GameInitData_descriptor_,
      GameInitData::default_instance_,
      GameInitData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitData, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(GameInitData));
  UserOperation_descriptor_ = file->message_type(3);
  static const int UserOperation_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperation, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperation, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperation, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperation, unit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperation, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperation, skill_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperation, dir_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperation, dir_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperation, timestamp_),
  };
  UserOperation_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      UserOperation_descriptor_,
      UserOperation::default_instance_,
      UserOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperation, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(UserOperation));
  UserOperation_OperationType_descriptor_ = UserOperation_descriptor_->enum_type(0);
  UserOperationPackage_descriptor_ = file->message_type(4);
  static const int UserOperationPackage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperationPackage, operations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperationPackage, timestamp_),
  };
  UserOperationPackage_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      UserOperationPackage_descriptor_,
      UserOperationPackage::default_instance_,
      UserOperationPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperationPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOperationPackage, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(UserOperationPackage));
  GameMessage_descriptor_ = file->message_type(5);
  static const int GameMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, game_init_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, user_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, user_op_package_),
  };
  GameMessage_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      GameMessage_descriptor_,
      GameMessage::default_instance_,
      GameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMessage, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(GameMessage));
  GameMessage_MessageType_descriptor_ = GameMessage_descriptor_->enum_type(0);
  PvpMessage_descriptor_ = file->message_type(6);
  static const int PvpMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMessage, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMessage, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMessage, seq_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMessage, ack_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMessage, ack_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMessage, data_),
  };
  PvpMessage_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      PvpMessage_descriptor_,
      PvpMessage::default_instance_,
      PvpMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpMessage, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_lalune::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pvp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitData_descriptor_, &UnitData::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForceData_descriptor_, &ForceData::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameInitData_descriptor_, &GameInitData::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserOperation_descriptor_, &UserOperation::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserOperationPackage_descriptor_, &UserOperationPackage::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameMessage_descriptor_, &GameMessage::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpMessage_descriptor_, &PvpMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pvp_2eproto() {
  delete UnitData::default_instance_;
  delete UnitData_reflection_;
  delete ForceData::default_instance_;
  delete ForceData_reflection_;
  delete GameInitData::default_instance_;
  delete GameInitData_reflection_;
  delete UserOperation::default_instance_;
  delete UserOperation_reflection_;
  delete UserOperationPackage::default_instance_;
  delete UserOperationPackage_reflection_;
  delete GameMessage::default_instance_;
  delete GameMessage_reflection_;
  delete PvpMessage::default_instance_;
  delete PvpMessage_reflection_;
}

void protobuf_AddDesc_pvp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_lalune::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpvp.proto\022\005boids\"1\n\010UnitData\022\021\n\tunit_n"
    "ame\030\001 \002(\t\022\022\n\nunit_level\030\002 \002(\r\"N\n\tForceDa"
    "ta\022\017\n\007user_id\030\001 \002(\t\022\020\n\010force_id\030\002 \002(\r\022\036\n"
    "\005units\030\003 \003(\0132\017.boids.UnitData\"0\n\014GameIni"
    "tData\022 \n\006forces\030\001 \003(\0132\020.boids.ForceData\""
    "\225\002\n\rUserOperation\022\017\n\007user_id\030\001 \002(\t\0223\n\007op"
    "_type\030\002 \001(\0162\".boids.UserOperation.Operat"
    "ionType\022\017\n\007game_id\030\003 \001(\r\022\017\n\007unit_id\030\004 \001("
    "\r\022\020\n\010skill_id\030\005 \001(\r\022\023\n\013skill_range\030\t \001(\r"
    "\022\r\n\005dir_x\030\006 \001(\005\022\r\n\005dir_y\030\007 \001(\005\022\021\n\ttimest"
    "amp\030\010 \001(\r\"D\n\rOperationType\022\r\n\tEnterGame\020"
    "\001\022\014\n\010QuitGame\020\002\022\010\n\004Move\020\003\022\014\n\010UseSkill\020\004\""
    "S\n\024UserOperationPackage\022(\n\noperations\030\001 "
    "\003(\0132\024.boids.UserOperation\022\021\n\ttimestamp\030\002"
    " \001(\r\"\242\002\n\013GameMessage\022,\n\004type\030\001 \002(\0162\036.boi"
    "ds.GameMessage.MessageType\022+\n\016game_init_"
    "data\030\002 \001(\0132\023.boids.GameInitData\022%\n\007user_"
    "op\030\003 \001(\0132\024.boids.UserOperation\0224\n\017user_o"
    "p_package\030\004 \001(\0132\033.boids.UserOperationPac"
    "kage\"[\n\013MessageType\022\r\n\tHeartBeat\020\001\022\020\n\014Ga"
    "meInitData\020\002\022\021\n\rUserOperation\020\003\022\030\n\024UserO"
    "perationPackage\020\004\"o\n\nPvpMessage\022\017\n\007versi"
    "on\030\001 \002(\r\022\020\n\010proto_id\030\002 \002(\r\022\016\n\006seq_no\030\003 \002"
    "(\r\022\016\n\006ack_no\030\004 \002(\r\022\020\n\010ack_bits\030\005 \002(\r\022\014\n\004"
    "data\030\006 \001(\014", 970);
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pvp.proto", &protobuf_RegisterTypes);
  UnitData::default_instance_ = new UnitData();
  ForceData::default_instance_ = new ForceData();
  GameInitData::default_instance_ = new GameInitData();
  UserOperation::default_instance_ = new UserOperation();
  UserOperationPackage::default_instance_ = new UserOperationPackage();
  GameMessage::default_instance_ = new GameMessage();
  PvpMessage::default_instance_ = new PvpMessage();
  UnitData::default_instance_->InitAsDefaultInstance();
  ForceData::default_instance_->InitAsDefaultInstance();
  GameInitData::default_instance_->InitAsDefaultInstance();
  UserOperation::default_instance_->InitAsDefaultInstance();
  UserOperationPackage::default_instance_->InitAsDefaultInstance();
  GameMessage::default_instance_->InitAsDefaultInstance();
  PvpMessage::default_instance_->InitAsDefaultInstance();
  ::google_lalune::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pvp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pvp_2eproto {
  StaticDescriptorInitializer_pvp_2eproto() {
    protobuf_AddDesc_pvp_2eproto();
  }
} static_descriptor_initializer_pvp_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UnitData::kUnitNameFieldNumber;
const int UnitData::kUnitLevelFieldNumber;
#endif  // !_MSC_VER

UnitData::UnitData()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boids.UnitData)
}

void UnitData::InitAsDefaultInstance() {
}

UnitData::UnitData(const UnitData& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boids.UnitData)
}

void UnitData::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  unit_name_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitData::~UnitData() {
  // @@protoc_insertion_point(destructor:boids.UnitData)
  SharedDtor();
}

void UnitData::SharedDtor() {
  if (unit_name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unit_name_;
  }
  if (this != default_instance_) {
  }
}

void UnitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* UnitData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitData_descriptor_;
}

const UnitData& UnitData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

UnitData* UnitData::default_instance_ = NULL;

UnitData* UnitData::New() const {
  return new UnitData;
}

void UnitData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_unit_name()) {
      if (unit_name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unit_name_->clear();
      }
    }
    unit_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitData::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boids.UnitData)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string unit_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit_name()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unit_name().data(), this->unit_name().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "unit_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unit_level;
        break;
      }

      // required uint32 unit_level = 2;
      case 2: {
        if (tag == 16) {
         parse_unit_level:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_level_)));
          set_has_unit_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boids.UnitData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boids.UnitData)
  return false;
#undef DO_
}

void UnitData::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boids.UnitData)
  // required string unit_name = 1;
  if (has_unit_name()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit_name().data(), this->unit_name().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "unit_name");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unit_name(), output);
  }

  // required uint32 unit_level = 2;
  if (has_unit_level()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unit_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boids.UnitData)
}

::google_lalune::protobuf::uint8* UnitData::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boids.UnitData)
  // required string unit_name = 1;
  if (has_unit_name()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit_name().data(), this->unit_name().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "unit_name");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unit_name(), target);
  }

  // required uint32 unit_level = 2;
  if (has_unit_level()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unit_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boids.UnitData)
  return target;
}

int UnitData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string unit_name = 1;
    if (has_unit_name()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->unit_name());
    }

    // required uint32 unit_level = 2;
    if (has_unit_level()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitData::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitData* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const UnitData*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitData::MergeFrom(const UnitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_name()) {
      set_unit_name(from.unit_name());
    }
    if (from.has_unit_level()) {
      set_unit_level(from.unit_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitData::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitData::CopyFrom(const UnitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UnitData::Swap(UnitData* other) {
  if (other != this) {
    std::swap(unit_name_, other->unit_name_);
    std::swap(unit_level_, other->unit_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata UnitData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = UnitData_descriptor_;
  metadata.reflection = UnitData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForceData::kUserIdFieldNumber;
const int ForceData::kForceIdFieldNumber;
const int ForceData::kUnitsFieldNumber;
#endif  // !_MSC_VER

ForceData::ForceData()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boids.ForceData)
}

void ForceData::InitAsDefaultInstance() {
}

ForceData::ForceData(const ForceData& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boids.ForceData)
}

void ForceData::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  force_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForceData::~ForceData() {
  // @@protoc_insertion_point(destructor:boids.ForceData)
  SharedDtor();
}

void ForceData::SharedDtor() {
  if (user_id_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (this != default_instance_) {
  }
}

void ForceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* ForceData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceData_descriptor_;
}

const ForceData& ForceData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

ForceData* ForceData::default_instance_ = NULL;

ForceData* ForceData::New() const {
  return new ForceData;
}

void ForceData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_user_id()) {
      if (user_id_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
    force_id_ = 0u;
  }
  units_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForceData::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boids.ForceData)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_force_id;
        break;
      }

      // required uint32 force_id = 2;
      case 2: {
        if (tag == 16) {
         parse_force_id:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &force_id_)));
          set_has_force_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_units;
        break;
      }

      // repeated .boids.UnitData units = 3;
      case 3: {
        if (tag == 26) {
         parse_units:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_units()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_units;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boids.ForceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boids.ForceData)
  return false;
#undef DO_
}

void ForceData::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boids.ForceData)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "user_id");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // required uint32 force_id = 2;
  if (has_force_id()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->force_id(), output);
  }

  // repeated .boids.UnitData units = 3;
  for (int i = 0; i < this->units_size(); i++) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->units(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boids.ForceData)
}

::google_lalune::protobuf::uint8* ForceData::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boids.ForceData)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "user_id");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // required uint32 force_id = 2;
  if (has_force_id()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->force_id(), target);
  }

  // repeated .boids.UnitData units = 3;
  for (int i = 0; i < this->units_size(); i++) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->units(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boids.ForceData)
  return target;
}

int ForceData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // required uint32 force_id = 2;
    if (has_force_id()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->force_id());
    }

  }
  // repeated .boids.UnitData units = 3;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceData::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForceData* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const ForceData*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForceData::MergeFrom(const ForceData& from) {
  GOOGLE_CHECK_NE(&from, this);
  units_.MergeFrom(from.units_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_force_id()) {
      set_force_id(from.force_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForceData::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceData::CopyFrom(const ForceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google_lalune::protobuf::internal::AllAreInitialized(this->units())) return false;
  return true;
}

void ForceData::Swap(ForceData* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(force_id_, other->force_id_);
    units_.Swap(&other->units_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata ForceData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = ForceData_descriptor_;
  metadata.reflection = ForceData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameInitData::kForcesFieldNumber;
#endif  // !_MSC_VER

GameInitData::GameInitData()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boids.GameInitData)
}

void GameInitData::InitAsDefaultInstance() {
}

GameInitData::GameInitData(const GameInitData& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boids.GameInitData)
}

void GameInitData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInitData::~GameInitData() {
  // @@protoc_insertion_point(destructor:boids.GameInitData)
  SharedDtor();
}

void GameInitData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameInitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* GameInitData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInitData_descriptor_;
}

const GameInitData& GameInitData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

GameInitData* GameInitData::default_instance_ = NULL;

GameInitData* GameInitData::New() const {
  return new GameInitData;
}

void GameInitData::Clear() {
  forces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameInitData::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boids.GameInitData)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .boids.ForceData forces = 1;
      case 1: {
        if (tag == 10) {
         parse_forces:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_forces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_forces;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boids.GameInitData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boids.GameInitData)
  return false;
#undef DO_
}

void GameInitData::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boids.GameInitData)
  // repeated .boids.ForceData forces = 1;
  for (int i = 0; i < this->forces_size(); i++) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->forces(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boids.GameInitData)
}

::google_lalune::protobuf::uint8* GameInitData::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boids.GameInitData)
  // repeated .boids.ForceData forces = 1;
  for (int i = 0; i < this->forces_size(); i++) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->forces(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boids.GameInitData)
  return target;
}

int GameInitData::ByteSize() const {
  int total_size = 0;

  // repeated .boids.ForceData forces = 1;
  total_size += 1 * this->forces_size();
  for (int i = 0; i < this->forces_size(); i++) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->forces(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInitData::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameInitData* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const GameInitData*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameInitData::MergeFrom(const GameInitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  forces_.MergeFrom(from.forces_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameInitData::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInitData::CopyFrom(const GameInitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInitData::IsInitialized() const {

  if (!::google_lalune::protobuf::internal::AllAreInitialized(this->forces())) return false;
  return true;
}

void GameInitData::Swap(GameInitData* other) {
  if (other != this) {
    forces_.Swap(&other->forces_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata GameInitData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = GameInitData_descriptor_;
  metadata.reflection = GameInitData_reflection_;
  return metadata;
}


// ===================================================================

const ::google_lalune::protobuf::EnumDescriptor* UserOperation_OperationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOperation_OperationType_descriptor_;
}
bool UserOperation_OperationType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserOperation_OperationType UserOperation::EnterGame;
const UserOperation_OperationType UserOperation::QuitGame;
const UserOperation_OperationType UserOperation::Move;
const UserOperation_OperationType UserOperation::UseSkill;
const UserOperation_OperationType UserOperation::OperationType_MIN;
const UserOperation_OperationType UserOperation::OperationType_MAX;
const int UserOperation::OperationType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserOperation::kUserIdFieldNumber;
const int UserOperation::kOpTypeFieldNumber;
const int UserOperation::kGameIdFieldNumber;
const int UserOperation::kUnitIdFieldNumber;
const int UserOperation::kSkillIdFieldNumber;
const int UserOperation::kSkillRangeFieldNumber;
const int UserOperation::kDirXFieldNumber;
const int UserOperation::kDirYFieldNumber;
const int UserOperation::kTimestampFieldNumber;
#endif  // !_MSC_VER

UserOperation::UserOperation()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boids.UserOperation)
}

void UserOperation::InitAsDefaultInstance() {
}

UserOperation::UserOperation(const UserOperation& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boids.UserOperation)
}

void UserOperation::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  op_type_ = 1;
  game_id_ = 0u;
  unit_id_ = 0u;
  skill_id_ = 0u;
  skill_range_ = 0u;
  dir_x_ = 0;
  dir_y_ = 0;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOperation::~UserOperation() {
  // @@protoc_insertion_point(destructor:boids.UserOperation)
  SharedDtor();
}

void UserOperation::SharedDtor() {
  if (user_id_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (this != default_instance_) {
  }
}

void UserOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* UserOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOperation_descriptor_;
}

const UserOperation& UserOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

UserOperation* UserOperation::default_instance_ = NULL;

UserOperation* UserOperation::New() const {
  return new UserOperation;
}

void UserOperation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserOperation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(game_id_, dir_y_);
    if (has_user_id()) {
      if (user_id_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
    op_type_ = 1;
  }
  timestamp_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserOperation::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boids.UserOperation)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_op_type;
        break;
      }

      // optional .boids.UserOperation.OperationType op_type = 2;
      case 2: {
        if (tag == 16) {
         parse_op_type:
          int value;
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::boids::UserOperation_OperationType_IsValid(value)) {
            set_op_type(static_cast< ::boids::UserOperation_OperationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 3;
      case 3: {
        if (tag == 24) {
         parse_game_id:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unit_id;
        break;
      }

      // optional uint32 unit_id = 4;
      case 4: {
        if (tag == 32) {
         parse_unit_id:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_id_)));
          set_has_unit_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_skill_id;
        break;
      }

      // optional uint32 skill_id = 5;
      case 5: {
        if (tag == 40) {
         parse_skill_id:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dir_x;
        break;
      }

      // optional int32 dir_x = 6;
      case 6: {
        if (tag == 48) {
         parse_dir_x:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_x_)));
          set_has_dir_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dir_y;
        break;
      }

      // optional int32 dir_y = 7;
      case 7: {
        if (tag == 56) {
         parse_dir_y:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_y_)));
          set_has_dir_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 8;
      case 8: {
        if (tag == 64) {
         parse_timestamp:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_skill_range;
        break;
      }

      // optional uint32 skill_range = 9;
      case 9: {
        if (tag == 72) {
         parse_skill_range:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_range_)));
          set_has_skill_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boids.UserOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boids.UserOperation)
  return false;
#undef DO_
}

void UserOperation::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boids.UserOperation)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "user_id");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional .boids.UserOperation.OperationType op_type = 2;
  if (has_op_type()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->op_type(), output);
  }

  // optional uint32 game_id = 3;
  if (has_game_id()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_id(), output);
  }

  // optional uint32 unit_id = 4;
  if (has_unit_id()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unit_id(), output);
  }

  // optional uint32 skill_id = 5;
  if (has_skill_id()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(5, this->skill_id(), output);
  }

  // optional int32 dir_x = 6;
  if (has_dir_x()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32(6, this->dir_x(), output);
  }

  // optional int32 dir_y = 7;
  if (has_dir_y()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32(7, this->dir_y(), output);
  }

  // optional uint32 timestamp = 8;
  if (has_timestamp()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(8, this->timestamp(), output);
  }

  // optional uint32 skill_range = 9;
  if (has_skill_range()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(9, this->skill_range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boids.UserOperation)
}

::google_lalune::protobuf::uint8* UserOperation::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boids.UserOperation)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "user_id");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional .boids.UserOperation.OperationType op_type = 2;
  if (has_op_type()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->op_type(), target);
  }

  // optional uint32 game_id = 3;
  if (has_game_id()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_id(), target);
  }

  // optional uint32 unit_id = 4;
  if (has_unit_id()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->unit_id(), target);
  }

  // optional uint32 skill_id = 5;
  if (has_skill_id()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->skill_id(), target);
  }

  // optional int32 dir_x = 6;
  if (has_dir_x()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dir_x(), target);
  }

  // optional int32 dir_y = 7;
  if (has_dir_y()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dir_y(), target);
  }

  // optional uint32 timestamp = 8;
  if (has_timestamp()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->timestamp(), target);
  }

  // optional uint32 skill_range = 9;
  if (has_skill_range()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->skill_range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boids.UserOperation)
  return target;
}

int UserOperation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional .boids.UserOperation.OperationType op_type = 2;
    if (has_op_type()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional uint32 game_id = 3;
    if (has_game_id()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 unit_id = 4;
    if (has_unit_id()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_id());
    }

    // optional uint32 skill_id = 5;
    if (has_skill_id()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // optional uint32 skill_range = 9;
    if (has_skill_range()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_range());
    }

    // optional int32 dir_x = 6;
    if (has_dir_x()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::Int32Size(
          this->dir_x());
    }

    // optional int32 dir_y = 7;
    if (has_dir_y()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::Int32Size(
          this->dir_y());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 timestamp = 8;
    if (has_timestamp()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOperation::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserOperation* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const UserOperation*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserOperation::MergeFrom(const UserOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_unit_id()) {
      set_unit_id(from.unit_id());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_range()) {
      set_skill_range(from.skill_range());
    }
    if (from.has_dir_x()) {
      set_dir_x(from.dir_x());
    }
    if (from.has_dir_y()) {
      set_dir_y(from.dir_y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserOperation::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOperation::CopyFrom(const UserOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserOperation::Swap(UserOperation* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(op_type_, other->op_type_);
    std::swap(game_id_, other->game_id_);
    std::swap(unit_id_, other->unit_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_range_, other->skill_range_);
    std::swap(dir_x_, other->dir_x_);
    std::swap(dir_y_, other->dir_y_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata UserOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = UserOperation_descriptor_;
  metadata.reflection = UserOperation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserOperationPackage::kOperationsFieldNumber;
const int UserOperationPackage::kTimestampFieldNumber;
#endif  // !_MSC_VER

UserOperationPackage::UserOperationPackage()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boids.UserOperationPackage)
}

void UserOperationPackage::InitAsDefaultInstance() {
}

UserOperationPackage::UserOperationPackage(const UserOperationPackage& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boids.UserOperationPackage)
}

void UserOperationPackage::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOperationPackage::~UserOperationPackage() {
  // @@protoc_insertion_point(destructor:boids.UserOperationPackage)
  SharedDtor();
}

void UserOperationPackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserOperationPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* UserOperationPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOperationPackage_descriptor_;
}

const UserOperationPackage& UserOperationPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

UserOperationPackage* UserOperationPackage::default_instance_ = NULL;

UserOperationPackage* UserOperationPackage::New() const {
  return new UserOperationPackage;
}

void UserOperationPackage::Clear() {
  timestamp_ = 0u;
  operations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserOperationPackage::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boids.UserOperationPackage)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .boids.UserOperation operations = 1;
      case 1: {
        if (tag == 10) {
         parse_operations:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_operations;
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boids.UserOperationPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boids.UserOperationPackage)
  return false;
#undef DO_
}

void UserOperationPackage::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boids.UserOperationPackage)
  // repeated .boids.UserOperation operations = 1;
  for (int i = 0; i < this->operations_size(); i++) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operations(i), output);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boids.UserOperationPackage)
}

::google_lalune::protobuf::uint8* UserOperationPackage::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boids.UserOperationPackage)
  // repeated .boids.UserOperation operations = 1;
  for (int i = 0; i < this->operations_size(); i++) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operations(i), target);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boids.UserOperationPackage)
  return target;
}

int UserOperationPackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  // repeated .boids.UserOperation operations = 1;
  total_size += 1 * this->operations_size();
  for (int i = 0; i < this->operations_size(); i++) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOperationPackage::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserOperationPackage* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const UserOperationPackage*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserOperationPackage::MergeFrom(const UserOperationPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  operations_.MergeFrom(from.operations_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserOperationPackage::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOperationPackage::CopyFrom(const UserOperationPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOperationPackage::IsInitialized() const {

  if (!::google_lalune::protobuf::internal::AllAreInitialized(this->operations())) return false;
  return true;
}

void UserOperationPackage::Swap(UserOperationPackage* other) {
  if (other != this) {
    operations_.Swap(&other->operations_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata UserOperationPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = UserOperationPackage_descriptor_;
  metadata.reflection = UserOperationPackage_reflection_;
  return metadata;
}


// ===================================================================

const ::google_lalune::protobuf::EnumDescriptor* GameMessage_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_MessageType_descriptor_;
}
bool GameMessage_MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameMessage_MessageType GameMessage::HeartBeat;
const GameMessage_MessageType GameMessage::GameInitData;
const GameMessage_MessageType GameMessage::UserOperation;
const GameMessage_MessageType GameMessage::UserOperationPackage;
const GameMessage_MessageType GameMessage::MessageType_MIN;
const GameMessage_MessageType GameMessage::MessageType_MAX;
const int GameMessage::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GameMessage::kTypeFieldNumber;
const int GameMessage::kGameInitDataFieldNumber;
const int GameMessage::kUserOpFieldNumber;
const int GameMessage::kUserOpPackageFieldNumber;
#endif  // !_MSC_VER

GameMessage::GameMessage()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boids.GameMessage)
}

void GameMessage::InitAsDefaultInstance() {
  game_init_data_ = const_cast< ::boids::GameInitData*>(&::boids::GameInitData::default_instance());
  user_op_ = const_cast< ::boids::UserOperation*>(&::boids::UserOperation::default_instance());
  user_op_package_ = const_cast< ::boids::UserOperationPackage*>(&::boids::UserOperationPackage::default_instance());
}

GameMessage::GameMessage(const GameMessage& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boids.GameMessage)
}

void GameMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  game_init_data_ = NULL;
  user_op_ = NULL;
  user_op_package_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMessage::~GameMessage() {
  // @@protoc_insertion_point(destructor:boids.GameMessage)
  SharedDtor();
}

void GameMessage::SharedDtor() {
  if (this != default_instance_) {
    delete game_init_data_;
    delete user_op_;
    delete user_op_package_;
  }
}

void GameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* GameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMessage_descriptor_;
}

const GameMessage& GameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

GameMessage* GameMessage::default_instance_ = NULL;

GameMessage* GameMessage::New() const {
  return new GameMessage;
}

void GameMessage::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 1;
    if (has_game_init_data()) {
      if (game_init_data_ != NULL) game_init_data_->::boids::GameInitData::Clear();
    }
    if (has_user_op()) {
      if (user_op_ != NULL) user_op_->::boids::UserOperation::Clear();
    }
    if (has_user_op_package()) {
      if (user_op_package_ != NULL) user_op_package_->::boids::UserOperationPackage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameMessage::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boids.GameMessage)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .boids.GameMessage.MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::boids::GameMessage_MessageType_IsValid(value)) {
            set_type(static_cast< ::boids::GameMessage_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_game_init_data;
        break;
      }

      // optional .boids.GameInitData game_init_data = 2;
      case 2: {
        if (tag == 18) {
         parse_game_init_data:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_init_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_op;
        break;
      }

      // optional .boids.UserOperation user_op = 3;
      case 3: {
        if (tag == 26) {
         parse_user_op:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_op_package;
        break;
      }

      // optional .boids.UserOperationPackage user_op_package = 4;
      case 4: {
        if (tag == 34) {
         parse_user_op_package:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_op_package()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boids.GameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boids.GameMessage)
  return false;
#undef DO_
}

void GameMessage::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boids.GameMessage)
  // required .boids.GameMessage.MessageType type = 1;
  if (has_type()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .boids.GameInitData game_init_data = 2;
  if (has_game_init_data()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->game_init_data(), output);
  }

  // optional .boids.UserOperation user_op = 3;
  if (has_user_op()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user_op(), output);
  }

  // optional .boids.UserOperationPackage user_op_package = 4;
  if (has_user_op_package()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->user_op_package(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boids.GameMessage)
}

::google_lalune::protobuf::uint8* GameMessage::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boids.GameMessage)
  // required .boids.GameMessage.MessageType type = 1;
  if (has_type()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .boids.GameInitData game_init_data = 2;
  if (has_game_init_data()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->game_init_data(), target);
  }

  // optional .boids.UserOperation user_op = 3;
  if (has_user_op()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user_op(), target);
  }

  // optional .boids.UserOperationPackage user_op_package = 4;
  if (has_user_op_package()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->user_op_package(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boids.GameMessage)
  return target;
}

int GameMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .boids.GameMessage.MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .boids.GameInitData game_init_data = 2;
    if (has_game_init_data()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_init_data());
    }

    // optional .boids.UserOperation user_op = 3;
    if (has_user_op()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_op());
    }

    // optional .boids.UserOperationPackage user_op_package = 4;
    if (has_user_op_package()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_op_package());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMessage::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameMessage* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const GameMessage*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameMessage::MergeFrom(const GameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_game_init_data()) {
      mutable_game_init_data()->::boids::GameInitData::MergeFrom(from.game_init_data());
    }
    if (from.has_user_op()) {
      mutable_user_op()->::boids::UserOperation::MergeFrom(from.user_op());
    }
    if (from.has_user_op_package()) {
      mutable_user_op_package()->::boids::UserOperationPackage::MergeFrom(from.user_op_package());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameMessage::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage::CopyFrom(const GameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_game_init_data()) {
    if (!this->game_init_data().IsInitialized()) return false;
  }
  if (has_user_op()) {
    if (!this->user_op().IsInitialized()) return false;
  }
  if (has_user_op_package()) {
    if (!this->user_op_package().IsInitialized()) return false;
  }
  return true;
}

void GameMessage::Swap(GameMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(game_init_data_, other->game_init_data_);
    std::swap(user_op_, other->user_op_);
    std::swap(user_op_package_, other->user_op_package_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata GameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = GameMessage_descriptor_;
  metadata.reflection = GameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpMessage::kVersionFieldNumber;
const int PvpMessage::kProtoIdFieldNumber;
const int PvpMessage::kSeqNoFieldNumber;
const int PvpMessage::kAckNoFieldNumber;
const int PvpMessage::kAckBitsFieldNumber;
const int PvpMessage::kDataFieldNumber;
#endif  // !_MSC_VER

PvpMessage::PvpMessage()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boids.PvpMessage)
}

void PvpMessage::InitAsDefaultInstance() {
}

PvpMessage::PvpMessage(const PvpMessage& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boids.PvpMessage)
}

void PvpMessage::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  proto_id_ = 0u;
  seq_no_ = 0u;
  ack_no_ = 0u;
  ack_bits_ = 0u;
  data_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpMessage::~PvpMessage() {
  // @@protoc_insertion_point(destructor:boids.PvpMessage)
  SharedDtor();
}

void PvpMessage::SharedDtor() {
  if (data_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PvpMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* PvpMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpMessage_descriptor_;
}

const PvpMessage& PvpMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_2eproto();
  return *default_instance_;
}

PvpMessage* PvpMessage::default_instance_ = NULL;

PvpMessage* PvpMessage::New() const {
  return new PvpMessage;
}

void PvpMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PvpMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(version_, ack_no_);
    ack_bits_ = 0u;
    if (has_data()) {
      if (data_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpMessage::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boids.PvpMessage)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_proto_id;
        break;
      }

      // required uint32 proto_id = 2;
      case 2: {
        if (tag == 16) {
         parse_proto_id:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proto_id_)));
          set_has_proto_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seq_no;
        break;
      }

      // required uint32 seq_no = 3;
      case 3: {
        if (tag == 24) {
         parse_seq_no:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_no_)));
          set_has_seq_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ack_no;
        break;
      }

      // required uint32 ack_no = 4;
      case 4: {
        if (tag == 32) {
         parse_ack_no:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_no_)));
          set_has_ack_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ack_bits;
        break;
      }

      // required uint32 ack_bits = 5;
      case 5: {
        if (tag == 40) {
         parse_ack_bits:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::uint32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_bits_)));
          set_has_ack_bits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boids.PvpMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boids.PvpMessage)
  return false;
#undef DO_
}

void PvpMessage::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boids.PvpMessage)
  // required uint32 version = 1;
  if (has_version()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required uint32 proto_id = 2;
  if (has_proto_id()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(2, this->proto_id(), output);
  }

  // required uint32 seq_no = 3;
  if (has_seq_no()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seq_no(), output);
  }

  // required uint32 ack_no = 4;
  if (has_ack_no()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ack_no(), output);
  }

  // required uint32 ack_bits = 5;
  if (has_ack_bits()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ack_bits(), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boids.PvpMessage)
}

::google_lalune::protobuf::uint8* PvpMessage::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boids.PvpMessage)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required uint32 proto_id = 2;
  if (has_proto_id()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->proto_id(), target);
  }

  // required uint32 seq_no = 3;
  if (has_seq_no()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seq_no(), target);
  }

  // required uint32 ack_no = 4;
  if (has_ack_no()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ack_no(), target);
  }

  // required uint32 ack_bits = 5;
  if (has_ack_bits()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ack_bits(), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boids.PvpMessage)
  return target;
}

int PvpMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required uint32 proto_id = 2;
    if (has_proto_id()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->proto_id());
    }

    // required uint32 seq_no = 3;
    if (has_seq_no()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_no());
    }

    // required uint32 ack_no = 4;
    if (has_ack_no()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_no());
    }

    // required uint32 ack_bits = 5;
    if (has_ack_bits()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_bits());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpMessage::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpMessage* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const PvpMessage*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpMessage::MergeFrom(const PvpMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_seq_no()) {
      set_seq_no(from.seq_no());
    }
    if (from.has_ack_no()) {
      set_ack_no(from.ack_no());
    }
    if (from.has_ack_bits()) {
      set_ack_bits(from.ack_bits());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpMessage::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpMessage::CopyFrom(const PvpMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PvpMessage::Swap(PvpMessage* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(proto_id_, other->proto_id_);
    std::swap(seq_no_, other->seq_no_);
    std::swap(ack_no_, other->ack_no_);
    std::swap(ack_bits_, other->ack_bits_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata PvpMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = PvpMessage_descriptor_;
  metadata.reflection = PvpMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace boids

// @@protoc_insertion_point(global_scope)
