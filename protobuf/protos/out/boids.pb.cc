// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: boids.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "boids.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace boids {

namespace {

const ::google_lalune::protobuf::Descriptor* BoidsMessageHeader_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  BoidsMessageHeader_reflection_ = NULL;
const ::google_lalune::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_boids_2eproto() {
  protobuf_AddDesc_boids_2eproto();
  const ::google_lalune::protobuf::FileDescriptor* file =
    ::google_lalune::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "boids.proto");
  GOOGLE_CHECK(file != NULL);
  BoidsMessageHeader_descriptor_ = file->message_type(0);
  static const int BoidsMessageHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoidsMessageHeader, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoidsMessageHeader, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoidsMessageHeader, data_),
  };
  BoidsMessageHeader_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      BoidsMessageHeader_descriptor_,
      BoidsMessageHeader::default_instance_,
      BoidsMessageHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoidsMessageHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoidsMessageHeader, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(BoidsMessageHeader));
  MessageType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_lalune::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_boids_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoidsMessageHeader_descriptor_, &BoidsMessageHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_boids_2eproto() {
  delete BoidsMessageHeader::default_instance_;
  delete BoidsMessageHeader_reflection_;
}

void protobuf_AddDesc_boids_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_lalune::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013boids.proto\022\005boids\"V\n\022BoidsMessageHead"
    "er\022 \n\004type\030\001 \002(\0162\022.boids.MessageType\022\020\n\005"
    "error\030\002 \002(\005:\0010\022\014\n\004data\030\003 \001(\014*\345\001\n\013Message"
    "Type\022\026\n\022AUTO_MATCH_REQUEST\020\002\022\027\n\023AUTO_MAT"
    "CH_RESPONSE\020\003\022\"\n\036PVP_SERVER_CREATE_GAME_"
    "REQUEST\020\004\022#\n\037PVP_SERVER_CREATE_GAME_RESP"
    "ONSE\020\005\022\037\n\033PVP_SERVER_REGISTER_REQUEST\020\006\022"
    " \n\034PVP_SERVER_REGISTER_RESPONSE\020\007\022\031\n\025PVP"
    "_SERVER_HEART_BEAT\020\001", 340);
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "boids.proto", &protobuf_RegisterTypes);
  BoidsMessageHeader::default_instance_ = new BoidsMessageHeader();
  BoidsMessageHeader::default_instance_->InitAsDefaultInstance();
  ::google_lalune::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_boids_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_boids_2eproto {
  StaticDescriptorInitializer_boids_2eproto() {
    protobuf_AddDesc_boids_2eproto();
  }
} static_descriptor_initializer_boids_2eproto_;
const ::google_lalune::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BoidsMessageHeader::kTypeFieldNumber;
const int BoidsMessageHeader::kErrorFieldNumber;
const int BoidsMessageHeader::kDataFieldNumber;
#endif  // !_MSC_VER

BoidsMessageHeader::BoidsMessageHeader()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:boids.BoidsMessageHeader)
}

void BoidsMessageHeader::InitAsDefaultInstance() {
}

BoidsMessageHeader::BoidsMessageHeader(const BoidsMessageHeader& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:boids.BoidsMessageHeader)
}

void BoidsMessageHeader::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 2;
  error_ = 0;
  data_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoidsMessageHeader::~BoidsMessageHeader() {
  // @@protoc_insertion_point(destructor:boids.BoidsMessageHeader)
  SharedDtor();
}

void BoidsMessageHeader::SharedDtor() {
  if (data_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void BoidsMessageHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* BoidsMessageHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoidsMessageHeader_descriptor_;
}

const BoidsMessageHeader& BoidsMessageHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boids_2eproto();
  return *default_instance_;
}

BoidsMessageHeader* BoidsMessageHeader::default_instance_ = NULL;

BoidsMessageHeader* BoidsMessageHeader::New() const {
  return new BoidsMessageHeader;
}

void BoidsMessageHeader::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 2;
    error_ = 0;
    if (has_data()) {
      if (data_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoidsMessageHeader::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:boids.BoidsMessageHeader)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .boids.MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::boids::MessageType_IsValid(value)) {
            set_type(static_cast< ::boids::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // required int32 error = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_error:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:boids.BoidsMessageHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:boids.BoidsMessageHeader)
  return false;
#undef DO_
}

void BoidsMessageHeader::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:boids.BoidsMessageHeader)
  // required .boids.MessageType type = 1;
  if (has_type()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 error = 2 [default = 0];
  if (has_error()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32(2, this->error(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:boids.BoidsMessageHeader)
}

::google_lalune::protobuf::uint8* BoidsMessageHeader::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:boids.BoidsMessageHeader)
  // required .boids.MessageType type = 1;
  if (has_type()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 error = 2 [default = 0];
  if (has_error()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:boids.BoidsMessageHeader)
  return target;
}

int BoidsMessageHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .boids.MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 error = 2 [default = 0];
    if (has_error()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoidsMessageHeader::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoidsMessageHeader* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const BoidsMessageHeader*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoidsMessageHeader::MergeFrom(const BoidsMessageHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoidsMessageHeader::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoidsMessageHeader::CopyFrom(const BoidsMessageHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoidsMessageHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BoidsMessageHeader::Swap(BoidsMessageHeader* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(error_, other->error_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata BoidsMessageHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = BoidsMessageHeader_descriptor_;
  metadata.reflection = BoidsMessageHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace boids

// @@protoc_insertion_point(global_scope)
