// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Version.proto

#ifndef PROTOBUF_Version_2eproto__INCLUDED
#define PROTOBUF_Version_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lalune {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Version_2eproto();
void protobuf_AssignDesc_Version_2eproto();
void protobuf_ShutdownFile_Version_2eproto();

class CheckVersion;
class VersionFile;
class CheckVersionResult;
class AddVersion;

// ===================================================================

class CheckVersion : public ::google_lalune::protobuf::Message {
 public:
  CheckVersion();
  virtual ~CheckVersion();

  CheckVersion(const CheckVersion& from);

  inline CheckVersion& operator=(const CheckVersion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const CheckVersion& default_instance();

  void Swap(CheckVersion* other);

  // implements Message ----------------------------------------------

  CheckVersion* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const CheckVersion& from);
  void MergeFrom(const CheckVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string version_name = 1;
  inline bool has_version_name() const;
  inline void clear_version_name();
  static const int kVersionNameFieldNumber = 1;
  inline const ::std::string& version_name() const;
  inline void set_version_name(const ::std::string& value);
  inline void set_version_name(const char* value);
  inline void set_version_name(const char* value, size_t size);
  inline ::std::string* mutable_version_name();
  inline ::std::string* release_version_name();
  inline void set_allocated_version_name(::std::string* version_name);

  // @@protoc_insertion_point(class_scope:lalune.CheckVersion)
 private:
  inline void set_has_version_name();
  inline void clear_has_version_name();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* version_name_;
  friend void  protobuf_AddDesc_Version_2eproto();
  friend void protobuf_AssignDesc_Version_2eproto();
  friend void protobuf_ShutdownFile_Version_2eproto();

  void InitAsDefaultInstance();
  static CheckVersion* default_instance_;
};
// -------------------------------------------------------------------

class VersionFile : public ::google_lalune::protobuf::Message {
 public:
  VersionFile();
  virtual ~VersionFile();

  VersionFile(const VersionFile& from);

  inline VersionFile& operator=(const VersionFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const VersionFile& default_instance();

  void Swap(VersionFile* other);

  // implements Message ----------------------------------------------

  VersionFile* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const VersionFile& from);
  void MergeFrom(const VersionFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url_prefix = 2;
  inline bool has_url_prefix() const;
  inline void clear_url_prefix();
  static const int kUrlPrefixFieldNumber = 2;
  inline const ::std::string& url_prefix() const;
  inline void set_url_prefix(const ::std::string& value);
  inline void set_url_prefix(const char* value);
  inline void set_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_url_prefix();
  inline ::std::string* release_url_prefix();
  inline void set_allocated_url_prefix(::std::string* url_prefix);

  // required string file_path = 1;
  inline bool has_file_path() const;
  inline void clear_file_path();
  static const int kFilePathFieldNumber = 1;
  inline const ::std::string& file_path() const;
  inline void set_file_path(const ::std::string& value);
  inline void set_file_path(const char* value);
  inline void set_file_path(const char* value, size_t size);
  inline ::std::string* mutable_file_path();
  inline ::std::string* release_file_path();
  inline void set_allocated_file_path(::std::string* file_path);

  // @@protoc_insertion_point(class_scope:lalune.VersionFile)
 private:
  inline void set_has_url_prefix();
  inline void clear_has_url_prefix();
  inline void set_has_file_path();
  inline void clear_has_file_path();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* url_prefix_;
  ::std::string* file_path_;
  friend void  protobuf_AddDesc_Version_2eproto();
  friend void protobuf_AssignDesc_Version_2eproto();
  friend void protobuf_ShutdownFile_Version_2eproto();

  void InitAsDefaultInstance();
  static VersionFile* default_instance_;
};
// -------------------------------------------------------------------

class CheckVersionResult : public ::google_lalune::protobuf::Message {
 public:
  CheckVersionResult();
  virtual ~CheckVersionResult();

  CheckVersionResult(const CheckVersionResult& from);

  inline CheckVersionResult& operator=(const CheckVersionResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const CheckVersionResult& default_instance();

  void Swap(CheckVersionResult* other);

  // implements Message ----------------------------------------------

  CheckVersionResult* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const CheckVersionResult& from);
  void MergeFrom(const CheckVersionResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string now_version = 3;
  inline bool has_now_version() const;
  inline void clear_now_version();
  static const int kNowVersionFieldNumber = 3;
  inline const ::std::string& now_version() const;
  inline void set_now_version(const ::std::string& value);
  inline void set_now_version(const char* value);
  inline void set_now_version(const char* value, size_t size);
  inline ::std::string* mutable_now_version();
  inline ::std::string* release_now_version();
  inline void set_allocated_now_version(::std::string* now_version);

  // optional string url_prefix = 2;
  inline bool has_url_prefix() const;
  inline void clear_url_prefix();
  static const int kUrlPrefixFieldNumber = 2;
  inline const ::std::string& url_prefix() const;
  inline void set_url_prefix(const ::std::string& value);
  inline void set_url_prefix(const char* value);
  inline void set_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_url_prefix();
  inline ::std::string* release_url_prefix();
  inline void set_allocated_url_prefix(::std::string* url_prefix);

  // repeated .lalune.VersionFile file = 1;
  inline int file_size() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::lalune::VersionFile& file(int index) const;
  inline ::lalune::VersionFile* mutable_file(int index);
  inline ::lalune::VersionFile* add_file();
  inline const ::google_lalune::protobuf::RepeatedPtrField< ::lalune::VersionFile >&
      file() const;
  inline ::google_lalune::protobuf::RepeatedPtrField< ::lalune::VersionFile >*
      mutable_file();

  // @@protoc_insertion_point(class_scope:lalune.CheckVersionResult)
 private:
  inline void set_has_now_version();
  inline void clear_has_now_version();
  inline void set_has_url_prefix();
  inline void clear_has_url_prefix();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* now_version_;
  ::std::string* url_prefix_;
  ::google_lalune::protobuf::RepeatedPtrField< ::lalune::VersionFile > file_;
  friend void  protobuf_AddDesc_Version_2eproto();
  friend void protobuf_AssignDesc_Version_2eproto();
  friend void protobuf_ShutdownFile_Version_2eproto();

  void InitAsDefaultInstance();
  static CheckVersionResult* default_instance_;
};
// -------------------------------------------------------------------

class AddVersion : public ::google_lalune::protobuf::Message {
 public:
  AddVersion();
  virtual ~AddVersion();

  AddVersion(const AddVersion& from);

  inline AddVersion& operator=(const AddVersion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_lalune::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_lalune::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_lalune::protobuf::Descriptor* descriptor();
  static const AddVersion& default_instance();

  void Swap(AddVersion* other);

  // implements Message ----------------------------------------------

  AddVersion* New() const;
  void CopyFrom(const ::google_lalune::protobuf::Message& from);
  void MergeFrom(const ::google_lalune::protobuf::Message& from);
  void CopyFrom(const AddVersion& from);
  void MergeFrom(const AddVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_lalune::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_lalune::protobuf::io::CodedOutputStream* output) const;
  ::google_lalune::protobuf::uint8* SerializeWithCachedSizesToArray(::google_lalune::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_lalune::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string version_from = 2;
  inline bool has_version_from() const;
  inline void clear_version_from();
  static const int kVersionFromFieldNumber = 2;
  inline const ::std::string& version_from() const;
  inline void set_version_from(const ::std::string& value);
  inline void set_version_from(const char* value);
  inline void set_version_from(const char* value, size_t size);
  inline ::std::string* mutable_version_from();
  inline ::std::string* release_version_from();
  inline void set_allocated_version_from(::std::string* version_from);

  // required string version_to = 3;
  inline bool has_version_to() const;
  inline void clear_version_to();
  static const int kVersionToFieldNumber = 3;
  inline const ::std::string& version_to() const;
  inline void set_version_to(const ::std::string& value);
  inline void set_version_to(const char* value);
  inline void set_version_to(const char* value, size_t size);
  inline ::std::string* mutable_version_to();
  inline ::std::string* release_version_to();
  inline void set_allocated_version_to(::std::string* version_to);

  // optional uint32 flag_mask = 5;
  inline bool has_flag_mask() const;
  inline void clear_flag_mask();
  static const int kFlagMaskFieldNumber = 5;
  inline ::google_lalune::protobuf::uint32 flag_mask() const;
  inline void set_flag_mask(::google_lalune::protobuf::uint32 value);

  // optional string url_prefix = 4;
  inline bool has_url_prefix() const;
  inline void clear_url_prefix();
  static const int kUrlPrefixFieldNumber = 4;
  inline const ::std::string& url_prefix() const;
  inline void set_url_prefix(const ::std::string& value);
  inline void set_url_prefix(const char* value);
  inline void set_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_url_prefix();
  inline ::std::string* release_url_prefix();
  inline void set_allocated_url_prefix(::std::string* url_prefix);

  // repeated .lalune.VersionFile file = 1;
  inline int file_size() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::lalune::VersionFile& file(int index) const;
  inline ::lalune::VersionFile* mutable_file(int index);
  inline ::lalune::VersionFile* add_file();
  inline const ::google_lalune::protobuf::RepeatedPtrField< ::lalune::VersionFile >&
      file() const;
  inline ::google_lalune::protobuf::RepeatedPtrField< ::lalune::VersionFile >*
      mutable_file();

  // @@protoc_insertion_point(class_scope:lalune.AddVersion)
 private:
  inline void set_has_version_from();
  inline void clear_has_version_from();
  inline void set_has_version_to();
  inline void clear_has_version_to();
  inline void set_has_flag_mask();
  inline void clear_has_flag_mask();
  inline void set_has_url_prefix();
  inline void clear_has_url_prefix();

  ::google_lalune::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_lalune::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* version_from_;
  ::std::string* version_to_;
  ::std::string* url_prefix_;
  ::google_lalune::protobuf::RepeatedPtrField< ::lalune::VersionFile > file_;
  ::google_lalune::protobuf::uint32 flag_mask_;
  friend void  protobuf_AddDesc_Version_2eproto();
  friend void protobuf_AssignDesc_Version_2eproto();
  friend void protobuf_ShutdownFile_Version_2eproto();

  void InitAsDefaultInstance();
  static AddVersion* default_instance_;
};
// ===================================================================


// ===================================================================

// CheckVersion

// required string version_name = 1;
inline bool CheckVersion::has_version_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckVersion::set_has_version_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckVersion::clear_has_version_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckVersion::clear_version_name() {
  if (version_name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_name_->clear();
  }
  clear_has_version_name();
}
inline const ::std::string& CheckVersion::version_name() const {
  // @@protoc_insertion_point(field_get:lalune.CheckVersion.version_name)
  return *version_name_;
}
inline void CheckVersion::set_version_name(const ::std::string& value) {
  set_has_version_name();
  if (version_name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_name_ = new ::std::string;
  }
  version_name_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.CheckVersion.version_name)
}
inline void CheckVersion::set_version_name(const char* value) {
  set_has_version_name();
  if (version_name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_name_ = new ::std::string;
  }
  version_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.CheckVersion.version_name)
}
inline void CheckVersion::set_version_name(const char* value, size_t size) {
  set_has_version_name();
  if (version_name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_name_ = new ::std::string;
  }
  version_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.CheckVersion.version_name)
}
inline ::std::string* CheckVersion::mutable_version_name() {
  set_has_version_name();
  if (version_name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.CheckVersion.version_name)
  return version_name_;
}
inline ::std::string* CheckVersion::release_version_name() {
  clear_has_version_name();
  if (version_name_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_name_;
    version_name_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CheckVersion::set_allocated_version_name(::std::string* version_name) {
  if (version_name_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_name_;
  }
  if (version_name) {
    set_has_version_name();
    version_name_ = version_name;
  } else {
    clear_has_version_name();
    version_name_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.CheckVersion.version_name)
}

// -------------------------------------------------------------------

// VersionFile

// optional string url_prefix = 2;
inline bool VersionFile::has_url_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VersionFile::set_has_url_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VersionFile::clear_has_url_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VersionFile::clear_url_prefix() {
  if (url_prefix_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_->clear();
  }
  clear_has_url_prefix();
}
inline const ::std::string& VersionFile::url_prefix() const {
  // @@protoc_insertion_point(field_get:lalune.VersionFile.url_prefix)
  return *url_prefix_;
}
inline void VersionFile::set_url_prefix(const ::std::string& value) {
  set_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.VersionFile.url_prefix)
}
inline void VersionFile::set_url_prefix(const char* value) {
  set_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.VersionFile.url_prefix)
}
inline void VersionFile::set_url_prefix(const char* value, size_t size) {
  set_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.VersionFile.url_prefix)
}
inline ::std::string* VersionFile::mutable_url_prefix() {
  set_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.VersionFile.url_prefix)
  return url_prefix_;
}
inline ::std::string* VersionFile::release_url_prefix() {
  clear_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_prefix_;
    url_prefix_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VersionFile::set_allocated_url_prefix(::std::string* url_prefix) {
  if (url_prefix_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_prefix_;
  }
  if (url_prefix) {
    set_has_url_prefix();
    url_prefix_ = url_prefix;
  } else {
    clear_has_url_prefix();
    url_prefix_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.VersionFile.url_prefix)
}

// required string file_path = 1;
inline bool VersionFile::has_file_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VersionFile::set_has_file_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VersionFile::clear_has_file_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VersionFile::clear_file_path() {
  if (file_path_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_path_->clear();
  }
  clear_has_file_path();
}
inline const ::std::string& VersionFile::file_path() const {
  // @@protoc_insertion_point(field_get:lalune.VersionFile.file_path)
  return *file_path_;
}
inline void VersionFile::set_file_path(const ::std::string& value) {
  set_has_file_path();
  if (file_path_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.VersionFile.file_path)
}
inline void VersionFile::set_file_path(const char* value) {
  set_has_file_path();
  if (file_path_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.VersionFile.file_path)
}
inline void VersionFile::set_file_path(const char* value, size_t size) {
  set_has_file_path();
  if (file_path_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.VersionFile.file_path)
}
inline ::std::string* VersionFile::mutable_file_path() {
  set_has_file_path();
  if (file_path_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.VersionFile.file_path)
  return file_path_;
}
inline ::std::string* VersionFile::release_file_path() {
  clear_has_file_path();
  if (file_path_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_path_;
    file_path_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VersionFile::set_allocated_file_path(::std::string* file_path) {
  if (file_path_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_path_;
  }
  if (file_path) {
    set_has_file_path();
    file_path_ = file_path;
  } else {
    clear_has_file_path();
    file_path_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.VersionFile.file_path)
}

// -------------------------------------------------------------------

// CheckVersionResult

// optional string now_version = 3;
inline bool CheckVersionResult::has_now_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckVersionResult::set_has_now_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckVersionResult::clear_has_now_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckVersionResult::clear_now_version() {
  if (now_version_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    now_version_->clear();
  }
  clear_has_now_version();
}
inline const ::std::string& CheckVersionResult::now_version() const {
  // @@protoc_insertion_point(field_get:lalune.CheckVersionResult.now_version)
  return *now_version_;
}
inline void CheckVersionResult::set_now_version(const ::std::string& value) {
  set_has_now_version();
  if (now_version_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    now_version_ = new ::std::string;
  }
  now_version_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.CheckVersionResult.now_version)
}
inline void CheckVersionResult::set_now_version(const char* value) {
  set_has_now_version();
  if (now_version_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    now_version_ = new ::std::string;
  }
  now_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.CheckVersionResult.now_version)
}
inline void CheckVersionResult::set_now_version(const char* value, size_t size) {
  set_has_now_version();
  if (now_version_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    now_version_ = new ::std::string;
  }
  now_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.CheckVersionResult.now_version)
}
inline ::std::string* CheckVersionResult::mutable_now_version() {
  set_has_now_version();
  if (now_version_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    now_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.CheckVersionResult.now_version)
  return now_version_;
}
inline ::std::string* CheckVersionResult::release_now_version() {
  clear_has_now_version();
  if (now_version_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = now_version_;
    now_version_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CheckVersionResult::set_allocated_now_version(::std::string* now_version) {
  if (now_version_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete now_version_;
  }
  if (now_version) {
    set_has_now_version();
    now_version_ = now_version;
  } else {
    clear_has_now_version();
    now_version_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.CheckVersionResult.now_version)
}

// optional string url_prefix = 2;
inline bool CheckVersionResult::has_url_prefix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckVersionResult::set_has_url_prefix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckVersionResult::clear_has_url_prefix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckVersionResult::clear_url_prefix() {
  if (url_prefix_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_->clear();
  }
  clear_has_url_prefix();
}
inline const ::std::string& CheckVersionResult::url_prefix() const {
  // @@protoc_insertion_point(field_get:lalune.CheckVersionResult.url_prefix)
  return *url_prefix_;
}
inline void CheckVersionResult::set_url_prefix(const ::std::string& value) {
  set_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.CheckVersionResult.url_prefix)
}
inline void CheckVersionResult::set_url_prefix(const char* value) {
  set_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.CheckVersionResult.url_prefix)
}
inline void CheckVersionResult::set_url_prefix(const char* value, size_t size) {
  set_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.CheckVersionResult.url_prefix)
}
inline ::std::string* CheckVersionResult::mutable_url_prefix() {
  set_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.CheckVersionResult.url_prefix)
  return url_prefix_;
}
inline ::std::string* CheckVersionResult::release_url_prefix() {
  clear_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_prefix_;
    url_prefix_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CheckVersionResult::set_allocated_url_prefix(::std::string* url_prefix) {
  if (url_prefix_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_prefix_;
  }
  if (url_prefix) {
    set_has_url_prefix();
    url_prefix_ = url_prefix;
  } else {
    clear_has_url_prefix();
    url_prefix_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.CheckVersionResult.url_prefix)
}

// repeated .lalune.VersionFile file = 1;
inline int CheckVersionResult::file_size() const {
  return file_.size();
}
inline void CheckVersionResult::clear_file() {
  file_.Clear();
}
inline const ::lalune::VersionFile& CheckVersionResult::file(int index) const {
  // @@protoc_insertion_point(field_get:lalune.CheckVersionResult.file)
  return file_.Get(index);
}
inline ::lalune::VersionFile* CheckVersionResult::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:lalune.CheckVersionResult.file)
  return file_.Mutable(index);
}
inline ::lalune::VersionFile* CheckVersionResult::add_file() {
  // @@protoc_insertion_point(field_add:lalune.CheckVersionResult.file)
  return file_.Add();
}
inline const ::google_lalune::protobuf::RepeatedPtrField< ::lalune::VersionFile >&
CheckVersionResult::file() const {
  // @@protoc_insertion_point(field_list:lalune.CheckVersionResult.file)
  return file_;
}
inline ::google_lalune::protobuf::RepeatedPtrField< ::lalune::VersionFile >*
CheckVersionResult::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:lalune.CheckVersionResult.file)
  return &file_;
}

// -------------------------------------------------------------------

// AddVersion

// required string version_from = 2;
inline bool AddVersion::has_version_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddVersion::set_has_version_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddVersion::clear_has_version_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddVersion::clear_version_from() {
  if (version_from_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_from_->clear();
  }
  clear_has_version_from();
}
inline const ::std::string& AddVersion::version_from() const {
  // @@protoc_insertion_point(field_get:lalune.AddVersion.version_from)
  return *version_from_;
}
inline void AddVersion::set_version_from(const ::std::string& value) {
  set_has_version_from();
  if (version_from_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_from_ = new ::std::string;
  }
  version_from_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.AddVersion.version_from)
}
inline void AddVersion::set_version_from(const char* value) {
  set_has_version_from();
  if (version_from_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_from_ = new ::std::string;
  }
  version_from_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.AddVersion.version_from)
}
inline void AddVersion::set_version_from(const char* value, size_t size) {
  set_has_version_from();
  if (version_from_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_from_ = new ::std::string;
  }
  version_from_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.AddVersion.version_from)
}
inline ::std::string* AddVersion::mutable_version_from() {
  set_has_version_from();
  if (version_from_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_from_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.AddVersion.version_from)
  return version_from_;
}
inline ::std::string* AddVersion::release_version_from() {
  clear_has_version_from();
  if (version_from_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_from_;
    version_from_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddVersion::set_allocated_version_from(::std::string* version_from) {
  if (version_from_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_from_;
  }
  if (version_from) {
    set_has_version_from();
    version_from_ = version_from;
  } else {
    clear_has_version_from();
    version_from_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.AddVersion.version_from)
}

// required string version_to = 3;
inline bool AddVersion::has_version_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddVersion::set_has_version_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddVersion::clear_has_version_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddVersion::clear_version_to() {
  if (version_to_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_to_->clear();
  }
  clear_has_version_to();
}
inline const ::std::string& AddVersion::version_to() const {
  // @@protoc_insertion_point(field_get:lalune.AddVersion.version_to)
  return *version_to_;
}
inline void AddVersion::set_version_to(const ::std::string& value) {
  set_has_version_to();
  if (version_to_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_to_ = new ::std::string;
  }
  version_to_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.AddVersion.version_to)
}
inline void AddVersion::set_version_to(const char* value) {
  set_has_version_to();
  if (version_to_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_to_ = new ::std::string;
  }
  version_to_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.AddVersion.version_to)
}
inline void AddVersion::set_version_to(const char* value, size_t size) {
  set_has_version_to();
  if (version_to_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_to_ = new ::std::string;
  }
  version_to_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.AddVersion.version_to)
}
inline ::std::string* AddVersion::mutable_version_to() {
  set_has_version_to();
  if (version_to_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_to_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.AddVersion.version_to)
  return version_to_;
}
inline ::std::string* AddVersion::release_version_to() {
  clear_has_version_to();
  if (version_to_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_to_;
    version_to_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddVersion::set_allocated_version_to(::std::string* version_to) {
  if (version_to_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_to_;
  }
  if (version_to) {
    set_has_version_to();
    version_to_ = version_to;
  } else {
    clear_has_version_to();
    version_to_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.AddVersion.version_to)
}

// optional uint32 flag_mask = 5;
inline bool AddVersion::has_flag_mask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddVersion::set_has_flag_mask() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddVersion::clear_has_flag_mask() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddVersion::clear_flag_mask() {
  flag_mask_ = 0u;
  clear_has_flag_mask();
}
inline ::google_lalune::protobuf::uint32 AddVersion::flag_mask() const {
  // @@protoc_insertion_point(field_get:lalune.AddVersion.flag_mask)
  return flag_mask_;
}
inline void AddVersion::set_flag_mask(::google_lalune::protobuf::uint32 value) {
  set_has_flag_mask();
  flag_mask_ = value;
  // @@protoc_insertion_point(field_set:lalune.AddVersion.flag_mask)
}

// optional string url_prefix = 4;
inline bool AddVersion::has_url_prefix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddVersion::set_has_url_prefix() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddVersion::clear_has_url_prefix() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddVersion::clear_url_prefix() {
  if (url_prefix_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_->clear();
  }
  clear_has_url_prefix();
}
inline const ::std::string& AddVersion::url_prefix() const {
  // @@protoc_insertion_point(field_get:lalune.AddVersion.url_prefix)
  return *url_prefix_;
}
inline void AddVersion::set_url_prefix(const ::std::string& value) {
  set_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:lalune.AddVersion.url_prefix)
}
inline void AddVersion::set_url_prefix(const char* value) {
  set_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:lalune.AddVersion.url_prefix)
}
inline void AddVersion::set_url_prefix(const char* value, size_t size) {
  set_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lalune.AddVersion.url_prefix)
}
inline ::std::string* AddVersion::mutable_url_prefix() {
  set_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lalune.AddVersion.url_prefix)
  return url_prefix_;
}
inline ::std::string* AddVersion::release_url_prefix() {
  clear_has_url_prefix();
  if (url_prefix_ == &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_prefix_;
    url_prefix_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddVersion::set_allocated_url_prefix(::std::string* url_prefix) {
  if (url_prefix_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_prefix_;
  }
  if (url_prefix) {
    set_has_url_prefix();
    url_prefix_ = url_prefix;
  } else {
    clear_has_url_prefix();
    url_prefix_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lalune.AddVersion.url_prefix)
}

// repeated .lalune.VersionFile file = 1;
inline int AddVersion::file_size() const {
  return file_.size();
}
inline void AddVersion::clear_file() {
  file_.Clear();
}
inline const ::lalune::VersionFile& AddVersion::file(int index) const {
  // @@protoc_insertion_point(field_get:lalune.AddVersion.file)
  return file_.Get(index);
}
inline ::lalune::VersionFile* AddVersion::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:lalune.AddVersion.file)
  return file_.Mutable(index);
}
inline ::lalune::VersionFile* AddVersion::add_file() {
  // @@protoc_insertion_point(field_add:lalune.AddVersion.file)
  return file_.Add();
}
inline const ::google_lalune::protobuf::RepeatedPtrField< ::lalune::VersionFile >&
AddVersion::file() const {
  // @@protoc_insertion_point(field_list:lalune.AddVersion.file)
  return file_;
}
inline ::google_lalune::protobuf::RepeatedPtrField< ::lalune::VersionFile >*
AddVersion::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:lalune.AddVersion.file)
  return &file_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lalune

#ifndef SWIG
namespace google_lalune {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Version_2eproto__INCLUDED
