// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Account.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Account.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lalune {

namespace {

const ::google_lalune::protobuf::Descriptor* RandomNickRequest_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  RandomNickRequest_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* RandomNickResponce_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  RandomNickResponce_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* AutoRegisterRequest_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  AutoRegisterRequest_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* AutoRegisterResponce_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  AutoRegisterResponce_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google_lalune::protobuf::Descriptor* LoginResponce_descriptor_ = NULL;
const ::google_lalune::protobuf::internal::GeneratedMessageReflection*
  LoginResponce_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Account_2eproto() {
  protobuf_AddDesc_Account_2eproto();
  const ::google_lalune::protobuf::FileDescriptor* file =
    ::google_lalune::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Account.proto");
  GOOGLE_CHECK(file != NULL);
  RandomNickRequest_descriptor_ = file->message_type(0);
  static const int RandomNickRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNickRequest, gender_),
  };
  RandomNickRequest_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      RandomNickRequest_descriptor_,
      RandomNickRequest::default_instance_,
      RandomNickRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNickRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNickRequest, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomNickRequest));
  RandomNickResponce_descriptor_ = file->message_type(1);
  static const int RandomNickResponce_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNickResponce, nick_),
  };
  RandomNickResponce_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      RandomNickResponce_descriptor_,
      RandomNickResponce::default_instance_,
      RandomNickResponce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNickResponce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNickResponce, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomNickResponce));
  AutoRegisterRequest_descriptor_ = file->message_type(2);
  static const int AutoRegisterRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRegisterRequest, nick_),
  };
  AutoRegisterRequest_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      AutoRegisterRequest_descriptor_,
      AutoRegisterRequest::default_instance_,
      AutoRegisterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRegisterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRegisterRequest, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoRegisterRequest));
  AutoRegisterResponce_descriptor_ = file->message_type(3);
  static const int AutoRegisterResponce_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRegisterResponce, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRegisterResponce, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRegisterResponce, pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRegisterResponce, errstr_),
  };
  AutoRegisterResponce_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      AutoRegisterResponce_descriptor_,
      AutoRegisterResponce::default_instance_,
      AutoRegisterResponce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRegisterResponce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRegisterResponce, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoRegisterResponce));
  LoginRequest_descriptor_ = file->message_type(4);
  static const int LoginRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, pwd_),
  };
  LoginRequest_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  LoginResponce_descriptor_ = file->message_type(5);
  static const int LoginResponce_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponce, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponce, errstr_),
  };
  LoginResponce_reflection_ =
    new ::google_lalune::protobuf::internal::GeneratedMessageReflection(
      LoginResponce_descriptor_,
      LoginResponce::default_instance_,
      LoginResponce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponce, _unknown_fields_),
      -1,
      ::google_lalune::protobuf::DescriptorPool::generated_pool(),
      ::google_lalune::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResponce));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_lalune::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Account_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomNickRequest_descriptor_, &RandomNickRequest::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomNickResponce_descriptor_, &RandomNickResponce::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoRegisterRequest_descriptor_, &AutoRegisterRequest::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoRegisterResponce_descriptor_, &AutoRegisterResponce::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResponce_descriptor_, &LoginResponce::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Account_2eproto() {
  delete RandomNickRequest::default_instance_;
  delete RandomNickRequest_reflection_;
  delete RandomNickResponce::default_instance_;
  delete RandomNickResponce_reflection_;
  delete AutoRegisterRequest::default_instance_;
  delete AutoRegisterRequest_reflection_;
  delete AutoRegisterResponce::default_instance_;
  delete AutoRegisterResponce_reflection_;
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginResponce::default_instance_;
  delete LoginResponce_reflection_;
}

void protobuf_AddDesc_Account_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_lalune::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rAccount.proto\022\006lalune\"#\n\021RandomNickReq"
    "uest\022\016\n\006gender\030\001 \002(\005\"\"\n\022RandomNickRespon"
    "ce\022\014\n\004nick\030\001 \002(\t\"#\n\023AutoRegisterRequest\022"
    "\014\n\004nick\030\001 \002(\t\"N\n\024AutoRegisterResponce\022\014\n"
    "\004code\030\001 \002(\005\022\013\n\003uid\030\002 \001(\003\022\013\n\003pwd\030\003 \001(\t\022\016\n"
    "\006errStr\030\004 \001(\t\"(\n\014LoginRequest\022\013\n\003uid\030\001 \002"
    "(\003\022\013\n\003pwd\030\002 \002(\t\"-\n\rLoginResponce\022\014\n\004code"
    "\030\001 \002(\005\022\016\n\006errStr\030\002 \001(\t", 302);
  ::google_lalune::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Account.proto", &protobuf_RegisterTypes);
  RandomNickRequest::default_instance_ = new RandomNickRequest();
  RandomNickResponce::default_instance_ = new RandomNickResponce();
  AutoRegisterRequest::default_instance_ = new AutoRegisterRequest();
  AutoRegisterResponce::default_instance_ = new AutoRegisterResponce();
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResponce::default_instance_ = new LoginResponce();
  RandomNickRequest::default_instance_->InitAsDefaultInstance();
  RandomNickResponce::default_instance_->InitAsDefaultInstance();
  AutoRegisterRequest::default_instance_->InitAsDefaultInstance();
  AutoRegisterResponce::default_instance_->InitAsDefaultInstance();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResponce::default_instance_->InitAsDefaultInstance();
  ::google_lalune::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Account_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Account_2eproto {
  StaticDescriptorInitializer_Account_2eproto() {
    protobuf_AddDesc_Account_2eproto();
  }
} static_descriptor_initializer_Account_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RandomNickRequest::kGenderFieldNumber;
#endif  // !_MSC_VER

RandomNickRequest::RandomNickRequest()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.RandomNickRequest)
}

void RandomNickRequest::InitAsDefaultInstance() {
}

RandomNickRequest::RandomNickRequest(const RandomNickRequest& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.RandomNickRequest)
}

void RandomNickRequest::SharedCtor() {
  _cached_size_ = 0;
  gender_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomNickRequest::~RandomNickRequest() {
  // @@protoc_insertion_point(destructor:lalune.RandomNickRequest)
  SharedDtor();
}

void RandomNickRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RandomNickRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* RandomNickRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomNickRequest_descriptor_;
}

const RandomNickRequest& RandomNickRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Account_2eproto();
  return *default_instance_;
}

RandomNickRequest* RandomNickRequest::default_instance_ = NULL;

RandomNickRequest* RandomNickRequest::New() const {
  return new RandomNickRequest;
}

void RandomNickRequest::Clear() {
  gender_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomNickRequest::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.RandomNickRequest)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gender = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.RandomNickRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.RandomNickRequest)
  return false;
#undef DO_
}

void RandomNickRequest::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.RandomNickRequest)
  // required int32 gender = 1;
  if (has_gender()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32(1, this->gender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.RandomNickRequest)
}

::google_lalune::protobuf::uint8* RandomNickRequest::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.RandomNickRequest)
  // required int32 gender = 1;
  if (has_gender()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.RandomNickRequest)
  return target;
}

int RandomNickRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gender = 1;
    if (has_gender()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomNickRequest::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomNickRequest* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const RandomNickRequest*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomNickRequest::MergeFrom(const RandomNickRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gender()) {
      set_gender(from.gender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomNickRequest::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomNickRequest::CopyFrom(const RandomNickRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomNickRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RandomNickRequest::Swap(RandomNickRequest* other) {
  if (other != this) {
    std::swap(gender_, other->gender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata RandomNickRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = RandomNickRequest_descriptor_;
  metadata.reflection = RandomNickRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandomNickResponce::kNickFieldNumber;
#endif  // !_MSC_VER

RandomNickResponce::RandomNickResponce()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.RandomNickResponce)
}

void RandomNickResponce::InitAsDefaultInstance() {
}

RandomNickResponce::RandomNickResponce(const RandomNickResponce& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.RandomNickResponce)
}

void RandomNickResponce::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nick_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomNickResponce::~RandomNickResponce() {
  // @@protoc_insertion_point(destructor:lalune.RandomNickResponce)
  SharedDtor();
}

void RandomNickResponce::SharedDtor() {
  if (nick_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_;
  }
  if (this != default_instance_) {
  }
}

void RandomNickResponce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* RandomNickResponce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomNickResponce_descriptor_;
}

const RandomNickResponce& RandomNickResponce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Account_2eproto();
  return *default_instance_;
}

RandomNickResponce* RandomNickResponce::default_instance_ = NULL;

RandomNickResponce* RandomNickResponce::New() const {
  return new RandomNickResponce;
}

void RandomNickResponce::Clear() {
  if (has_nick()) {
    if (nick_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
      nick_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomNickResponce::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.RandomNickResponce)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nick = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick().data(), this->nick().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "nick");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.RandomNickResponce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.RandomNickResponce)
  return false;
#undef DO_
}

void RandomNickResponce::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.RandomNickResponce)
  // required string nick = 1;
  if (has_nick()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "nick");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.RandomNickResponce)
}

::google_lalune::protobuf::uint8* RandomNickResponce::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.RandomNickResponce)
  // required string nick = 1;
  if (has_nick()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "nick");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.RandomNickResponce)
  return target;
}

int RandomNickResponce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nick = 1;
    if (has_nick()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomNickResponce::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomNickResponce* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const RandomNickResponce*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomNickResponce::MergeFrom(const RandomNickResponce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nick()) {
      set_nick(from.nick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomNickResponce::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomNickResponce::CopyFrom(const RandomNickResponce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomNickResponce::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RandomNickResponce::Swap(RandomNickResponce* other) {
  if (other != this) {
    std::swap(nick_, other->nick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata RandomNickResponce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = RandomNickResponce_descriptor_;
  metadata.reflection = RandomNickResponce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoRegisterRequest::kNickFieldNumber;
#endif  // !_MSC_VER

AutoRegisterRequest::AutoRegisterRequest()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.AutoRegisterRequest)
}

void AutoRegisterRequest::InitAsDefaultInstance() {
}

AutoRegisterRequest::AutoRegisterRequest(const AutoRegisterRequest& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.AutoRegisterRequest)
}

void AutoRegisterRequest::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nick_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoRegisterRequest::~AutoRegisterRequest() {
  // @@protoc_insertion_point(destructor:lalune.AutoRegisterRequest)
  SharedDtor();
}

void AutoRegisterRequest::SharedDtor() {
  if (nick_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_;
  }
  if (this != default_instance_) {
  }
}

void AutoRegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* AutoRegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoRegisterRequest_descriptor_;
}

const AutoRegisterRequest& AutoRegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Account_2eproto();
  return *default_instance_;
}

AutoRegisterRequest* AutoRegisterRequest::default_instance_ = NULL;

AutoRegisterRequest* AutoRegisterRequest::New() const {
  return new AutoRegisterRequest;
}

void AutoRegisterRequest::Clear() {
  if (has_nick()) {
    if (nick_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
      nick_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoRegisterRequest::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.AutoRegisterRequest)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nick = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick().data(), this->nick().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "nick");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.AutoRegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.AutoRegisterRequest)
  return false;
#undef DO_
}

void AutoRegisterRequest::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.AutoRegisterRequest)
  // required string nick = 1;
  if (has_nick()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "nick");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.AutoRegisterRequest)
}

::google_lalune::protobuf::uint8* AutoRegisterRequest::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.AutoRegisterRequest)
  // required string nick = 1;
  if (has_nick()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "nick");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.AutoRegisterRequest)
  return target;
}

int AutoRegisterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nick = 1;
    if (has_nick()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoRegisterRequest::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoRegisterRequest* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const AutoRegisterRequest*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoRegisterRequest::MergeFrom(const AutoRegisterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nick()) {
      set_nick(from.nick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoRegisterRequest::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRegisterRequest::CopyFrom(const AutoRegisterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRegisterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AutoRegisterRequest::Swap(AutoRegisterRequest* other) {
  if (other != this) {
    std::swap(nick_, other->nick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata AutoRegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = AutoRegisterRequest_descriptor_;
  metadata.reflection = AutoRegisterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoRegisterResponce::kCodeFieldNumber;
const int AutoRegisterResponce::kUidFieldNumber;
const int AutoRegisterResponce::kPwdFieldNumber;
const int AutoRegisterResponce::kErrStrFieldNumber;
#endif  // !_MSC_VER

AutoRegisterResponce::AutoRegisterResponce()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.AutoRegisterResponce)
}

void AutoRegisterResponce::InitAsDefaultInstance() {
}

AutoRegisterResponce::AutoRegisterResponce(const AutoRegisterResponce& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.AutoRegisterResponce)
}

void AutoRegisterResponce::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  pwd_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  errstr_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoRegisterResponce::~AutoRegisterResponce() {
  // @@protoc_insertion_point(destructor:lalune.AutoRegisterResponce)
  SharedDtor();
}

void AutoRegisterResponce::SharedDtor() {
  if (pwd_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (errstr_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errstr_;
  }
  if (this != default_instance_) {
  }
}

void AutoRegisterResponce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* AutoRegisterResponce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoRegisterResponce_descriptor_;
}

const AutoRegisterResponce& AutoRegisterResponce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Account_2eproto();
  return *default_instance_;
}

AutoRegisterResponce* AutoRegisterResponce::default_instance_ = NULL;

AutoRegisterResponce* AutoRegisterResponce::New() const {
  return new AutoRegisterResponce;
}

void AutoRegisterResponce::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    code_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
    if (has_pwd()) {
      if (pwd_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd_->clear();
      }
    }
    if (has_errstr()) {
      if (errstr_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoRegisterResponce::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.AutoRegisterResponce)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional int64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int64, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pwd;
        break;
      }

      // optional string pwd = 3;
      case 3: {
        if (tag == 26) {
         parse_pwd:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_errStr;
        break;
      }

      // optional string errStr = 4;
      case 4: {
        if (tag == 34) {
         parse_errStr:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errstr()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errstr().data(), this->errstr().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "errstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.AutoRegisterResponce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.AutoRegisterResponce)
  return false;
#undef DO_
}

void AutoRegisterResponce::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.AutoRegisterResponce)
  // required int32 code = 1;
  if (has_code()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional int64 uid = 2;
  if (has_uid()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  // optional string pwd = 3;
  if (has_pwd()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // optional string errStr = 4;
  if (has_errstr()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errstr().data(), this->errstr().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "errstr");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->errstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.AutoRegisterResponce)
}

::google_lalune::protobuf::uint8* AutoRegisterResponce::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.AutoRegisterResponce)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional int64 uid = 2;
  if (has_uid()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  // optional string pwd = 3;
  if (has_pwd()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // optional string errStr = 4;
  if (has_errstr()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errstr().data(), this->errstr().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "errstr");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->errstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.AutoRegisterResponce)
  return target;
}

int AutoRegisterResponce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional string pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional string errStr = 4;
    if (has_errstr()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->errstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoRegisterResponce::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoRegisterResponce* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const AutoRegisterResponce*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoRegisterResponce::MergeFrom(const AutoRegisterResponce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_errstr()) {
      set_errstr(from.errstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoRegisterResponce::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRegisterResponce::CopyFrom(const AutoRegisterResponce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRegisterResponce::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AutoRegisterResponce::Swap(AutoRegisterResponce* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(uid_, other->uid_);
    std::swap(pwd_, other->pwd_);
    std::swap(errstr_, other->errstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata AutoRegisterResponce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = AutoRegisterResponce_descriptor_;
  metadata.reflection = AutoRegisterResponce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kUidFieldNumber;
const int LoginRequest::kPwdFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.LoginRequest)
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  pwd_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:lalune.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (pwd_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Account_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = GOOGLE_LONGLONG(0);
    if (has_pwd()) {
      if (pwd_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.LoginRequest)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int64, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pwd;
        break;
      }

      // required string pwd = 2;
      case 2: {
        if (tag == 18) {
         parse_pwd:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.LoginRequest)
  // required int64 uid = 1;
  if (has_uid()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required string pwd = 2;
  if (has_pwd()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.LoginRequest)
}

::google_lalune::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.LoginRequest)
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required string pwd = 2;
  if (has_pwd()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.LoginRequest)
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // required string pwd = 2;
    if (has_pwd()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResponce::kCodeFieldNumber;
const int LoginResponce::kErrStrFieldNumber;
#endif  // !_MSC_VER

LoginResponce::LoginResponce()
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lalune.LoginResponce)
}

void LoginResponce::InitAsDefaultInstance() {
}

LoginResponce::LoginResponce(const LoginResponce& from)
  : ::google_lalune::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lalune.LoginResponce)
}

void LoginResponce::SharedCtor() {
  ::google_lalune::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  errstr_ = const_cast< ::std::string*>(&::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponce::~LoginResponce() {
  // @@protoc_insertion_point(destructor:lalune.LoginResponce)
  SharedDtor();
}

void LoginResponce::SharedDtor() {
  if (errstr_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errstr_;
  }
  if (this != default_instance_) {
  }
}

void LoginResponce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_lalune::protobuf::Descriptor* LoginResponce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponce_descriptor_;
}

const LoginResponce& LoginResponce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Account_2eproto();
  return *default_instance_;
}

LoginResponce* LoginResponce::default_instance_ = NULL;

LoginResponce* LoginResponce::New() const {
  return new LoginResponce;
}

void LoginResponce::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    code_ = 0;
    if (has_errstr()) {
      if (errstr_ != &::google_lalune::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResponce::MergePartialFromCodedStream(
    ::google_lalune::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_lalune::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lalune.LoginResponce)
  for (;;) {
    ::std::pair< ::google_lalune::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_lalune::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_lalune::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_lalune::protobuf::int32, ::google_lalune::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errStr;
        break;
      }

      // optional string errStr = 2;
      case 2: {
        if (tag == 18) {
         parse_errStr:
          DO_(::google_lalune::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errstr()));
          ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errstr().data(), this->errstr().length(),
            ::google_lalune::protobuf::internal::WireFormat::PARSE,
            "errstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_lalune::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_lalune::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_lalune::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lalune.LoginResponce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lalune.LoginResponce)
  return false;
#undef DO_
}

void LoginResponce::SerializeWithCachedSizes(
    ::google_lalune::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lalune.LoginResponce)
  // required int32 code = 1;
  if (has_code()) {
    ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string errStr = 2;
  if (has_errstr()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errstr().data(), this->errstr().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "errstr");
    ::google_lalune::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lalune.LoginResponce)
}

::google_lalune::protobuf::uint8* LoginResponce::SerializeWithCachedSizesToArray(
    ::google_lalune::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lalune.LoginResponce)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google_lalune::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string errStr = 2;
  if (has_errstr()) {
    ::google_lalune::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errstr().data(), this->errstr().length(),
      ::google_lalune::protobuf::internal::WireFormat::SERIALIZE,
      "errstr");
    target =
      ::google_lalune::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_lalune::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lalune.LoginResponce)
  return target;
}

int LoginResponce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string errStr = 2;
    if (has_errstr()) {
      total_size += 1 +
        ::google_lalune::protobuf::internal::WireFormatLite::StringSize(
          this->errstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_lalune::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponce::MergeFrom(const ::google_lalune::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResponce* source =
    ::google_lalune::protobuf::internal::dynamic_cast_if_available<const LoginResponce*>(
      &from);
  if (source == NULL) {
    ::google_lalune::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResponce::MergeFrom(const LoginResponce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_errstr()) {
      set_errstr(from.errstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResponce::CopyFrom(const ::google_lalune::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponce::CopyFrom(const LoginResponce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponce::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginResponce::Swap(LoginResponce* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(errstr_, other->errstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_lalune::protobuf::Metadata LoginResponce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_lalune::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponce_descriptor_;
  metadata.reflection = LoginResponce_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lalune

// @@protoc_insertion_point(global_scope)
